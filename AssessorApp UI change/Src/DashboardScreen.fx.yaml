DashboardScreen As screen:
    OnVisible: |-
        =
        //Set(LogOutTimer, -1800);
        Set(VarReportIssue,false);
        Set(varPatchTimer,false);
        UpdateIf(
                gcProjectAssignment,
                 isCompleted = "Inprogress1",
                {
                    isCompleted: "Inprogress"
                }
            );
           SaveData(
                    gcProjectAssignment,
                    "localprojectassignment"
           );
         If(App.Width>App.Height,App.ActiveScreen.Orientation="Landscape",App.ActiveScreen.Orientation="Landscape");

    ctnMainDS As groupContainer.verticalAutoLayoutContainer:
        Height: =Parent.Height
        LayoutDirection: =LayoutDirection.Vertical
        LayoutMode: =LayoutMode.Auto
        LayoutOverflowY: =LayoutOverflow.Scroll
        Width: =Parent.Width
        ZIndex: =3

        Container4 As groupContainer.horizontalAutoLayoutContainer:
            FillPortions: =0
            Height: =40
            LayoutGap: =10
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            Visible: =false
            ZIndex: =1

            Label3 As label:
                Font: =Header.HeaderFont
                FontWeight: =FontWeight.Semibold
                Size: =14
                Text: ="Power Apps | Schindler Assessor App UAT"
                Width: =Parent.Width/1.2
                ZIndex: =1

            Image2 As image:
                Height: =40
                Image: =If(Connection.Connected,'internet green icon-1x','internet-1x')
                Visible: =Connection.Connected=true
                Width: =40
                ZIndex: =2

            Image2_2 As image:
                Height: =40
                Image: ='refresh-1x'
                OnSelect: |-
                    =//get new assignment and completed assignment updates
                    If(
                        //here we check network is available or not
                        Connection.Connected,
                        If(
                            //here we check assignment,bankassessment,unitassessment collection have any unsend data or not,if yes then gives message "Assessement records saved in your device has not yet submitted to server .Please submit and try again." otherwise get new assignment related data
                    
                            IsBlank(LookUp(gcProjectAssignment,AstatusUpdate = 0 || AstatusUpdate = 1))            &&
                            IsBlank(LookUp(GC_bankAssessment,BstatusUpdate = 0 || BstatusUpdate = 1))              &&
                            IsBlank(LookUp(GC_unitAssessment,UstatusUpdate = 0 || UstatusUpdate = 1)) ,
                       
                         
                         Set(popupDashSyncText,"Getting new assignment assigned to you. ");
                         Set(popupDashSyncSuccess,true);
                        Concurrent(
                    //client master data
                            ClearCollect(
                                gcClient,
                                schindlerClients
                            );
                            SaveData(
                                gcClient,
                                "localclient"
                        );
                            ,
                       //Banks master data
                            ClearCollect(
                                gcBank,
                                schindlerBanks
                            );
                            SaveData(
                                gcBank,
                                "localbank"
                            );
                            ,
                        //master units data
                            ClearCollect(
                                gcBankunit,
                                bankUnits
                            );
                            SaveData(
                                gcBankunit,
                                "localgcbankunit"
                            );
                            ,
                        //assignment data 
                            
                            ClearCollect(
                                    gcProjectAssignmentAdd,
                                    Filter(
                                        assignments,
                                        assessorId = varLoggedAssessor
                                    )
                                );
                                ClearCollect(
                                    gcProjectAssignment,
                                    AddColumns(
                                        gcProjectAssignmentAdd,
                                        "AstatusUpdate",
                                        2
                                    )
                                );
                                ,
                            
                            //assignment unit
                            ClearCollect(
                                gcAssignmentunit,
                                Filter(
                                    assignmentUnits,
                                    assignmentId.assessorId = varLoggedAssessor
                                )
                            );
                            SaveData(
                                gcAssignmentunit,
                                "localassignmentunits"
                            );
                            ,
                            //bank Assessment
                            ClearCollect(
                                    GC_bankAssessmentAdd,
                                    Filter(
                                        bankAssessment,
                                        assignmentId.assessorId = varLoggedAssessor
                                    )
                                );
                                ClearCollect(
                                    GC_bankAssessment,
                                    AddColumns(
                                        GC_bankAssessmentAdd,
                                        "BstatusUpdate",
                                        2
                                    )
                                );
                            ,
                            //unit assessment
                            ClearCollect(
                                    GC_unitAssessmentAdd,
                                    Filter(
                                        unitAssessment,
                                        assignmentId.assessorId = varLoggedAssessor
                                    )
                                );
                                ClearCollect(
                                    GC_unitAssessment,
                                    AddColumns(
                                        GC_unitAssessmentAdd,
                                        "UstatusUpdate",
                                        2
                                    )
                                );
                            );//concurrent close
                        
                    //delete completed assignment data from localcache 
                    ForAll(
                            Filter(
                                gcProjectAssignment,
                                isCompleted = "Completed"
                            ) As i,
                            RemoveIf(
                                GC_bankAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GC_unitAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GcSectionAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GcCheckpointAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GC_checkpointItemAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GC_checkpointItem_ActionItem,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GC_checkpointItem_Images,
                                assignmentId.Id = i.Id
                            );
                        );
                    //save data to localcache
                        SaveData(
                                gcProjectAssignment,
                                "localprojectassignment"
                            );
                        SaveData(
                                GC_bankAssessment,
                                "localbankassessment"
                            );
                        SaveData(
                                GC_unitAssessment,
                                "localunitassessment"
                            );
                        SaveData(
                            GcSectionAssessment,
                            "localsectionassessment"
                        );
                        SaveData(
                            GcCheckpointAssessment,
                            "localcheckpointassessment"
                        );
                        SaveData(
                            GC_checkpointItemAssessment,
                            "localcheckpointitemassessment"
                        );
                        SaveData(
                            GC_checkpointItem_ActionItem,
                            "localcheckpointitemactionitem"
                        );
                        SaveData(
                            GC_checkpointItem_Images,
                            "localcheckpointitemimage"
                        );
                    
                        Trace(First(gcAssignmentunit).bankUnitId.unitNumber,TraceSeverity.Information);
                        ,
                         
                         Set(popupDashSyncText,"Assessement records saved in your device has not yet submitted to server .Please submit and try again.");
                         Set(popupDashSyncSuccess,true);    
                        );  
                        ,
                       
                         Set(popupDashSyncText,"Network not available,Please check your network connection.");
                           Set(popupDashSyncSuccess,true);
                    );
                    //update Inprogress1 status to Inprogress to fix dashboard update issue
                    UpdateIf(
                        gcProjectAssignment,
                        isCompleted = "Inprogress1",
                        {isCompleted: "Inprogress"}
                    );
                Width: =40
                ZIndex: =3

        ctnHeaderDS As groupContainer.manualLayoutContainer:
            Fill: =Header.HeaderFill
            FillPortions: =0
            Height: =81
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            PaddingRight: =10
            Width: =Parent.Width
            ZIndex: =2

            Rectangle1_16 As rectangle:
                BorderColor: =RGBA(230, 230, 230, 1)
                BorderThickness: =1
                Fill: =RGBA(230, 230, 230, 1)
                Height: =1
                Width: =Parent.Width
                Y: =80
                ZIndex: =10

            Image2_33 As image:
                Height: =40
                Image: =If(Connection.Connected,'internet green icon-1x','internet-1x')
                Width: =30
                X: =lblAssessmentPS_1.X+lblAssessmentPS_1.Width+20
                Y: =25
                ZIndex: =11

            Image2_34 As image:
                Height: =40
                Image: ='refresh-1x'
                OnSelect: |
                    =//get new assignment and completed assignment updates
                    If(
                        //here we check network is available or not
                        Connection.Connected,
                        If(
                            //here we check assignment,bankassessment,unitassessment collection have any unsend data or not,if yes then gives message "Assessement records saved in your device has not yet submitted to server .Please submit and try again." otherwise get new assignment related data
                    
                            IsBlank(LookUp(gcProjectAssignment,AstatusUpdate = 0 || AstatusUpdate = 1))            &&
                            IsBlank(LookUp(GC_bankAssessment,BstatusUpdate = 0 || BstatusUpdate = 1))              &&
                            IsBlank(LookUp(GC_unitAssessment,UstatusUpdate = 0 || UstatusUpdate = 1)) ,
                       
                         
                         Set(popupDashSyncText,"Getting new assignment assigned to you. ");
                         Set(popupDashSyncSuccess,true);
                        Concurrent(
                    //client master data
                            ClearCollect(
                                gcClient,
                                schindlerClients
                            );
                            SaveData(
                                gcClient,
                                "localclient"
                        );
                            ,
                       //Banks master data
                            ClearCollect(
                                gcBank,
                                schindlerBanks
                            );
                            SaveData(
                                gcBank,
                                "localbank"
                            );
                            ,
                        //master units data
                            ClearCollect(
                                gcBankunit,
                                bankUnits
                            );
                            SaveData(
                                gcBankunit,
                                "localgcbankunit"
                            );
                            ,
                        //assignment data 
                            
                            ClearCollect(
                                    gcProjectAssignmentAdd,
                                    Filter(
                                        assignments,
                                        assessorId = varLoggedAssessor
                                    )
                                );
                                ClearCollect(
                                    gcProjectAssignment,
                                    AddColumns(
                                        gcProjectAssignmentAdd,
                                        "AstatusUpdate",
                                        2
                                    )
                                );
                                ,
                            
                            //assignment unit
                            ClearCollect(
                                gcAssignmentunit,
                                Filter(
                                    assignmentUnits,
                                    assignmentId.assessorId = varLoggedAssessor
                                )
                            );
                            SaveData(
                                gcAssignmentunit,
                                "localassignmentunits"
                            );
                            ,
                            //bank Assessment
                            ClearCollect(
                                    GC_bankAssessmentAdd,
                                    Filter(
                                        bankAssessment,
                                        assignmentId.assessorId = varLoggedAssessor
                                    )
                                );
                                ClearCollect(
                                    GC_bankAssessment,
                                    AddColumns(
                                        GC_bankAssessmentAdd,
                                        "BstatusUpdate",
                                        2
                                    )
                                );
                            ,
                            //unit assessment
                            ClearCollect(
                                    GC_unitAssessmentAdd,
                                    Filter(
                                        unitAssessment,
                                        assignmentId.assessorId = varLoggedAssessor
                                    )
                                );
                                ClearCollect(
                                    GC_unitAssessment,
                                    AddColumns(
                                        GC_unitAssessmentAdd,
                                        "UstatusUpdate",
                                        2
                                    )
                                );
                            );//concurrent close
                        
                    //delete completed assignment data from localcache 
                    ForAll(
                            Filter(
                                gcProjectAssignment,
                                isCompleted = "Completed"
                            ) As i,
                            RemoveIf(
                                GC_bankAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GC_unitAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GcSectionAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GcCheckpointAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GC_checkpointItemAssessment,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GC_checkpointItem_ActionItem,
                                assignmentId.Id = i.Id
                            );
                            RemoveIf(
                                GC_checkpointItem_Images,
                                assignmentId.Id = i.Id
                            );
                        );
                    //save data to localcache
                        SaveData(
                                gcProjectAssignment,
                                "localprojectassignment"
                            );
                        SaveData(
                                GC_bankAssessment,
                                "localbankassessment"
                            );
                        SaveData(
                                GC_unitAssessment,
                                "localunitassessment"
                            );
                        SaveData(
                            GcSectionAssessment,
                            "localsectionassessment"
                        );
                        SaveData(
                            GcCheckpointAssessment,
                            "localcheckpointassessment"
                        );
                        SaveData(
                            GC_checkpointItemAssessment,
                            "localcheckpointitemassessment"
                        );
                        SaveData(
                            GC_checkpointItem_ActionItem,
                            "localcheckpointitemactionitem"
                        );
                        SaveData(
                            GC_checkpointItem_Images,
                            "localcheckpointitemimage"
                        );
                    
                        Trace(First(gcAssignmentunit).bankUnitId.unitNumber,TraceSeverity.Information);
                        ,
                         
                         Set(popupDashSyncText,"Assessement records saved in your device has not yet submitted to server .Please submit and try again.");
                         Set(popupDashSyncSuccess,true);    
                        );  
                        ,
                       
                         Set(popupDashSyncText,"Network not available,Please check your network connection.");
                           Set(popupDashSyncSuccess,true);
                    );
                    //update Inprogress1 status to Inprogress to fix dashboard update issue
                    UpdateIf(
                        gcProjectAssignment,
                        isCompleted = "Inprogress1",
                        {isCompleted: "Inprogress"}
                    );
                Visible: =Connection.Connected=true
                Width: =40
                X: =Image2_33.X+Image2_33.Width+20
                Y: =27
                ZIndex: =12

            imgLogoPS_1 As image:
                DisplayMode: =DisplayMode.View
                Fill: =RGBA(255, 255, 255, 1)
                Height: =80
                Image: ='schindler-logo'
                PaddingBottom: =5
                PaddingLeft: =2
                PaddingRight: =1
                PaddingTop: =5
                Width: =ctnHeaderDS.Width/12
                ZIndex: =13

            lblAssessmentPS_1 As label:
                Align: =Align.Center
                Color: =Header.HeaderColor
                Font: =Header.HeaderFont
                FontWeight: =FontWeight.Bold
                Height: =81
                Size: =Header.HeaderFontSize
                Text: |-
                    =//"Assignments"
                    LookUp(
                     'Environment Variable Values',
                     'Environment Variable Definition'.'Schema Name' = "shlaf_AssessorAppName",
                     Value
                    )
                Width: =If(Parent.Width>821,Parent.Width/1.95,Parent.Width/2)
                X: =imgLogoPS_1.Width
                ZIndex: =14

            imgUserHeaderPS_1 As image:
                Height: =50
                Image: =userImg
                ImagePosition: =ImagePosition.Fill
                RadiusBottomLeft: =ctnHeaderPS.Height/0.10
                RadiusBottomRight: =ctnHeaderPS.Height/0.10
                RadiusTopLeft: =ctnHeaderPS.Height/0.10
                RadiusTopRight: =ctnHeaderPS.Height/0.10
                Width: =50
                X: =Image2_34.X+Image2_34.Width+20
                Y: =18
                ZIndex: =15

            lblUsernameHeaderPS_1 As label:
                Font: =Header.HeaderFont
                FontWeight: =FontWeight.Bold
                Height: =80
                PaddingLeft: =20
                Size: =Header.HeaderUserFontSize-2
                Text: =username
                Width: =ctnHeaderDS.Width/5.08
                X: =imgUserHeaderPS_1.X+imgUserHeaderPS_1.Width
                ZIndex: =16

        ctnMiddleDS As groupContainer.horizontalAutoLayoutContainer:
            AlignInContainer: =AlignInContainer.SetByContainer
            FillPortions: =0
            Height: =Parent.Height/3
            LayoutGap: =10
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingBottom: =20
            PaddingLeft: =20
            PaddingRight: =20
            PaddingTop: =20
            Width: =Parent.Width
            Y: =ctnHeaderDS.Height
            ZIndex: =3

            ctnCompletedProjects As groupContainer.manualLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                BorderColor: =RGBA(230,230,230,1)
                BorderThickness: =3
                FillPortions: =0
                Height: |-
                    =If(
                        App.Width < 1000,
                        Parent.Height / 3,
                        App.Width > 1000 && App.Width < 1200,
                        Parent.Height / 2.3,
                        Parent.Height / 1.6
                    )
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                Visible: =false
                Width: =Parent.Width/3.15
                Y: =ctnHeaderDS.Height
                ZIndex: =1

                lblCompletedproject As label:
                    Font: =Dashboard.DFont
                    FontWeight: =FontWeight.Bold
                    Height: =70
                    Size: =Dashboard.DFontSize
                    Text: |-
                        ="Completed
                        Assignments"
                    Width: =300
                    X: =Parent.Width/21
                    Y: =Parent.Height/8
                    ZIndex: =1

                lblCountCompletedproject As label:
                    Color: =RGBA(255, 0, 0, 1)
                    Font: =Dashboard.DFont
                    FontWeight: =FontWeight.Bold
                    Height: =88
                    Size: =If(App.Height<800,Dashboard.DCountSize,30)
                    Text: |-
                        =//To display Completed assignment count of Specific assessor 
                        CountRows(
                            (Filter(
                                gcProjectAssignment,
                                assessorId = varLoggedAssessor && isCompleted = "Completed"
                            ))
                        )
                    X: =Parent.Width/21
                    Y: =lblCompletedproject.Y+lblCompletedproject.Height+10
                    ZIndex: =2

                btnCompletedproject As button:
                    BorderColor: |
                        =
                    BorderThickness: =
                    Color: |+
                        =RGBA(0,0,0,0)
                        
                    DisabledBorderColor: =RGBA(0,0,0,0)
                    DisabledColor: =RGBA(0,0,0,0)
                    DisabledFill: =RGBA(0,0,0,0)
                    Fill: =RGBA(0, 0, 0, 0)
                    FocusedBorderColor: =RGBA(0,0,0,0)
                    FocusedBorderThickness: =
                    Height: =ctnCompletedProjects.Height
                    HoverBorderColor: =RGBA(0,0,0,0)
                    HoverColor: =RGBA(0,0,0,0)
                    HoverFill: =ColorFade(RGBA(0,0,0,0),-20%)
                    OnSelect: |-
                        =Set(upcomp,false);
                        Set(inpro,false);
                        Set(comp,true);
                        Navigate(ProjectScreen);
                    PressedBorderColor: =RGBA(0,0,0,0)
                    PressedColor: =RGBA(0,0,0,0)
                    PressedFill: =RGBA(0,0,0,0)
                    Text: =
                    Width: =ctnCompletedProjects.Width
                    ZIndex: =4

                imgCompletedprojects As image:
                    Height: =Parent.Height/3
                    Image: =completed
                    Width: =Parent.Width/5
                    X: =Parent.Width/1.3
                    Y: =lblCompletedproject.Y+lblCompletedproject.Height+10
                    ZIndex: =5

            ctnProgressProjects As groupContainer.manualLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                BorderColor: =AllScreensCSS.RActiveColor
                BorderThickness: =3
                Fill: =AllScreensCSS.RActiveColor
                FillPortions: =0
                Height: |-
                    =If(
                        App.Width < 1000,
                        Parent.Height / 1.8,
                        App.Width > 1000 && App.Width < 1200,
                        Parent.Height / 1.2,
                        Parent.Height / 1.2
                    )
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                Width: =Parent.Width/2.15
                Y: =ctnHeaderDS.Height
                ZIndex: =2

                lblProgressProjects As label:
                    AutoHeight: =true
                    Color: =AllScreensCSS.RColorWhite
                    Font: =Dashboard.DFont
                    FontWeight: =FontWeight.Bold
                    Height: =Parent.Height/3
                    Size: |-
                        =//Dashboard.DFontSize
                        If(
                            App.Width < 1000,
                            20, 
                            App.Width > 1000 && App.Width < 1200,
                           24,
                             26
                        )
                    Text: ="In-progress Assignments"
                    Width: =Parent.Width/1.09
                    X: =Parent.Width/21
                    Y: =Parent.Height/8
                    ZIndex: =1

                lblCountProgressProjects As label:
                    Color: =AllScreensCSS.RColorWhite
                    Font: =Dashboard.DFont
                    FontWeight: =FontWeight.Bold
                    Height: =Parent.Height/3
                    Size: |
                        =If(App.Height<800,
                        //Dashboard.DCountSize,
                        18,30)
                    Text: |-
                        =//To display Inprogress assignment count of Specific assessor 
                        CountRows(
                            (Filter(
                                gcProjectAssignment,
                                assessorId = varLoggedAssessor && isCompleted = "Inprogress"
                            ))
                        )
                    Width: =Parent.Width/2
                    X: =Parent.Width/21
                    Y: =lblProgressProjects.Y+lblProgressProjects.Height+10
                    ZIndex: =2

                imgProgressprojects As image:
                    Height: =Parent.Height/3
                    Image: =Vector
                    Width: =Parent.Width/5
                    X: =Parent.Width/1.3
                    Y: =lblProgressProjects.Y+lblProgressProjects.Height+10
                    ZIndex: =3

                btnInprogressproject As button:
                    BorderColor: =
                    BorderThickness: =
                    Color: |+
                        =RGBA(0,0,0,0)
                        
                    DisabledBorderColor: =RGBA(0,0,0,0)
                    DisabledColor: =RGBA(0,0,0,0)
                    DisabledFill: =RGBA(0,0,0,0)
                    Fill: =RGBA(0, 0, 0, 0)
                    FocusedBorderColor: =RGBA(0,0,0,0)
                    FocusedBorderThickness: =
                    Height: =ctnProgressProjects.Height
                    HoverBorderColor: =RGBA(0,0,0,0)
                    HoverColor: =RGBA(0,0,0,0)
                    HoverFill: =ColorFade(RGBA(0,0,0,0),-20%)
                    OnSelect: |-
                        =Set(comp,false);
                        Set(upcomp,false);
                        Set(inpro,true);
                        Navigate(ProjectScreen);
                    PressedBorderColor: =RGBA(0,0,0,0)
                    PressedColor: =RGBA(0,0,0,0)
                    PressedFill: =RGBA(0,0,0,0)
                    Text: =
                    Width: =ctnProgressProjects.Width
                    X: =0.34920634920632665
                    ZIndex: =4

            ctnUpcomingProjects As groupContainer.manualLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                BorderColor: =AllScreensCSS.RActiveColor
                BorderThickness: =3
                Fill: =AllScreensCSS.RActiveColor
                FillPortions: =0
                Height: |-
                    =If(
                        App.Width < 1000,
                        Parent.Height / 1.8,
                        App.Width > 1000 && App.Width < 1200,
                        Parent.Height / 1.2,
                        Parent.Height / 1.2
                    )
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                Width: =Parent.Width/2.15
                Y: =ctnHeaderDS.Height
                ZIndex: =3

                lblUpcomingProjects As label:
                    AutoHeight: =true
                    Color: =AllScreensCSS.RColorWhite
                    Font: =Dashboard.DFont
                    FontWeight: =FontWeight.Bold
                    Height: =Parent.Height/3
                    Size: |-
                        =If(
                            App.Width < 1000,
                            20, 
                            App.Width > 1000 && App.Width < 1200,
                           24,
                             26
                        )
                    Text: ="Upcoming Assignments"
                    Width: =Parent.Width/1.09
                    X: =Parent.Width/21
                    Y: =Parent.Height/8
                    ZIndex: =1

                lblCountUpcomingProjects As label:
                    Color: =AllScreensCSS.RColorWhite
                    Font: =Dashboard.DFont
                    FontWeight: =FontWeight.Bold
                    Height: =Parent.Height/3
                    Size: |
                        =If(App.Height<800,
                        //Dashboard.DCountSize,
                        18,30)
                    Text: |-
                        =//To display Upcomming assignment count of Specific assessor 
                        CountRows(
                            (Filter(
                                gcProjectAssignment,
                                assessorId = varLoggedAssessor && isCompleted = "Upcomming" || isCompleted = "Inprogress1"
                            ))
                        )
                    Width: =Parent.Width/2
                    X: =Parent.Width/21
                    Y: =lblUpcomingProjects.Y+lblUpcomingProjects.Height+10
                    ZIndex: =2

                imgUpcomingProjects As image:
                    Height: =Parent.Height/3
                    Image: =Vector22
                    Width: =Parent.Width/5
                    X: =Parent.Width/1.3
                    Y: =lblUpcomingProjects.Y+lblUpcomingProjects.Height+10
                    ZIndex: =3

                iconUpcomingprojectindicator As circle:
                    Fill: =RGBA(255, 191, 0, 1)
                    Height: =20
                    Visible: |
                        =If(CountRows((Filter(gcProjectAssignment,assessorId=varLoggedAssessor && isCompleted="Upcomming")))>0,true,false)
                    Width: =20
                    X: =Parent.Width-40
                    Y: =20
                    ZIndex: =4

                btnUpcomingProjects As button:
                    BorderColor: |
                        =
                    BorderThickness: =
                    Color: |+
                        =RGBA(0,0,0,0)
                        
                    DisabledBorderColor: =RGBA(0,0,0,0)
                    DisabledColor: =RGBA(0,0,0,0)
                    DisabledFill: =RGBA(0,0,0,0)
                    Fill: =RGBA(0, 0, 0, 0)
                    FocusedBorderColor: =RGBA(0,0,0,0)
                    FocusedBorderThickness: =
                    Height: =ctnUpcomingProjects.Height
                    HoverBorderColor: =RGBA(0,0,0,0)
                    HoverColor: =RGBA(0,0,0,0)
                    HoverFill: =ColorFade(RGBA(0,0,0,0),-20%)
                    OnSelect: |-
                        =Set(comp,false);
                        Set(inpro,false);
                        Set(upcomp,true);
                        Navigate(ProjectScreen);
                    PressedBorderColor: =RGBA(0,0,0,0)
                    PressedColor: =RGBA(0,0,0,0)
                    PressedFill: =RGBA(0,0,0,0)
                    Text: =
                    Width: =ctnUpcomingProjects.Width
                    X: =0.34920634920632665
                    ZIndex: =5

        ctnlpdimg As groupContainer.horizontalAutoLayoutContainer:
            AlignInContainer: =AlignInContainer.Center
            FillPortions: =0
            Height: |-
                =If(
                    App.Height < 768,
                    Parent.Height/2,
                    500
                )
            LayoutAlignItems: =LayoutAlignItems.End
            LayoutDirection: =LayoutDirection.Vertical
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingBottom: =200
            PaddingLeft: =15
            PaddingTop: =5
            Width: =Parent.Width-40
            ZIndex: =4

            Button2 As button:
                AlignInContainer: =AlignInContainer.Start
                BorderThickness: =0
                Fill: =AllScreensCSS.RActiveColor
                FocusedBorderThickness: =//4
                HoverBorderColor: =Self.Fill
                HoverColor: =Self.Color
                HoverFill: =//ColorFade(Self.Fill, -20%)
                OnSelect: |
                    =
                    Set(VarReportIssue,true);
                PressedColor: =Self.Color
                PressedFill: =Self.Fill
                Text: |-
                    =//CountRows(tempReportIssueAssessment) & CountRows(GC_checkpointItemAssessment)  &
                     " Report Issue" 
                Width: =200
                ZIndex: =1

            imgGraphicDS As image:
                AlignInContainer: =AlignInContainer.Center
                Height: =Parent.Height
                Image: ='lift image-1x'
                Width: =Parent.Width-500
                ZIndex: =2

        ctnlpdname As groupContainer.verticalAutoLayoutContainer:
            Height: =250
            LayoutDirection: =LayoutDirection.Vertical
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            Visible: =false
            Width: =Parent.Width
            ZIndex: =5

            imgLPD As image:
                AlignInContainer: =AlignInContainer.Center
                Height: =Parent.Height
                Image: ='lpd red'
                ImagePosition: =ImagePosition.Center
                Width: =Parent.Width
                ZIndex: =1

    imgloaderDS As image:
        Fill: =RGBA(0, 0, 0, 0.29)
        Height: =Parent.Height
        Image: ='ajax-loader 2'
        ImagePosition: =ImagePosition.Center
        Visible: =//varload = true
        Width: =Parent.Width
        X: =(Parent.Width-Self.Width)/2
        Y: =(Parent.Height-Self.Height)/2
        ZIndex: =5

    tmr_logout As timer:
        AutoStart: =//true
        Duration: =//30000
        OnTimerEnd: =
        OnTimerStart: =true
        Visible: =false
        X: =20
        Y: =20
        ZIndex: =14

    grPatchSuccessDS As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =14

        iconOuterRectangleDS As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =popupDashSyncSuccess =true
            Width: =Parent.Width
            ZIndex: =8

        iconInnerRectsngleDS As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =270
            Visible: =popupDashSyncSuccess =true
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =9

        imgInfoDS As image:
            Height: =52
            Image: =info
            Visible: =popupDashSyncSuccess =true
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =iconInnerRectsngleDS.Y+20
            ZIndex: =10

        LblTextDS As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Semibold
            Height: =100
            Size: =15
            Text: =popupDashSyncText
            Visible: =popupDashSyncSuccess =true
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =imgInfoDS.Y+imgInfoDS.Height
            ZIndex: =12

        btnSuccessDS As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |+
                =Set(
                    popupDashSyncSuccess,
                    false
                );
                
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =popupDashSyncSuccess =true
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =LblTextDS.Y+ LblTextDS.Height+5
            ZIndex: =13

    GroupHeaderPS_1 As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =18

    Group2 As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =21

        Rectangle1 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =VarReportIssue
            Width: =Parent.Width
            ZIndex: =15

        Rectangle2 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =405
            Visible: =VarReportIssue
            Width: =700
            X: =(Parent.Width -Self.Width)/2
            Y: =(Parent.Height - Self.Height)/2
            ZIndex: =16

        Container2 As groupContainer.horizontalAutoLayoutContainer:
            Height: =50
            LayoutMode: =LayoutMode.Auto
            Visible: =VarReportIssue
            Width: =Rectangle2.Width
            X: =Rectangle2.X
            Y: =Rectangle2.Y+10
            ZIndex: =17

            Label2 As label:
                FontWeight: =FontWeight.Semibold
                PaddingLeft: =20
                Text: ="Add Issue description"
                Width: =Parent.Width-70
                ZIndex: =1

            Icon1 As icon.Add:
                Color: =RGBA(153, 153, 153, 1)
                Height: =35
                Icon: =Icon.Cancel
                OnSelect: |-
                    =Set(VarReportIssue,false);
                    Reset(TextInput1);
                Width: =30
                ZIndex: =2

        TextInput1 As text:
            BorderColor: =RGBA(202, 202, 202, 1)
            Default: =""
            FocusedBorderThickness: =2
            Height: =250
            HintText: ="Enter.."
            HoverBorderColor: =Self.BorderColor
            HoverFill: =//RGBA(186, 202, 226, 1)
            Mode: =TextMode.MultiLine
            Reset: =true
            Visible: =VarReportIssue
            Width: =656
            X: =Rectangle2.X+20
            Y: =Container2.Y+Container2.Height +10
            ZIndex: =18

        Icon2 As icon.Add:
            Color: =RGBA(179, 179, 179, 1)
            Fill: =RGBA(179, 179, 179, 1)
            Height: =2
            Icon: =Icon.HorizontalLine
            Visible: =VarReportIssue
            Width: =TextInput1.Width
            X: =TextInput1.X
            Y: =TextInput1.Y +TextInput1.Height+10
            ZIndex: =19

        Button3 As button:
            BorderThickness: =0
            Fill: =AllScreensCSS.RActiveColor
            FocusedBorderColor: =//Self.BorderColor
            FocusedBorderThickness: =0
            HoverColor: =Self.Color
            HoverFill: =//Self.Fill
            OnSelect: |
                =If(
                    IsBlank(TextInput1.Text),
                    Notify(
                        "Please Enter Issue description.",
                        NotificationType.Warning
                    );
                    ,
                    Set(
                        VarReportGuid,
                        Text(GUID())
                    );
                    Patch(
                        ReportIssueMasters,
                        Defaults(ReportIssueMasters),
                        {
                            Id: VarReportGuid,
                            ReportedBy: VarUserEmail,
                            ReportDescription: TextInput1.Text,
                            Sender: "Assessor"
                        }
                    );
                    Refresh(ReportIssueMasters);
                    ClearCollect(
                        tempReportIssueAssessment,
                        LookUp(
                            ReportIssueAssessments,
                            Id = "0d0c02db-1aca-ed11-b597-000d3a5655ba"
                        )
                    );
                    Clear(tempReportIssueAssessment);
                    ForAll(
                        GC_checkpointItemAssessment As i,
                        Collect(
                            tempReportIssueAssessment,
                            {
                                Id: Text(GUID()),
                                ReportIssueMasterLID: LookUp(
                                    ReportIssueMasters,
                                    Id = VarReportGuid
                                ),
                                AssignmentId: LookUp(
                                    assignments,
                                    Id = i.assignmentId.Id
                                ),
                                GoNumber: i.bankUnitId.unitNumber,
                                UnitNumber: i.bankUnitId.unitNumber,
                                CheckpointItemName: i.checkpointItemName,
                                ActionCount: CountRows(
                                    Filter(
                                        GC_checkpointItem_ActionItem,
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                    )
                                ),
                                SavedActionCount: CountRows(
                                    Filter(
                                        GC_checkpointItem_ActionItem,
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIAstatusUpdate = 0
                                    )
                                ),
                                UnsubmitedActionCount: CountRows(
                                    Filter(
                                        GC_checkpointItem_ActionItem,
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIAstatusUpdate = 1
                                    )
                                ),
                                SubmitedActionCount: CountRows(
                                    Filter(
                                        GC_checkpointItem_ActionItem,
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIAstatusUpdate = 2
                                    )
                                ),
                                ImageCount: CountRows(
                                    Filter(
                                        GC_checkpointItem_Images,
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                    )
                                ),
                                SavedImageCount: CountRows(
                                    Filter(
                                        GC_checkpointItem_Images,
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIIstatusUpdate = 0
                                    )
                                ),
                                UnsubmitedImageCount: CountRows(
                                    Filter(
                                        GC_checkpointItem_Images,
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIIstatusUpdate = 1
                                    )
                                ),
                                SubmitedImageCount: CountRows(
                                    Filter(
                                        GC_checkpointItem_Images,
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIIstatusUpdate = 2
                                    )
                                )
                            }
                        );
                    );
                    Patch(
                        ReportIssueAssessments,
                        ShowColumns(
                            tempReportIssueAssessment,
                            "shlaf_reportissueassessment",
                            "shlaf_ReportIssueMaster",
                            "shlaf_gonumber",
                            "shlaf_AssignmentId",
                            "shlaf_unitnumber",
                            "shlaf_checkpointitemname",
                            "shlaf_actioncount",
                            "shlaf_savedactioncount",
                            "shlaf_submitedactioncount",
                            "shlaf_unsubmitedactioncount",
                            "shlaf_imagecount",
                            "shlaf_savedimagecount",
                            "shlaf_submitedimagecount",
                            "shlaf_unsubmitedimagecount"
                        )
                    );
                    Set(
                        VarReportIssue,
                        false
                    );
                    Reset(TextInput1);
                    
                );
                /*Patch(
                        ReportIssueAssessments,
                        Defaults(ReportIssueAssessments),
                        {
                            Id: Text(GUID()),
                            ReportIssueMasterId: LookUp(
                        ReportIssueMasters,
                        Id = VarReportGuid
                    ),
                            AssignmentId: LookUp(
                                assignments,
                                Id = i.assignmentId.Id
                            ),
                            GoNumber: i.bank_id.Go_Number,
                            UnitNumber: i.bankUnitId.unitNumber,
                            CheckpointItemName: i.checkpointItemName,
                            ActionCount: CountRows(
                                Filter(
                                    GC_checkpointItem_ActionItem,
                                    checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                )
                            ),
                            SavedActionCount: CountRows(
                                Filter(
                                    GC_checkpointItem_ActionItem,
                                    checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIAstatusUpdate=0
                                )
                            ),
                            UnsubmitedActionCount: CountRows(
                                Filter(
                                    GC_checkpointItem_ActionItem,
                                    checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIAstatusUpdate=1
                                )
                            ),
                            SubmitedActionCount:  CountRows(
                                Filter(
                                    GC_checkpointItem_ActionItem,
                                    checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIAstatusUpdate=2
                                )
                            ),
                            ImageCount:  CountRows(
                                Filter(
                                    GC_checkpointItem_Images,
                                    checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                )
                            ),
                            SavedImageCount:  CountRows(
                                Filter(
                                    GC_checkpointItem_Images,
                                    checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIIstatusUpdate=0
                                )
                            ),
                            UnsubmitedImageCount: CountRows(
                                Filter(
                                    GC_checkpointItem_Images,
                                    checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIIstatusUpdate=1
                                )
                            ),
                            SubmitedImageCount: CountRows(
                                Filter(
                                    GC_checkpointItem_Images,
                                    checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIIstatusUpdate=2
                                )
                            )
                        }
                    );
                    */
            PressedColor: =Self.Color
            PressedFill: =Self.Fill
            Text: ="Submit"
            Visible: =VarReportIssue
            X: =(Parent.Width-Self.Width)/2
            Y: =Icon2.Y+20
            ZIndex: =20

