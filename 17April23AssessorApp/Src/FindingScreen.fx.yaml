FindingScreen As screen:
    OnVisible: |-
        =If(
            CountRows(
                Filter(
                    GC_checkpointItem_Images,
                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId &&
         checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA && CIIstatusUpdate =2
                )
            ) > 0,
            Set(
                VarImageIsDownloaded,
                false
            );
            ,
            Set(
                VarImageIsDownloaded,
                true
            )
        );
        Set(
             VarDownloadImagesRestrict,
            false
        );
        
        Set(
            varloader,
            false
        );
        Set(
            VarPopUpExitApp,
            false
        );
        If(
            VarPrevNav = true,
            Set(
                C,
                true
            );
            Set(
                P,
                false
            );
            ,
            Set(
                C,
                false
            );
            Set(
                P,
                true
            )
        );
        //for safety check
        If(
            DateDiff(
                UserLastNavigatedTime,
                Now(),
                TimeUnit.Seconds
            ) > SafetyCheckTime,
            Set(
                safetyPopup,
                true
            );
            ,
            Set(
                UserLastNavigatedTime,
                Now()
            );
            
        );
        //Set(popup1,false);
        //Set( varRequired, false);
        Set(
            VarBlankrow1,
            false
        );
        Set(
            VarBlankrow2,
            false
        );
        //Set(varActionbutton, false);
        Set(
            varImage,
            false
        );
        //Set(UP,false);
        Set(
            popupsuccess1,
            false
        );
        Set(
            VarImagesExceedPopup,
            false
        );
        If(
            App.Width > App.Height,
            App.ActiveScreen.Orientation = "Landscape",
            App.ActiveScreen.Orientation = "Landscape"
        )

    ctnMainFS As groupContainer.verticalAutoLayoutContainer:
        Height: =Parent.Height
        LayoutAlignItems: =LayoutAlignItems.End
        LayoutDirection: =LayoutDirection.Vertical
        LayoutMode: =LayoutMode.Auto
        Width: =Parent.Width
        ZIndex: =1

        ctnHeaderFS As groupContainer.manualLayoutContainer:
            AlignInContainer: =AlignInContainer.SetByContainer
            Fill: =Header.HeaderFill
            FillPortions: =0
            Height: =81
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            PaddingRight: =10
            Width: =Parent.Width
            ZIndex: =2

            imgLogoPFS_3 As image:
                DisplayMode: =DisplayMode.View
                Fill: =RGBA(255, 255, 255, 1)
                Height: =Parent.Height
                Image: ='schindler-logo'
                PaddingBottom: =5
                PaddingLeft: =2
                PaddingRight: =1
                PaddingTop: =5
                Width: =ctnHeaderFS.Width/12
                ZIndex: =1

            lblAssessmentPFS_3 As label:
                Align: =Align.Center
                FontWeight: =FontWeight.Bold
                Height: =Parent.Height
                Size: =Header.HeaderFontSize
                Text: =lblProjectName.Text
                Width: |-
                    =//ctnHeaderFS.Width/1.75
                    If(Parent.Width>821,Parent.Width/1.8,Parent.Width/2.2)
                X: =113
                ZIndex: =2

            imgUserHeaderPFS_3 As image:
                Height: =43
                Image: =userImg
                ImagePosition: =ImagePosition.Fill
                RadiusBottomLeft: =ctnHeaderFS.Height/0.10
                RadiusBottomRight: =ctnHeaderFS.Height/0.10
                RadiusTopLeft: =ctnHeaderFS.Height/0.10
                RadiusTopRight: =ctnHeaderFS.Height/0.10
                Width: =45
                X: =Image2_39.Width+Image2_39.X+15
                Y: =(ctnHeaderFS.Height-Self.Height)/2
                ZIndex: =4

            lblUsernameHeaderPFS_3 As label:
                FontWeight: =FontWeight.Bold
                Height: =Parent.Height
                PaddingLeft: =20
                Size: =Header.HeaderUserFontSize-2
                Text: =username
                Width: =ctnHeaderFS.Width/5.8
                X: =imgUserHeaderPFS_3.Width+imgUserHeaderPFS_3.X
                ZIndex: =5

            Rectangle1_8 As rectangle:
                BorderColor: =RGBA(230, 230, 230, 1)
                BorderThickness: =1
                Fill: =RGBA(230, 230, 230, 1)
                Height: =1
                Width: =Parent.Width
                Y: =80
                ZIndex: =10

            Image2_39 As image:
                Height: =40
                Image: =If(Connection.Connected,'internet green icon-1x','internet-1x')
                Width: =30
                X: =lblAssessmentPFS_3.X+lblAssessmentPFS_3.Width+20
                Y: =20
                ZIndex: =11

        ctnMiddlePFS_3 As groupContainer.horizontalAutoLayoutContainer:
            AlignInContainer: =AlignInContainer.SetByContainer
            Height: =Parent.Height
            LayoutDirection: =LayoutDirection.Vertical
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            LayoutOverflowY: =LayoutOverflow.Scroll
            PaddingLeft: =40
            PaddingRight: =20
            Width: =Parent.Width
            Y: =ctnHeaderFS.Y+ctnHeaderFS.Height
            ZIndex: =3

            "'ctnBack&StatusPFS_3' As groupContainer.verticalAutoLayoutContainer":
                FillPortions: =0
                Height: =80
                LayoutMinHeight: =60
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingBottom: =5
                Width: =Parent.Width
                Y: =ctnHeaderFS.Y+ctnHeaderFS.Height
                ZIndex: =7

                ctnBackPFS_3 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.SetByContainer
                    FillPortions: =0
                    Height: =80
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutGap: =10
                    LayoutJustifyContent: =LayoutJustifyContent.Center
                    LayoutMinHeight: =100
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    PaddingLeft: =20
                    Width: =Parent.Width
                    Y: =ctnHeaderFS.Y+ctnHeaderFS.Height
                    ZIndex: =1

                    btnBackPFS_3 As button:
                        BorderColor: =AllScreensCSS.RActiveColor
                        Color: =RGBA(0, 0, 0, 1)
                        DisabledColor: =RGBA(0, 0, 0, 1)
                        DisabledFill: =RGBA(0, 0, 0, 0)
                        Fill: =RGBA(0, 0, 0, 0)
                        Font: =AllScreensCSS.ButtonFont
                        Height: =ctnBackPFS_3.Height/1.6
                        HoverColor: =RGBA(0, 0, 0, 1)
                        HoverFill: =
                        OnSelect: |
                            =//for Logs
                            UpdateIf(
                                GcTraceLog,
                                VarDebug = true,
                                {
                                    Path: First(GcTraceLog).Path & "/FindingBack=" & Text(
                                        Now(),
                                        "mm-dd-yy hh:mm:ss am/pm"
                                    )
                                }
                            );
                            /*SaveData(
                                GcTraceLog,
                                "localGcTraceLog"
                            );*/
                            //RemoveIf(G
                            Reset(txtAnnotationFS);
                            RemoveIf(
                                GC_checkpointItem_ActionItem,
                                assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA && ActionItem_Name = ""
                            );
                            RemoveIf(
                                GC_checkpointItem_Images,
                                assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA 
                             //&& (Image14_2.Image) = Blank()
                            && IsBlank(Image) && CIIstatusUpdate <> 2
                            );
                            If(
                                glryItmesAS.Selected.checkpointItemImage &&
                                    //(UploadedImage1_2.Image=Blank()
                             CountRows(
                                    Filter(
                                        GC_checkpointItem_Images,
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA
                                    )
                                ) = 0,
                                glryItmesAS.Selected.cboxItemsAS.Value = false,
                                glryItmesAS.Selected.cboxItemsAS.Value = true;
                                
                            );
                            UpdateIf(
                                GC_checkpointItem_Images,
                               // assignmentId.Id = varAssignmentId && 
                                bankUnitId.Id = varBankUnitId &&
                                //checkpoint_id.checkpointAssessment_id = GuidId && 
                            //checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA &&
                             CIIstatusUpdate = 2,
                                {Image: Blank()}
                            );
                            Navigate(AssessmentScreen);
                        PaddingBottom: =10
                        PaddingLeft: =0
                        PaddingRight: =10
                        PaddingTop: =10
                        PressedBorderColor: =Self.BorderColor
                        PressedColor: =Self.Color
                        PressedFill: =
                        RadiusBottomLeft: =5
                        RadiusBottomRight: =5
                        RadiusTopLeft: =5
                        RadiusTopRight: =5
                        Size: =AllScreensCSS.RLabelFontSize-2
                        Text: ="Back"
                        Width: =200 //ctnBackPFS_3.Width/6
                        ZIndex: =1

                    TimerglryProject_1 As timer:
                        AutoStart: =true
                        Duration: =100
                        OnTimerEnd: =Set(Q,true)
                        Visible: =false
                        ZIndex: =2

            ctnCheckpointPFS_3 As groupContainer.verticalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                FillPortions: =0
                Height: =150
                LayoutAlignItems: =LayoutAlignItems.Center
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMinHeight: =40
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                Width: =Parent.Width - 40 //ctnMiddlePFS_3.Width
                ZIndex: =8

                ctnAssessorAS_5 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    Width: =Parent.Width
                    X: =40
                    ZIndex: =1

                    lblAssesorNameAS_5 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnAssessorAS_5.Height
                        PaddingLeft: =20
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Assessor name "
                        Width: =330
                        ZIndex: =1

                    lblAssessorAS_5 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnAssessorAS_5.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: |-
                            =
                            LookUp(gcProjectAssignment, Id= varAssignmentId && bankId.goNumber=lblBankName.Text,assessorName)
                        Width: =350
                        X: =lblAssesorNameAS_5.X+lblAssesorNameAS_5.Width
                        ZIndex: =2

                ctnBankAS_5 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    Width: =Parent.Width
                    ZIndex: =2

                    lblBankNumberAS_8 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnBankAS_5.Height
                        PaddingLeft: =20
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="G.O./Commission number"
                        Width: =330
                        ZIndex: =3

                    lblBankAS_8 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnBankAS_5.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =glryProject.Selected.bankId.goNumber
                        Width: =ctnMiddleAS.Width/6
                        X: =lblBankNumberAS_8.X+lblBankNumberAS_8.Width
                        ZIndex: =4

                ctnPreviousAssementAS_3 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    Width: =Parent.Width 
                    ZIndex: =3

                    lblPreAssessmentAS_3 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnPreviousAssementAS_3.Height
                        PaddingLeft: =20
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Unit"
                        Width: =330
                        ZIndex: =1

                    lblPAssessmentAS_3 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnPreviousAssementAS_3.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =glryUnitBS.Selected.bankUnitId.unitNumber
                        Width: =ctnMiddleAS.Width/8
                        X: =lblPreAssessmentAS_3.X+lblPreAssessmentAS_3.Width
                        ZIndex: =2

                ctnAssessmntTypeAS_5 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    Width: =Parent.Width 
                    ZIndex: =4

                    lblAssessmentTypeAS_5 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnAssessmntTypeAS_5.Height
                        PaddingLeft: =20
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Assessment type "
                        Width: =330
                        ZIndex: =1

                    lblAtypeAS_5 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnAssessmntTypeAS_5.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =LookUp(gcProjectAssignment, Id= varAssignmentId && bankId.goNumber=lblBankName.Text,assessmentType)
                        Width: |-
                            =//ctnMiddleAS.Width/3
                            350
                        X: =lblAssessmentTypeAS_5.X+lblAssessmentTypeAS_5.Width
                        ZIndex: =2

                ctnAssessmentDateAS_5 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    Width: =Parent.Width
                    ZIndex: =5

                    lblAssessmentDateAS_5 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnAssessmentDateAS_5.Height
                        PaddingLeft: =20
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Assessment date "
                        Width: |-
                            =//ctnMiddleAS.Width/4.5
                            330
                        ZIndex: =1

                    lblADateAS_5 As label:
                        Font: =AllScreensCSS.RFont
                        Height: =ctnAssessmentDateAS_5.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =lblADate.Text
                        Width: =ctnMiddleAS.Width/4
                        X: =lblAssessmentDateAS_5.X+lblAssessmentDateAS_5.Width
                        ZIndex: =2

            ctnSectionAS_4 As groupContainer.verticalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                FillPortions: =0
                Height: =30
                LayoutMinHeight: =40
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                LayoutWrap: =true
                Width: =Parent.Width - 40
                ZIndex: =9

                lblSectionname_4 As label:
                    Color: =RGBA(209, 19, 19, 1)
                    FillPortions: =1
                    Font: =AllScreensCSS.RFont
                    FontWeight: =FontWeight.Bold
                    Height: =ctnSectionAS_4.Height
                    PaddingLeft: =20
                    Size: =AllScreensCSS.RLabelFontSize
                    Text: =glrySectionSS.Selected.sectionname
                    Width: =ctnSectionAS_4.Width/8
                    X: =60
                    ZIndex: =2

            ctnCheckpointIAS_4 As groupContainer.verticalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.Start
                FillPortions: =0
                Height: =lblCheckpointAS_5.Height
                LayoutAlignItems: =LayoutAlignItems.Center
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMinHeight: =40
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingLeft: =20
                PaddingRight: =40
                Width: =Parent.Width -40
                ZIndex: =10

                lblCheckpointAS_5 As label:
                    AlignInContainer: =AlignInContainer.Start
                    AutoHeight: =true
                    Font: =AllScreensCSS.RFont
                    Height: =35
                    PaddingLeft: =0
                    Size: =AllScreensCSS.RLabelFontSize
                    Text: |-
                        =
                        LookUp(GC_templateCheckpoints,checkpointId=ChId,checkpointName)
                    Width: =Parent.Width
                    ZIndex: =1

            ctnCheckpointItemAS_3 As groupContainer.verticalAutoLayoutContainer:
                FillPortions: =0
                Height: =lblCheckpointAS_6.Height
                LayoutAlignItems: =LayoutAlignItems.Center
                LayoutMinHeight: =30
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingLeft: =20
                PaddingRight: =40
                Width: =ctnMiddleAS.Width
                ZIndex: =11

                lblCheckpointAS_6 As label:
                    AutoHeight: =true
                    FillPortions: =1
                    Font: =AllScreensCSS.RFont
                    PaddingLeft: =0
                    Size: =AllScreensCSS.RLabelFontSize
                    Text: =LookUp(GC_templateCheckpointsItem,checkpointItemId=varCheckpointitemID,checkpointItemName)
                    VerticalAlign: =VerticalAlign.Top
                    Width: =ctnCheckpointItemAS_3.Width/25
                    ZIndex: =1

            Container11_2 As groupContainer.horizontalAutoLayoutContainer:
                FillPortions: =0
                Height: =60
                LayoutGap: =5
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingTop: =20
                Width: =Parent.Width/1.3
                ZIndex: =12

                Container12_4 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    Fill: =If(C =false ,Color.WhiteSmoke,RGBA(204, 204, 204, 1))
                    FillPortions: =0
                    Height: =Parent.Height
                    LayoutAlignItems: =LayoutAlignItems.Center
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutMinHeight: =100
                    LayoutMinWidth: =600
                    LayoutMode: =LayoutMode.Auto
                    PaddingLeft: =//Self.Width/4
                    Width: =Parent.Width/2
                    ZIndex: =1

                    Button3_4 As button:
                        Align: =Align.Left
                        BorderThickness: =0
                        Color: =RGBA(0, 0, 0, 1)
                        Fill: =RGBA(0, 0, 0, 0)
                        Font: =AllScreensCSS.RFont
                        FontWeight: =FontWeight.Bold
                        Height: =35
                        HoverColor: =RGBA(0, 0, 0, 1)
                        HoverFill: =ColorFade(Self.Fill, -20%)
                        OnSelect: |
                            =/*//for reset ideal timer
                            Reset(tmr_logout);
                            Set(UserLastNavigated, Now());*/
                            
                            //for safety check
                            If(
                                DateDiff(
                                    UserLastNavigatedTime,
                                    Now(),
                                    TimeUnit.Seconds
                                ) > SafetyCheckTime,
                                Set(
                                    safetyPopup,
                                    true
                                );
                                ,
                                Set(
                                    UserLastNavigatedTime,
                                    Now()
                                );
                                
                            );
                            
                            Set(C,true);Set(P,false);
                        PressedColor: =Self.Color
                        PressedFill: =Self.Fill
                        RadiusBottomLeft: =1
                        RadiusBottomRight: =1
                        RadiusTopLeft: =1
                        RadiusTopRight: =1
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Findings"
                        Visible: |
                            =true
                        Width: =150//Parent.Width
                        X: =0//(Parent.Width -Self.Width)/2
                        ZIndex: =2

                Container12_5 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    Fill: =If(C =true ,Color.WhiteSmoke,RGBA(204, 204, 204, 1))
                    FillPortions: =0
                    Height: =Parent.Height
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutMinHeight: =100
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    PaddingLeft: =//Self.Width/4
                    Width: =Parent.Width/2
                    ZIndex: =2

                    Button3_5 As button:
                        Align: =Align.Left
                        AlignInContainer: =AlignInContainer.Center
                        Color: =RGBA(0, 0, 0, 1)
                        Fill: =RGBA(0, 0, 0, 0)
                        Font: =AllScreensCSS.RFont
                        FontWeight: =FontWeight.Bold
                        Height: =35
                        HoverColor: =Self.Color
                        HoverFill: =ColorFade(Self.Fill, -20%)
                        OnSelect: |-
                            =
                            Set(P,true);Set(C,false);
                        PressedColor: =Self.Color
                        PressedFill: =Self.Fill
                        RadiusBottomLeft: =1
                        RadiusBottomRight: =1
                        RadiusTopLeft: =1
                        RadiusTopRight: =1
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Previous findings"
                        Visible: |+
                            =//If(CountRows(Filter(GC_checkpointItemAssessment,checkpointItemId.checkpointItemId=varCheckpointitemID&&bankUnitId.Id=varBankUnitId&&assignmentId.isCompleted="Completed"&&assessmentStatus="Check"&&!IsBlank(checkpointItem_annotation))), true , false )
                            If(CountRows(Filter(
                                    GC_checkpointItemAssessment,
                                    checkpointItemId.checkpointItemId = varCheckpointitemID && bankUnitId.Id = varBankUnitId && assignmentId.isCompleted = "Completed" &&  !IsBlank(checkpointItem_annotation)))>0,true,false)
                                  
                            
                        Width: =200//Parent.Width/1.02
                        ZIndex: =2

            Container7_3 As groupContainer.manualLayoutContainer:
                ContentLanguage: =" "
                FillPortions: =0
                Height: |-
                    =If(
                        C,
                        Container6_4.Height,
                        //ctnPrevious.Height
                        Parent.Height
                    )
                    //glryPreviousFS.Height
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                PaddingLeft: =5
                PaddingRight: =5
                Width: =Parent.Width
                Y: =Container11_2.Y +Container11_2.Height
                ZIndex: =13

                ctnPrevious As groupContainer.verticalAutoLayoutContainer:
                    Fill: |-
                        =//RGBA(0, 0, 0, 0)
                        Color.WhiteSmoke
                    Height: |-
                        =Parent.Height
                        //PreviousFS.Height+100
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutMode: =LayoutMode.Auto
                    Visible: |+
                        =//If(CountRows(glryPreviousFS.AllItems)>0,true,false)
                        P
                        
                    Width: =Parent.Width
                    ZIndex: =1

                    "glryPreviousFS As gallery.'BrowseLayout_Flexible_SocialFeed_ver4.0'":
                        AlignInContainer: =AlignInContainer.SetByContainer
                        BorderColor: =RGBA(128, 128, 128, 1)
                        Fill: |-
                            =//RGBA(239,239,239,1)
                            Color.WhiteSmoke
                        FillPortions: =0
                        Height: |-
                            =//+Label22_5.Height+Label21_4.Height+Icon3_13.Height+Icon3_15.Height+ctnDatePFS_5.Height
                            /*CountRows(Gallery5_6.AllItems)*(Gallery5_6.TemplateHeight)+CountRows(Gallery14_2.AllItems)*(Gallery14_2.TemplateHeight)+CountRows(glryPreviousFS.AllItems)*(glryPreviousFS.TemplateHeight)*/
                            Parent.Height
                        Items: |-
                            =
                            //assume that the checkpoint item ID in mastertable templatecheckpointIntems is stored in the variable "varCheckpointitemID" when user clicks finding button
                            //get all Annotation from gcCheckpointItemAssessment for this unit ,for this checkpoint item ID "varCheckpointitemID" and for completed assignment . 
                            //the previous action item should be shown after grouping with assessment type  (is it vreally required ?)  and should be shown in the order of assessment date(completed date)
                            Sort(
                                Filter(
                                    GC_checkpointItemAssessment,
                                    checkpointItemId.checkpointItemId = varCheckpointitemID && bankUnitId.Id = varBankUnitId && assignmentId.isCompleted = "Completed" && !IsBlank(checkpointItem_annotation)
                                ),
                                assignmentId.completionDate
                            )
                        Layout: =Layout.Vertical
                        LayoutMinHeight: =287
                        LayoutMinWidth: =320
                        ShowScrollbar: =false
                        TemplatePadding: =4
                        TemplateSize: |-
                            =//Gallery5_6.TemplateHeight+Gallery14_2.TemplateHeight
                            CountRows(Gallery5_6.AllItems)*(Gallery5_6.TemplateHeight)+CountRows(Gallery14_2.AllItems)*(Gallery14_2.TemplateHeight)+100
                        Width: =Parent.Width
                        X: =100
                        ZIndex: =1

                        "Gallery14_2 As gallery.'BrowseLayout_Vertical_TwoTextOneImageTwoColumnVariant_ver4.0'":
                            Height: =CountRows(Gallery14_2.AllItems)*(Gallery14_2.TemplateHeight)
                            Items: |-
                                =
                                //get all images for this stored templateCheckpointItem ID "varCheckpointitemID" from GC_checkpointItem_Images for selected bankUnit ID and whose assignment is completed .
                                //And for parents findings . since there is no open and close status for images therefore all images for the selected findings will be shown.(to be discussed with client)
                                Filter(
                                    GC_checkpointItem_Images,
                                    bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = ThisItem.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                )
                            Layout: =Layout.Vertical
                            ShowScrollbar: =false
                            TemplatePadding: =0
                            TemplateSize: =350
                            Width: =Parent.Width/1.08
                            WrapCount: =2
                            X: =20
                            Y: |-
                                =//If(CountRows(Gallery5_6.AllItems)>0,Gallery5_6.Height+Gallery5_6.Y,Label22_5.Height+Label22_5.Y)
                                Container4.Y+ Container4.Height
                            ZIndex: =1

                            Image16_2 As image:
                                BorderColor: =RGBA(0, 0, 0, 1)
                                BorderThickness: =2
                                Height: =Min(Self.Width, Parent.TemplateHeight - 115)
                                Image: |-
                                    =If(
                                        IsBlank(ThisItem.Image) ,
                                        If(ThisItem.CIIstatusUpdate = 2,
                                        'submitted-cloud'),
                                        ThisItem.Image
                                    )
                                OnSelect: =//Set(popup,true)
                                Width: =Parent.TemplateWidth/2
                                X: =0.5
                                Y: =16
                                ZIndex: =1

                            Title17_2 As label:
                                Font: =AllScreensCSS.RFont
                                Height: =Self.Size * 1.8
                                OnSelect: =Select(Parent)
                                PaddingBottom: =0
                                PaddingLeft: =0
                                PaddingRight: =0
                                PaddingTop: =0
                                Size: =AllScreensCSS.RLabelFontSize-4
                                Text: =ThisItem.image_annotation
                                VerticalAlign: =VerticalAlign.Top
                                Width: =Parent.TemplateWidth - 64
                                X: =1
                                Y: =Image16_2.Y + Image16_2.Height + 16
                                ZIndex: =2

                        ctnAssessmentType_5 As groupContainer.verticalAutoLayoutContainer:
                            Height: |-
                                =//Parent.Height/4
                                100
                            LayoutMode: =LayoutMode.Auto
                            Visible: |-
                                =/*If(CountRows(Filter(
                                    GC_checkpointItemAssessment,
                                    checkpointItemId.checkpointItemId = varCheckpointitemID && 
                                    bankUnitId.Id = varBankUnitId 
                                 && assignmentId.isCompleted="Completed"
                                    && assessmentStatus = "Check" 
                                ))>0,true,false)*/
                                true
                            Width: =Parent.Width/2.54
                            X: =1
                            ZIndex: =3

                            ctnAssessmentBy_11 As groupContainer.verticalAutoLayoutContainer:
                                AlignInContainer: =AlignInContainer.Start
                                FillPortions: =0
                                Height: =Parent.Height
                                LayoutDirection: =LayoutDirection.Vertical
                                LayoutMinHeight: =100
                                LayoutMinWidth: =250
                                LayoutMode: =LayoutMode.Auto
                                Width: =Parent.Width/2.4
                                X: =lblAssessmentByPFS_8.Width+lblAssessmentByPFS_8.X
                                ZIndex: =5

                                lblAssessmentByPFS_8 As label:
                                    Font: =AllScreensCSS.RFont
                                    FontWeight: =FontWeight.Bold
                                    PaddingBottom: =8
                                    PaddingLeft: =8
                                    PaddingRight: =8
                                    PaddingTop: =8
                                    Size: =AllScreensCSS.RLabelFontSize-2
                                    Text: ="Unit"
                                    Width: =Parent.Width
                                    ZIndex: =1

                                lblAssessorNamePFS_8 As label:
                                    AutoHeight: =true
                                    Font: =AllScreensCSS.RFont
                                    FontWeight: =FontWeight.Semibold
                                    PaddingBottom: =0
                                    PaddingLeft: =8
                                    PaddingRight: =8
                                    PaddingTop: =0
                                    Size: =AllScreensCSS.RLabelFontSize-2
                                    Text: |-
                                        =
                                        ThisItem.bankUnitId.unitNumber
                                    Width: =Parent.Width
                                    ZIndex: =2

                            ctnAssessmentBy_12 As groupContainer.verticalAutoLayoutContainer:
                                AlignInContainer: =AlignInContainer.Start
                                FillPortions: =0
                                Height: =Parent.Height
                                LayoutDirection: =LayoutDirection.Vertical
                                LayoutMinHeight: =100
                                LayoutMinWidth: =250
                                LayoutMode: =LayoutMode.Auto
                                Width: =Parent.Width/1.5
                                X: =//lblAssessmentByPFS_4.Width+lblAssessmentByPFS_4.X
                                ZIndex: =6

                                lblAssessmntTypePFS_6 As label:
                                    Font: =AllScreensCSS.RFont
                                    FontWeight: =FontWeight.Bold
                                    PaddingBottom: =8
                                    PaddingLeft: =8
                                    PaddingRight: =8
                                    PaddingTop: =8
                                    Size: =AllScreensCSS.RLabelFontSize-2
                                    Text: ="Type"
                                    Width: =Parent.Width
                                    ZIndex: =1

                                lblAssesmentTypeLPFS_6 As label:
                                    Font: =AllScreensCSS.RFont
                                    FontWeight: =FontWeight.Semibold
                                    PaddingBottom: =0
                                    PaddingLeft: =8
                                    PaddingRight: =8
                                    PaddingTop: =0
                                    Size: =AllScreensCSS.RLabelFontSize-2
                                    Text: |-
                                        =
                                        ThisItem.assignmentId.assessmentType
                                    Width: =Parent.Width
                                    ZIndex: =2

                        ctnAssessmentBy_13 As groupContainer.verticalAutoLayoutContainer:
                            Height: |-
                                =//Parent.Height/4
                                100
                            LayoutDirection: =LayoutDirection.Vertical
                            LayoutMode: =LayoutMode.Auto
                            Visible: |-
                                =/*If(CountRows(Filter(
                                    GC_checkpointItemAssessment,
                                    checkpointItemId.checkpointItemId = varCheckpointitemID && 
                                    bankUnitId.Id = varBankUnitId 
                                 && assignmentId.isCompleted="Completed"
                                    && assessmentStatus = "Check" 
                                ))>0,true,false)*/
                                true
                            Width: =Parent.Width/5
                            X: =ctnAssessmentType_5.Width+ctnAssessmentType_5.X
                            ZIndex: =4

                            lblAssessmentByPFS_9 As label:
                                Font: =AllScreensCSS.RFont
                                FontWeight: =FontWeight.Bold
                                PaddingBottom: =8
                                PaddingLeft: =8
                                PaddingRight: =8
                                PaddingTop: =8
                                Size: =AllScreensCSS.RLabelFontSize-2
                                Text: ="Assessor"
                                Width: =Parent.Width
                                ZIndex: =1

                            lblAssessorNamePFS_9 As label:
                                AutoHeight: =true
                                Font: =AllScreensCSS.RFont
                                FontWeight: =FontWeight.Semibold
                                PaddingBottom: =0
                                PaddingLeft: =8
                                PaddingRight: =8
                                PaddingTop: =0
                                Size: =AllScreensCSS.RLabelFontSize-2
                                Text: |-
                                    =
                                    ThisItem.assignmentId.assessorName
                                Width: =Parent.Width
                                ZIndex: =2

                        ctnDatePFS_5 As groupContainer.verticalAutoLayoutContainer:
                            Height: |-
                                =//Parent.Height/4
                                100
                            LayoutDirection: =LayoutDirection.Vertical
                            LayoutMode: =LayoutMode.Auto
                            Visible: |-
                                =/*If(CountRows(Filter(
                                    GC_checkpointItemAssessment,
                                    checkpointItemId.checkpointItemId = varCheckpointitemID && 
                                    bankUnitId.Id = varBankUnitId 
                                 && assignmentId.isCompleted="Completed"
                                    && assessmentStatus = "Check" 
                                ))>0,true,false)*/
                                true
                            Width: =Parent.Width/3
                            X: =ctnAssessmentBy_13.Width+ctnAssessmentBy_13.X
                            ZIndex: =5

                            lblDatePFS_5 As label:
                                Font: =AllScreensCSS.RFont
                                FontWeight: =FontWeight.Bold
                                PaddingBottom: =8
                                PaddingLeft: =8
                                PaddingRight: =8
                                PaddingTop: =8
                                Size: =AllScreensCSS.RLabelFontSize-2
                                Text: ="Assessment date"
                                Width: =Parent.Width
                                ZIndex: =1

                            lblDateLPFS_5 As label:
                                AutoHeight: =true
                                Font: =AllScreensCSS.RFont
                                FontWeight: =FontWeight.Semibold
                                PaddingBottom: =0
                                PaddingLeft: =8
                                PaddingRight: =8
                                PaddingTop: =0
                                Size: =AllScreensCSS.RLabelFontSize-2
                                Text: |-
                                    =Text(
                                        ThisItem.assignmentId.completionDate,
                                        "mm-dd-yyyy"
                                    )
                                Width: =Parent.Width
                                ZIndex: =2

                        Label21_4 As label:
                            Font: =AllScreensCSS.RFont
                            FontWeight: =FontWeight.Bold
                            OnSelect: =Select(Parent)
                            Size: =AllScreensCSS.RLabelFontSize
                            Text: ="Annotation"
                            Visible: |-
                                =/*If(CountRows(Filter(
                                    GC_checkpointItemAssessment,
                                    checkpointItemId.checkpointItemId = varCheckpointitemID && 
                                    bankUnitId.Id = varBankUnitId 
                                 && assignmentId.isCompleted="Completed"
                                    && assessmentStatus = "Check" 
                                ))>0,true,false)*/
                                true
                            X: =20
                            Y: =ctnDatePFS_5.Height+ctnDatePFS_5.Y
                            ZIndex: =6

                        Label22_5 As label:
                            AutoHeight: =true
                            Font: =AllScreensCSS.RFont
                            Height: =30
                            OnSelect: =Select(Parent)
                            Size: =AllScreensCSS.RLabelFontSize
                            Text: =ThisItem.checkpointItem_annotation
                            Visible: |-
                                =/*If(CountRows(Filter(
                                    GC_checkpointItemAssessment,
                                    checkpointItemId.checkpointItemId = varCheckpointitemID && 
                                    bankUnitId.Id = varBankUnitId 
                                 && assignmentId.isCompleted="Completed"
                                    && assessmentStatus = "Check" 
                                ))>0,true,false)*/
                                true
                            Width: =Parent.Width/1.18
                            X: =20
                            Y: =Label21_4.Height+Label21_4.Y
                            ZIndex: =7

                        Icon3_13 As icon.HorizontalLine:
                            Color: =RGBA(204, 204, 204, 1)
                            Fill: =RGBA(204, 204, 204, 1)
                            Height: =3
                            Icon: =Icon.HorizontalLine
                            OnSelect: =Select(Parent)
                            Visible: |-
                                =/*If(CountRows(Filter(
                                    GC_checkpointItemAssessment,
                                    checkpointItemId.checkpointItemId = varCheckpointitemID && 
                                    bankUnitId.Id = varBankUnitId 
                                 && assignmentId.isCompleted="Completed"
                                    && assessmentStatus = "Check" 
                                ))>0,true,false)*/
                                true
                            Width: =Label22_5.Width
                            X: =1
                            Y: =Label22_5.Height+Label22_5.Y
                            ZIndex: =8

                        "Gallery5_6 As gallery.'BrowseLayout_Flexible_SocialFeed_ver4.0'":
                            Height: =CountRows(Gallery5_6.AllItems)*(Gallery5_6.TemplateHeight)+30
                            Items: |-
                                =
                                //get all "Open" status action items for this stored templateCheckpointItem ID "varCheckpointitemID" from GC_checkpointItem_ActionItem for selected bankUnit ID and whose assignment is completed .
                                //And for parents findings 
                                Filter(
                                    GC_checkpointItem_ActionItem,
                                    bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = ThisItem.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                )
                            Layout: =Layout.Vertical
                            ShowScrollbar: =false
                            TemplatePadding: =0
                            TemplateSize: =200
                            Width: =1280
                            X: =20
                            Y: =Label22_5.Height+Label22_5.Y
                            ZIndex: =9

                            Title3_4 As label:
                                Font: =AllScreensCSS.RFont
                                FontWeight: =FontWeight.Bold
                                Height: =Self.Size * 1.8
                                OnSelect: =Select(Parent)
                                PaddingBottom: =0
                                PaddingLeft: =0
                                PaddingRight: =0
                                PaddingTop: =0
                                Size: =AllScreensCSS.RLabelFontSize
                                Text: ="Action"
                                VerticalAlign: =VerticalAlign.Top
                                Width: =Parent.TemplateWidth - 112
                                X: =1
                                Y: =(Self.Height / 2)
                                ZIndex: =2

                            Label14_4 As label:
                                AutoHeight: =true
                                Font: =AllScreensCSS.RFont
                                Height: =30
                                OnSelect: =Select(Parent)
                                Text: =ThisItem.ActionItem_Name
                                Width: =Parent.Width-40
                                X: =1
                                Y: =Title3_4.Height+Title3_4.Y
                                ZIndex: =3

                            Container4_4 As groupContainer.verticalAutoLayoutContainer:
                                Height: =100
                                LayoutDirection: =LayoutDirection.Vertical
                                LayoutMode: =LayoutMode.Auto
                                Width: =Parent.Width/1.08
                                Y: =Label14_4.Height+Label14_4.Y
                                ZIndex: =4

                                Container5_8 As groupContainer.horizontalAutoLayoutContainer:
                                    FillPortions: =0
                                    Height: =40
                                    LayoutMinHeight: =100
                                    LayoutMinWidth: =250
                                    LayoutMode: =LayoutMode.Auto
                                    Width: =Parent.Width
                                    X: =20
                                    ZIndex: =1

                                    Label16_8 As label:
                                        Font: =AllScreensCSS.RFont
                                        FontWeight: =FontWeight.Semibold
                                        Size: =AllScreensCSS.RLabelFontSize-2
                                        Text: ="Priority"
                                        Width: =120
                                        ZIndex: =1

                                    Label17_8 As label:
                                        Font: =AllScreensCSS.RFont
                                        FontWeight: =FontWeight.Semibold
                                        Size: =AllScreensCSS.RLabelFontSize-2
                                        Text: ="Owner"
                                        Width: =120
                                        ZIndex: =2

                                    Label18_8 As label:
                                        Font: =AllScreensCSS.RFont
                                        FontWeight: =FontWeight.Semibold
                                        Size: =AllScreensCSS.RLabelFontSize-2
                                        Text: ="Time estimate"
                                        Width: =200
                                        ZIndex: =3

                                    Label19_8 As label:
                                        Font: =AllScreensCSS.RFont
                                        FontWeight: =FontWeight.Semibold
                                        Size: =AllScreensCSS.RLabelFontSize-2
                                        Text: ="Material Estimate "
                                        Width: =250
                                        ZIndex: =4

                                Container5_9 As groupContainer.horizontalAutoLayoutContainer:
                                    FillPortions: =0
                                    Height: =50
                                    LayoutMinHeight: =100
                                    LayoutMinWidth: =250
                                    LayoutMode: =LayoutMode.Auto
                                    Width: =Parent.Width
                                    X: =20
                                    ZIndex: =2

                                    Label16_9 As label:
                                        Font: =AllScreensCSS.RFont
                                        Size: =AllScreensCSS.RLabelFontSize-4
                                        Text: |-
                                            =
                                            ThisItem.priority
                                        Width: =120
                                        ZIndex: =1

                                    Label17_9 As label:
                                        Font: =AllScreensCSS.RFont
                                        Size: =AllScreensCSS.RLabelFontSize-4
                                        Text: |-
                                            =
                                            ThisItem.OwnerId
                                        Width: =120
                                        ZIndex: =2

                                    Label18_9 As label:
                                        Font: =AllScreensCSS.RFont
                                        Size: =AllScreensCSS.RLabelFontSize-4
                                        Text: |-
                                            =
                                            ThisItem.TimeEstimate
                                        Width: =200
                                        ZIndex: =3

                                    Label19_9 As label:
                                        Font: =AllScreensCSS.RFont
                                        Size: =AllScreensCSS.RLabelFontSize-4
                                        Text: |-
                                            =
                                            ThisItem.MaterialEstimate
                                        Width: =250
                                        ZIndex: =4

                            Icon3_14 As icon.HorizontalLine:
                                Color: =RGBA(204, 204, 204, 1)
                                Fill: =RGBA(204, 204, 204, 1)
                                Height: =3
                                Icon: =Icon.HorizontalLine
                                OnSelect: =Select(Parent)
                                Width: =Label22_5.Width
                                X: =1
                                Y: =Container4_4.Y+Container4_4.Height
                                ZIndex: =5

                            Button2_7 As button:
                                DisplayMode: =If(ThisItem.Action_status="Close",DisplayMode.Disabled,DisplayMode.Edit)
                                Fill: =RGBA(54, 176, 75, 1)
                                Font: =AllScreensCSS.ButtonFont
                                Height: =30
                                HoverColor: =Self.Color
                                HoverFill: |-
                                    =//ColorFade(RGBA(56, 96, 178, 1), -20%)
                                    Self.Fill
                                OnSelect: |
                                    =Set(
                                        PopupCloseAction,
                                        true
                                    );
                                    Set(
                                        SelectedcheckpointItemActionItemsId,
                                        ThisItem.checkpointItemActionItemsId
                                    );
                                PressedFill: =Self.Fill
                                Text: |-
                                    =//If(Btn,true,"closed Action","close Action")
                                    If(ThisItem.Action_status="Open","Close","Close")
                                    //"Close Action"
                                X: =Parent.Width-5*(Self.Width)
                                Y: =(Self.Height / 2)
                                ZIndex: =6

                        Icon3_15 As icon.HorizontalLine:
                            Color: =RGBA(172, 62, 11, 1)
                            Fill: =RGBA(204, 204, 204, 1)
                            Height: =5
                            Icon: =Icon.HorizontalLine
                            OnSelect: =Select(Parent)
                            Visible: =false
                            Width: =Parent.Width/1.08
                            X: =1
                            Y: |
                                =//763
                                //glryPreviousFS.Y+glryPreviousFS.Height
                                glryPreviousFS.TemplateHeight
                            ZIndex: =12

                        Container4 As groupContainer.horizontalAutoLayoutContainer:
                            Height: =80
                            LayoutAlignItems: =LayoutAlignItems.Center
                            LayoutJustifyContent: =LayoutJustifyContent.SpaceBetween
                            LayoutMode: =LayoutMode.Auto
                            PaddingLeft: =20
                            Width: =Parent.Width-40
                            Y: =If(CountRows(Gallery5_6.AllItems)>0,Gallery5_6.Height+Gallery5_6.Y,Label22_5.Height+Label22_5.Y)
                            ZIndex: =13

                            Label3 As label:
                                FontWeight: =FontWeight.Bold
                                OnSelect: =
                                Size: =AllScreensCSS.RLabelFontSize
                                Text: ="Image" 
                                Visible: |-
                                    =If(
                                        CountRows(
                                            Filter(
                                                GC_checkpointItem_Images,
                                                 bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = ThisItem.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                            )
                                        ) > 0,
                                        true,
                                        false
                                    )
                                X: =20
                                Y: =20
                                ZIndex: =1

                            Button1_1 As button:
                                BorderColor: =Self.Fill
                                DisplayMode: |-
                                    =If(
                                        Connection.Connected,
                                        If(
                                            CountRows(
                                                Filter(
                                                    GC_checkpointItem_Images,
                                                    //assignmentId.Id = varAssignmentId &&
                                                     bankUnitId.Id = varBankUnitId && 
                                                      checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = ThisItem.'checkpointItemAssessment (quantum_checkpointitemassessment)' &&
                                                      CIIstatusUpdate = 2 && IsBlank(Image)
                                                )
                                            ) > 0,
                                            DisplayMode.Edit,
                                            DisplayMode.Disabled
                                        ),
                                        DisplayMode.Disabled
                                    )
                                Fill: =AllScreensCSS.RActiveColor
                                HoverFill: =Self.Fill
                                OnSelect: |
                                    =
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    If(
                                        CountRows(
                                            Filter(
                                                GC_checkpointItem_Images,
                                                CIIstatusUpdate = 0 || CIIstatusUpdate = 1 || CIIstatusUpdate = Blank()
                                            )
                                        ) >= First(gcCollectionCapCounts).SavedImageCount,
                                        Set(
                                            VarImagesExceedPopupText,
                                            "You have reached limit of " & First(gcCollectionCapCounts).SavedImageCount & " Unsubmitted images. Please submit before continuing the assessment."
                                        );
                                     // Notify("You have reached limit of 75 images.You can not add Images.",NotificationType.Error);
                                    Set(
                                            VarImagesExceedPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UP,
                                            true
                                        );
                                        
                                    //get specific item images form server
                                    ClearCollect(
                                            TempGetImages,
                                            Filter(
                                                checkpointItem_Images,
                                                bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = ThisItem.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                            )
                                        );
                                        
                                    //Update images to collection
                                    ForAll(
                                            TempGetImages As i,
                                            UpdateIf(
                                                GC_checkpointItem_Images,
                                                checkpointItemImagesId = i.checkpointItemImagesId && CIIstatusUpdate = 2,
                                                {Image: i.Image}
                                            )
                                        );
                                        Set(
                                            VarImageIsDownloaded,
                                            true
                                        );
                                        Clear(TempGetImages);
                                        
                                    );
                                PressedColor: =Self.Color
                                PressedFill: =Self.Fill
                                Size: =12
                                Text: ="Download Images"
                                Visible: |-
                                    =If(
                                        CountRows(
                                            Filter(
                                                GC_checkpointItem_Images,
                                                 bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = ThisItem.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                            )
                                        ) > 0,
                                        true,
                                        false
                                    )
                                Width: =200
                                X: =40
                                Y: =40
                                ZIndex: =2

                ctnCurrent_2 As groupContainer.verticalAutoLayoutContainer:
                    Height: =Container6_4.Height
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutMode: =LayoutMode.Auto
                    Visible: |-
                        =C
                        //true
                    Width: =Parent.Width
                    ZIndex: =2

                    Container6_4 As groupContainer.verticalAutoLayoutContainer:
                        AlignInContainer: =AlignInContainer.SetByContainer
                        Fill: |-
                            =//RGBA(239, 239, 239, 1)
                            Color.WhiteSmoke
                        FillPortions: =0
                        Height: |-
                            =//Parent.Height
                            lblAnnotationFS.Height + txtAnnotationFS.Height + ctnAddImageFS.Height + btnSaveFS.Height + ctnAddActionFS.Height + (CountRows(GlryActionItemFS.AllItems) * (GlryActionItemFS.TemplateHeight) / 1.1) + If(
                                CountRows(GlryImagesFS.AllItems) = 1,
                                380,
                                CountRows(GlryImagesFS.AllItems) * (GlryImagesFS.TemplateHeight) / 2
                            ) + 240
                            
                            
                            //380 240
                        LayoutAlignItems: =LayoutAlignItems.Stretch
                        LayoutDirection: =LayoutDirection.Vertical
                        LayoutGap: =20
                        LayoutMinHeight: =500
                        LayoutMinWidth: =250
                        LayoutMode: =LayoutMode.Auto
                        PaddingLeft: =20
                        PaddingRight: =5
                        PaddingTop: =10
                        Width: =Parent.Width
                        ZIndex: =7

                        lblAnnotationFS As label:
                            Font: =AllScreensCSS.RFont
                            FontWeight: =FontWeight.Bold
                            Size: =AllScreensCSS.RLabelFontSize
                            Text: ="Add annotation" 
                            Width: =Parent.Width
                            ZIndex: =2

                        txtAnnotationFS As text:
                            AlignInContainer: =AlignInContainer.Start
                            BorderColor: =RGBA(0, 0, 0, 1)
                            Clear: =true
                            Default: |-
                                =LookUp(
                                    GC_checkpointItemAssessment,
                                    assignmentId.Id=glryProject.Selected.Id &&
                                    bankUnitId.Id = varBankUnitId  &&
                                    checkpointItemId.checkpointItemId = glryItmesAS.Selected.checkpointItemId
                                    && 'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA,    
                                    checkpointItem_annotation
                                )
                            DisabledFill: =RGBA(0, 0, 0, 0)
                            Font: =AllScreensCSS.RFont
                            Height: =170
                            HintText: ="Add annotations"
                            HoverBorderColor: =RGBA(0, 0, 0, 1)
                            HoverFill: =RGBA(255, 255, 255, 1)
                            MaxLength: =500
                            Mode: =TextMode.MultiLine
                            OnChange: |
                                =//for Logs
                                UpdateIf(
                                    GcTraceLog,
                                    VarDebug = true,
                                    {
                                        Path: First(GcTraceLog).Path & "/Annotation=" & Text(
                                            Now(),
                                            "mm-dd-yy hh:mm:ss am/pm"
                                        )
                                    }
                                );
                                /*SaveData(
                                    GcTraceLog,
                                    "localGcTraceLog"
                                );*/
                                //for reset ideal timer
                                /*Reset(tmr_logout);
                                Set(
                                    UserLastNavigated,
                                    Now()
                                );*/
                                //for safety check
                                If(
                                    DateDiff(
                                        UserLastNavigatedTime,
                                        Now(),
                                        TimeUnit.Seconds
                                    ) > SafetyCheckTime,
                                    Set(
                                        safetyPopup,
                                        true
                                    );
                                    ,
                                    Set(
                                        UserLastNavigatedTime,
                                        Now()
                                    );
                                    
                                );
                                If(
                                    Len(txtAnnotationFS.Text) = 500,
                                    Notify(
                                        "Annotation should be less than 500 characters",
                                        NotificationType.Warning
                                    )
                                );
                                /*
                                If(CountRows(Filter(GC_checkpointItemAssessment,bankUnitId.Id=varBankUnitId && checkpointItemId.checkpointItemId=varCheckpointitemID))<1,
                                  Set(varCItemA,Text(GUID()));
                                    Collect(
                                               GC_checkpointItemAssessment,
                                            {
                                             'checkpointItemAssessment (quantum_checkpointitemassessment)': varCItemA,
                                             checkpointAssessment_Id:LookUp(GcCheckpointAssessment,checkpointId.checkpointId=ChId),   
                                                assignmentId: LookUp(
                                                    gcProjectAssignment,
                                                    Id = glryProject.Selected.Id
                                                ),
                                                bankUnitId: LookUp(
                                                  gcBankunit,
                                                    Id = glryBankGo_1.Selected.bankUnitId.Id
                                                ),
                                                product_id:LookUp(GC_product,product_Model=glryBankGo_1.Selected.productModel)
                                                ,
                                                section_Id: LookUp
                                                     (GcSectionAssessment,sectionId.sectionId= VarSectionId),
                                             checkpointItem_annotation: TextInput4_5.Text,
                                                checkpointItemId: LookUp(
                                                    GC_templateCheckpointsItem,
                                                checkpointItemId =glryItmesAS.Selected.checkpointItemId),
                                                checkpointItemName: glryItmesAS.Selected.cboxItemsAS.Text,
                                                assessmentStatus: "open"
                                            }
                                        ),
                                     UpdateIf(GC_checkpointItemAssessment,checkpointItemId.checkpointItemId=varCheckpointitemID &&                      bankUnitId.Id=varBankUnitId && 'checkpointItemAssessment (quantum_checkpointitemassessment)'=ThisRecord.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                     {
                                         checkpointItem_annotation:TextInput4_5.Text,
                                         checkpointAssessment_Id:LookUp(GcCheckpointAssessment,checkpointId.checkpointId=ChId),       
                                                assignmentId: LookUp(
                                                    gcProjectAssignment,
                                                    Id = glryProject.Selected.Id
                                                ),
                                                bankUnitId: LookUp(
                                                  gcBankunit,
                                                    Id = glryBankGo_1.Selected.bankUnitId.Id
                                                ),
                                                product_id:LookUp(GC_product,product_Model=glryBankGo_1.Selected.productModel)
                                                ,
                                                section_Id: LookUp
                                                     (GcSectionAssessment,sectionId.sectionId= VarSectionId),
                                                checkpointItemId: LookUp(
                                                    GC_templateCheckpointsItem,
                                                checkpointItemId =glryItmesAS.Selected.checkpointItemId),
                                                checkpointItemName: glryItmesAS.Selected.cboxItemsAS.Text
                                            }
                                        )
                                     );
                                */
                                /// Onchange update 
                                /*
                                UpdateIf(
                                    GC_checkpointItemAssessment,assignmentId.Id=varAssignmentId && bankUnitId.Id = varBankUnitId 
                                    && checkpointItemId.checkpointItemId = varCheckpointitemID && 
                                     'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA,
                                    {
                                        checkpointItem_annotation: TextInput4_5.Text
                                    }
                                );
                                */
                            RadiusBottomLeft: =2
                            RadiusBottomRight: =2
                            RadiusTopLeft: =2
                            RadiusTopRight: =2
                            Reset: =true
                            Size: =AllScreensCSS.RLabelFontSize
                            Width: =If(App.Width<1024,Parent.Width/1.1,Parent.Width/1.06)
                            Y: =lblAnnotationFS.Height+lblAnnotationFS.Y
                            ZIndex: =3

                        "GlryActionItemFS As gallery.'BrowseLayout_Flexible_SocialFeed_ver4.0'":
                            AlignInContainer: =AlignInContainer.SetByContainer
                            FillPortions: =0
                            Height: =CountRows(GlryActionItemFS.AllItems)*(GlryActionItemFS.TemplateHeight)/1.2
                            Items: |-
                                =Filter(GC_checkpointItem_ActionItem,bankUnitId.Id=varBankUnitId && assignmentId.Id=varAssignmentId &&
                                checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)'=varCItemA
                                || bankUnitId.Id=varBankUnitId && assignmentId.Id=varAssignmentId && checkpointItem_Id.checkpointItemId.checkpointItemId=varCheckpointitemID
                                )
                            Layout: =Layout.Vertical
                            LayoutMinHeight: =287
                            LayoutMinWidth: =320
                            ShowScrollbar: =false
                            TemplatePadding: =2
                            TemplateSize: =280
                            Visible: =Q
                            Width: =Parent.Width/1.05
                            Y: =ctnAddActionFS.Height
                            ZIndex: =4

                            TextInput5_10 As text:
                                BorderColor: =RGBA(0, 0, 0, 1)
                                Default: |-
                                    =LookUp(
                                        GC_checkpointItem_ActionItem,
                                        checkpointItemActionItemsId = ThisItem.checkpointItemActionItemsId,
                                        TimeEstimate
                                    )
                                FocusedBorderThickness: =1
                                Font: =AllScreensCSS.RFont
                                Format: =TextFormat.Number
                                HintText: ="Time Estimate in Hrs"
                                HoverBorderColor: =RGBA(0, 0, 0, 1)
                                HoverFill: =RGBA(255, 255, 255, 1)
                                MaxLength: =5
                                OnChange: |+
                                    =/*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated, Now());*/
                                    
                                    If(Len(TextInput5_10.Text)=5,Notify("Time Estimate should be less than 5 digits.",NotificationType.Warning));
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    
                                OnSelect: =Select(Parent)
                                RadiusBottomLeft: =1
                                RadiusBottomRight: =1
                                RadiusTopLeft: =1
                                RadiusTopRight: =1
                                Size: =AllScreensCSS.RLabelFontSize-2
                                Width: =If(App.Width<1024,Parent.Width/3.4,Parent.Width/4)
                                X: =1
                                Y: =Dropdown5_11.Y+Dropdown5_11.Height+10
                                ZIndex: =7

                            TextInput5_11 As text:
                                BorderColor: =RGBA(0, 0, 0, 1)
                                Default: |-
                                    =Text(
                                        LookUp(
                                            GC_checkpointItem_ActionItem,
                                            checkpointItemActionItemsId = ThisItem.checkpointItemActionItemsId,
                                            MaterialEstimate
                                        ),
                                        "[$-en-US]$ #.00"
                                    )
                                FocusedBorderThickness: =1
                                Font: =AllScreensCSS.RFont
                                Format: =TextFormat.Number
                                HintText: ="Material Estimate"
                                HoverBorderColor: =RGBA(0, 0, 0, 1)
                                HoverFill: =RGBA(255, 255, 255, 1)
                                MaxLength: =5
                                OnChange: |
                                    =/*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated, Now());*/
                                    
                                    
                                    If(Len(TextInput5_11.Text)=5,Notify("Material Estimate should be less than 5 digits.",NotificationType.Warning));
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                OnSelect: =Select(Parent)
                                RadiusBottomLeft: =1
                                RadiusBottomRight: =1
                                RadiusTopLeft: =1
                                RadiusTopRight: =1
                                Size: =AllScreensCSS.RLabelFontSize-2
                                Width: =If(App.Width<1024,Parent.Width/3.4,Parent.Width/4)
                                X: =Label9.X+Label9.Width
                                Y: =Dropdown5_11.Y+Dropdown5_11.Height+10
                                ZIndex: =8

                            Icon5_11 As icon.Cancel:
                                Color: =RGBA(0, 0, 0, 1)
                                DisplayMode: =DisplayMode.View
                                Fill: =RGBA(0, 0, 0, 1)
                                FocusedBorderThickness: =0
                                Height: =2
                                Icon: =Icon.HorizontalLine
                                Width: =Parent.Width
                                Y: =TextInput5_11.Y+TextInput5_11.Height+20
                                ZIndex: =9

                            Dropdown5_11 As dropdown:
                                BorderColor: =RGBA(0, 0, 0, 1)
                                ChevronBackground: =RGBA(255, 255, 255, 1)
                                ChevronFill: =RGBA(0, 0, 0, 1)
                                ChevronHoverBackground: =//ColorFade(RGBA(56, 96, 178, 1), -20%)
                                ChevronHoverFill: =RGBA(0, 0, 0, 1)
                                Default: |-
                                    =LookUp(GC_checkpointItem_ActionItem,checkpointItemActionItemsId=ThisItem.checkpointItemActionItemsId,priority)
                                    //LookUp(Act,ID=ThisItem.ID && unitID=varBankUnitId && checkpointitemID=glryItmesAS.Selected.checkpointItemId,Priority)
                                    //ThisItem.Priority
                                Font: =AllScreensCSS.RFont
                                HoverFill: =RGBA(255, 255, 255, 1)
                                Items: =["High","Medium","Low"]
                                OnChange: |+
                                    =/*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated, Now());*/
                                    
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    
                                OnSelect: =Select(Parent)
                                PressedFill: =RGBA(255, 255, 255, 1)
                                SelectionFill: =RGBA(0, 0, 0, 1)
                                Size: =AllScreensCSS.RLabelFontSize-2
                                Width: |-
                                    =If(App.Width<1024,Parent.Width/2.5,Parent.Width/3.1)
                                    //Parent.Width/4
                                X: =1
                                Y: =100
                                ZIndex: =11

                            Dropdown5_12 As dropdown:
                                BorderColor: =RGBA(0, 0, 0, 1)
                                ChevronBackground: =RGBA(255, 255, 255, 1)
                                ChevronFill: =RGBA(0, 0, 0, 1)
                                ChevronHoverBackground: =//ColorFade(RGBA(56, 96, 178, 1), -20%)
                                ChevronHoverFill: =RGBA(0, 0, 0, 1)
                                Default: |-
                                    =LookUp(GC_checkpointItem_ActionItem,checkpointItemActionItemsId=ThisItem.checkpointItemActionItemsId,OwnerId)
                                    //LookUp(Act,ID=ThisItem.ID && unitID=varBankUnitId && checkpointitemID=glryItmesAS.Selected.checkpointItemId ,Owner)
                                    //ThisItem.Owner
                                Font: =AllScreensCSS.RFont
                                HoverFill: =RGBA(255, 255, 255, 1)
                                Items: =["LPD North","LPD South","LPD East","LPD HQ","General Contractor"]
                                OnChange: |+
                                    =/*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated, Now());*/
                                    
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    
                                    
                                    
                                    
                                    
                                OnSelect: =Select(Parent)
                                PressedFill: =RGBA(255, 255, 255, 1)
                                SelectionFill: =RGBA(0, 0, 0, 1)
                                Size: =AllScreensCSS.RLabelFontSize-2
                                Width: |-
                                    =If(App.Width<1024,Parent.Width/2.5,Parent.Width/3.1)
                                    //Parent.Width/4
                                X: =Dropdown5_11.X+Dropdown5_11.Width+10
                                Y: =100
                                ZIndex: =12

                            Button5_18 As button:
                                BorderColor: =AllScreensCSS.RActiveColor
                                Fill: =AllScreensCSS.RActiveColor
                                Font: =AllScreensCSS.ButtonFont
                                HoverFill: =AllScreensCSS.RActiveColor
                                OnSelect: |
                                    =//for Logs
                                    UpdateIf(
                                        GcTraceLog,
                                        VarDebug = true,
                                        {
                                            Path: First(GcTraceLog).Path & "/RemoveAction=" & Text(
                                                Now(),
                                                "mm-dd-yy hh:mm:ss am/pm"
                                            )
                                        }
                                    );
                                    /*SaveData(
                                        GcTraceLog,
                                        "localGcTraceLog"
                                    );*/
                                    /*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated, Now());*/
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    Remove(
                                        GC_checkpointItem_ActionItem,
                                        ThisItem
                                    );
                                    //SaveData(GC_checkpointItem_ActionItem,"localcheckpointitemactionitem");
                                    Collect(
                                        gcActionItemDelete,
                                        {id: ThisItem.checkpointItemActionItemsId}
                                    );
                                    SaveData(
                                        gcActionItemDelete,
                                        "localgcActionItemDelete"
                                    );
                                PressedFill: =AllScreensCSS.RActiveColor
                                RadiusBottomLeft: =1
                                RadiusBottomRight: =1
                                RadiusTopLeft: =1
                                RadiusTopRight: =1
                                Text: ="X"
                                Width: =40
                                X: =TextInput8.X+ComboBox1_2.Width+20
                                Y: =ComboBox1_2.Y
                                ZIndex: =14

                            ComboBox1_2 As combobox:
                                BorderColor: =RGBA(0, 0, 0, 1)
                                ChevronBackground: =RGBA(255, 255, 255, 1)
                                ChevronDisabledBackground: =RGBA(204, 204, 204, 1)
                                ChevronDisabledFill: =RGBA(0, 0, 0, 1)
                                ChevronFill: =RGBA(0, 0, 0, 1)
                                ChevronHoverBackground: =AllScreensCSS.RColorBlack
                                DefaultSelectedItems: =Filter(GC_actionItems,actionItemName=ThisItem.ActionItem_Name)
                                DisabledBorderColor: =RGBA(0, 0, 0, 1)
                                DisabledColor: =RGBA(0, 0, 0, 1)
                                DisabledFill: =RGBA(204, 204, 204, 1)
                                DisplayFields: =["shlaf_actionitemname"]
                                DisplayMode: =If(Radio1.Selected.Value="Custom action",DisplayMode.Disabled,DisplayMode.Edit)
                                Font: =AllScreensCSS.RFont
                                HoverFill: =RGBA(0, 0, 0, 0)
                                InputTextPlaceholder: |-
                                    =LookUp(GC_checkpointItem_ActionItem,checkpointItemActionItemsId=ThisItem.checkpointItemActionItemsId && bankUnitId.Id=varBankUnitId && checkpointItem_Id.checkpointItemId.checkpointItemId=varCheckpointitemID,ThisItem.ActionItem_Name in ForAll(Distinct(GC_actionItems,actionItemName), {Result: ThisRecord.Value}).Result)
                                IsSearchable: =false
                                Items: =Filter(GC_actionItems, sectionId.sectionId = VarSectionId, actionItemName)
                                OnChange: |
                                    =/*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated,Now());*/
                                    
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                OnSelect: =Select(Parent)
                                PressedColor: =RGBA(0, 0, 0, 1)
                                PressedFill: =RGBA(0, 0, 0, 0)
                                SearchFields: =["shlaf_actionitemname"]
                                SearchItems: =[]
                                SelectionColor: =RGBA(0, 0, 0, 1)
                                SelectionFill: =RGBA(204, 204, 204, 1)
                                SelectMultiple: =false
                                Size: =AllScreensCSS.RLabelFontSize-2
                                Width: |-
                                    =//Parent.Width/1.24
                                    Parent.Width/2.5
                                X: =1
                                Y: =50
                                ZIndex: =15

                            TextInput8 As text:
                                BorderColor: =RGBA(0, 0, 0, 1)
                                Default: |-
                                    =
                                    If(ThisItem.ActionItem_Name in ForAll(Distinct(GC_actionItems,actionItemName), {Result: ThisRecord.Value}).Result,"",ThisItem.ActionItem_Name) 
                                DisabledBorderColor: =RGBA(0, 0, 0, 1)
                                DisabledFill: =RGBA(204, 204, 204, 1)
                                DisplayMode: =If(Radio1.Selected.Value="Default action",DisplayMode.Disabled,DisplayMode.Edit)
                                Font: =AllScreensCSS.RFont
                                HintText: ="Write Action"
                                HoverBorderColor: =RGBA(0, 0, 0, 1)
                                HoverFill: =RGBA(255, 255, 255, 1)
                                MaxLength: =256
                                OnChange: |-
                                    =/*UpdateIf(GC_checkpointItem_ActionItem,checkpointItemActionItemsId=ThisItem.checkpointItemActionItemsId,{ActionItem_Name:GlryActionItemFS.Selected.TextInput8.Text})*/
                                    If(
                                        Len(TextInput8.Text) = 256,
                                        Notify(
                                            "Action should be less than 256 characters",
                                            NotificationType.Warning
                                        )
                                    )
                                OnSelect: =Select(Parent)
                                RadiusBottomLeft: =1
                                RadiusBottomRight: =1
                                RadiusTopLeft: =1
                                RadiusTopRight: =1
                                Width: =ComboBox1_2.Width
                                X: =ComboBox1_2.X+ComboBox1_2.Width+10
                                Y: =50
                                ZIndex: =17

                            Radio1 As radio:
                                BorderColor: =RGBA(0, 0, 0, 0)
                                Default: |
                                    =If(ThisItem.ActionItem_Name in ForAll(Distinct(GC_actionItems,actionItemName), {Result: ThisRecord.Value}).Result || IsBlank(ThisItem.ActionItem_Name),"Default action","Custom action")
                                DisabledBorderColor: =RGBA(0, 0, 0, 1)
                                Font: =AllScreensCSS.RFont
                                Height: =40
                                Items: =["Default action","Custom action"]
                                Layout: =Layout.Horizontal
                                OnSelect: |-
                                    =
                                    If(
                                        Radio1.Selected.Value = "Default action",
                                        UpdateIf(
                                            GC_checkpointItem_ActionItem,
                                            checkpointItemActionItemsId = ThisItem.checkpointItemActionItemsId,
                                            {ActionItem_Name: ""}
                                        ),
                                        Reset(ComboBox1_2));
                                        If(
                                         Radio1.Selected.Value = " Custom action",
                                        UpdateIf(
                                            GC_checkpointItem_ActionItem,
                                            checkpointItemActionItemsId = ThisItem.checkpointItemActionItemsId,
                                            {ActionItem_Name: ""}
                                        ),
                                        Reset(TextInput8));
                                PaddingBottom: =0
                                PaddingTop: =0
                                RadioBorderColor: =RGBA(0, 0, 0, 1)
                                RadioSize: =30
                                Size: =AllScreensCSS.RfontsizeInput
                                Width: =672
                                Y: =10
                                ZIndex: =18

                            Label9 As label:
                                Font: =AllScreensCSS.RFont
                                OnSelect: =Select(Parent)
                                Text: ="Hrs"
                                Width: |-
                                    =//Parent.Width/4
                                    If(App.Width<1025,Parent.Width/9,Parent.Width/12.4)
                                X: |-
                                    =//Dropdown5_12.X+Dropdown5_12.Width+10
                                    TextInput5_10.X+TextInput5_10.Width
                                Y: =Dropdown5_11.Y+Dropdown5_11.Height+10
                                ZIndex: =19

                            Label9_1 As label:
                                Font: =AllScreensCSS.RFont
                                OnSelect: =Select(Parent)
                                Text: ="Dollar(s)"
                                Width: =Parent.Width/8
                                X: =TextInput5_11.X+TextInput5_11.Width
                                Y: =Dropdown5_11.Y+Dropdown5_11.Height+10
                                ZIndex: =20

                        ctnAddActionFS As groupContainer.horizontalAutoLayoutContainer:
                            FillPortions: =0
                            Height: =70
                            LayoutAlignItems: =LayoutAlignItems.Center
                            LayoutMinHeight: =100
                            LayoutMinWidth: =250
                            LayoutMode: =LayoutMode.Auto
                            LayoutWrap: =true
                            ZIndex: =5

                            Label20_8 As label:
                                Font: =AllScreensCSS.RFont
                                FontWeight: =FontWeight.Bold
                                Size: =AllScreensCSS.RLabelFontSize
                                Text: ="Add Action"
                                Width: |-
                                    =//Parent.Width/8
                                    150
                                ZIndex: =1

                            Button5_16 As button:
                                BorderColor: =AllScreensCSS.RActiveColor
                                Color: =AllScreensCSS.RColorWhite
                                Fill: =AllScreensCSS.RActiveColor
                                Font: =AllScreensCSS.ButtonFont
                                HoverFill: =AllScreensCSS.RActiveColor
                                OnSelect: |
                                    =//for Logs
                                    UpdateIf(
                                        GcTraceLog,
                                        VarDebug = true,
                                        {
                                            Path: First(GcTraceLog).Path & "/AddAction=" & Text(
                                                Now(),
                                                "mm-dd-yy hh:mm:ss am/pm"
                                            )
                                        }
                                    );
                                    /*SaveData(
                                        GcTraceLog,
                                        "localGcTraceLog"
                                    );*/
                                    /*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated, Now());*/
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    Collect(
                                        GC_checkpointItem_ActionItem,
                                        {
                                            // checkpointItemActionItemsId: GUID(),
                                            checkpointItemActionItemsId: varBankUnitId & "ca" & Text(
                                                Now(),
                                                "mmddyyyyhhmmss"
                                            ) & "-" & Rand(),
                                            ActionItem_Name: "",
                                            assignmentId: LookUp(
                                                DropColumns(
                                                    gcProjectAssignment,
                                                    "AstatusUpdate"
                                                ),
                                                Id = varAssignmentId
                                            ),
                                            bankId: LookUp(
                                                gcBank,
                                                Id = VarBankId
                                            ),
                                            bankUnitId: LookUp(
                                                gcBankunit,
                                                Id = varBankUnitId
                                            ),
                                            section_id: LookUp(
                                                DropColumns(
                                                    GcSectionAssessment,
                                                    "SstatusUpdate"
                                                ),
                                                'sectionAssessment (quantum_sectionassessment)' = varSA
                                            ),
                                            checkpoint_id: LookUp(
                                                DropColumns(
                                                    GcCheckpointAssessment,
                                                    "CstatusUpdate"
                                                ),
                                                checkpointAssessment_id = GuidId
                                            ),
                                            checkpointItem_Id: LookUp(
                                                DropColumns(
                                                    GC_checkpointItemAssessment,
                                                    "CIstatusUpdate"
                                                ),
                                                'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA
                                            ),
                                            product_id: LookUp(
                                                GC_product,
                                                product_Model = glryUnitBS.Selected.productModel
                                            ),
                                            priority: "",
                                            OwnerId: "",
                                            TimeEstimate: "",
                                            MaterialEstimate: "",
                                            ActionSortSequence: LookUp(
                                                GC_templateSections,
                                                sectionId = VarSectionId,
                                                sectionSequence
                                            ) & LookUp(
                                                GC_templateCheckpoints,
                                                checkpointId = ChId,
                                                checkpointSequence
                                            ) & LookUp(
                                                GC_templateCheckpointsItem,
                                                checkpointItemId = varCheckpointitemID,
                                                checkpointItemSequence
                                            ),
                                            CIAstatusUpdate: Blank()
                                        }
                                    );
                                PressedFill: =AllScreensCSS.RActiveColor
                                RadiusBottomLeft: =1
                                RadiusBottomRight: =1
                                RadiusTopLeft: =1
                                RadiusTopRight: =1
                                Size: =16
                                Text: ="+"
                                Width: =40
                                Y: =Label20_8.Y
                                ZIndex: =2

                            Container1 As groupContainer.horizontalAutoLayoutContainer:
                                LayoutAlignItems: =LayoutAlignItems.Center
                                LayoutJustifyContent: =LayoutJustifyContent.End
                                LayoutMinHeight: =100
                                LayoutMinWidth: =250
                                LayoutMode: =LayoutMode.Auto
                                PaddingRight: =40
                                ZIndex: =3

                                Button1 As button:
                                    BorderColor: =Self.Fill
                                    DisplayMode: |-
                                        =If(
                                            Connection.Connected,
                                            If(
                                                CountRows(
                                                    Filter(
                                                        GC_checkpointItem_Images,
                                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA && CIIstatusUpdate = 2 && IsBlank(Image)
                                                    )
                                                ) > 0,
                                                DisplayMode.Edit,
                                                DisplayMode.Disabled
                                            ),
                                            DisplayMode.Disabled
                                        )
                                    Fill: =AllScreensCSS.RActiveColor
                                    HoverFill: =Self.Fill
                                    OnSelect: |
                                        =//for Logs
                                        UpdateIf(
                                            GcTraceLog,
                                            VarDebug = true,
                                            {
                                                Path: First(GcTraceLog).Path & "/DownloadImg=" & Text(
                                                    Now(),
                                                    "mm-dd-yy hh:mm:ss am/pm"
                                                )
                                            }
                                        );
                                        /*SaveData(
                                            GcTraceLog,
                                            "localGcTraceLog"
                                        );*/
                                        //for safety check
                                        If(
                                            DateDiff(
                                                UserLastNavigatedTime,
                                                Now(),
                                                TimeUnit.Seconds
                                            ) > SafetyCheckTime,
                                            Set(
                                                safetyPopup,
                                                true
                                            );
                                            ,
                                            Set(
                                                UserLastNavigatedTime,
                                                Now()
                                            );
                                            
                                        );
                                        If(
                                            CountRows(
                                                Filter(
                                                    GC_checkpointItem_Images,
                                                    CIIstatusUpdate = 0 || CIIstatusUpdate = 1 || CIIstatusUpdate = Blank()
                                                )
                                            ) >= First(gcCollectionCapCounts).SavedImageCount,
                                            Set(
                                                VarImagesExceedPopupText,
                                                "You have reached limit of " & First(gcCollectionCapCounts).SavedImageCount & " Unsubmitted images. Please submit before continuing the assessment."
                                            );
                                         // Notify("You have reached limit of 75 images.You can not add Images.",NotificationType.Error);
                                        Set(
                                                VarImagesExceedPopup,
                                                true
                                            );
                                            ,
                                            Set(
                                                UP,
                                                true
                                            );
                                            
                                        //get specific item images form server
                                        ClearCollect(
                                                TempGetImages,
                                                Filter(
                                                    checkpointItem_Images,
                                                    checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA
                                                )
                                            );
                                            
                                        //Update images to collection
                                        ForAll(
                                                TempGetImages As i,
                                                UpdateIf(
                                                    GC_checkpointItem_Images,
                                                    checkpointItemImagesId = i.checkpointItemImagesId && CIIstatusUpdate = 2,
                                                    {Image: i.Image}
                                                )
                                            );
                                            Set(
                                                VarImageIsDownloaded,
                                                true
                                            );
                                            Clear(TempGetImages);
                                            
                                        );
                                    PressedColor: =Self.Color
                                    PressedFill: =Self.Fill
                                    Size: =12
                                    Text: ="Download Images"
                                    Visible: |-
                                        =If(
                                            CountRows(
                                                Filter(
                                                    GC_checkpointItem_Images,
                                                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA
                                                )
                                            ) > 0,
                                            true,
                                            false
                                        )
                                    Width: =200
                                    ZIndex: =1

                        "GlryImagesFS As gallery.'BrowseLayout_Vertical_TwoTextOneImageTwoColumnVariant_ver4.0'":
                            AlignInContainer: =AlignInContainer.Start
                            FillPortions: =0
                            Height: |
                                =If(CountRows(GlryImagesFS.AllItems)=1,380,CountRows(GlryImagesFS.AllItems)*(GlryImagesFS.TemplateHeight)/2)
                                
                                //CountRows(Gallery13.AllItems)*(Gallery13.TemplateHeight)/2
                            Items: |-
                                =Filter(
                                    GC_checkpointItem_Images,
                                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA || assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId &&  checkpointItem_Id.checkpointItemId.checkpointItemId = varCheckpointitemID
                                )
                            Layout: =Layout.Vertical
                            LayoutMinHeight: =287
                            LayoutMinWidth: =320
                            ShowScrollbar: =false
                            TemplatePadding: =0
                            TemplateSize: =370
                            Visible: =Q
                            Width: =Parent.Width/1.2
                            WrapCount: =2
                            ZIndex: =6

                            TextInput6_2 As text:
                                BorderColor: =RGBA(0, 0, 0, 1)
                                Default: |-
                                    =LookUp(
                                        GC_checkpointItem_Images,
                                        bankUnitId.Id = varBankUnitId &&
                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA &&
                                        checkpointItemImagesId = ThisItem.checkpointItemImagesId ,
                                        image_annotation
                                    )
                                DisplayMode: |-
                                    =If(
                                        VarImageIsDownloaded = true,
                                        DisplayMode.Edit,
                                        DisplayMode.Disabled
                                    )
                                Font: =AllScreensCSS.RFont
                                HintText: ="Image Annotation"
                                HoverBorderColor: =RGBA(0, 0, 0, 1)
                                HoverFill: =RGBA(255, 255, 255, 1)
                                Mode: =TextMode.MultiLine
                                OnChange: |
                                    =/*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated, Now());*/
                                    
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    
                                    //UpdateIf(GC_checkpointItem_Images,checkpointItemImagesId=ThisItem.checkpointItemImagesId,{image_annotation:TextInput6_2.Text});
                                OnSelect: |-
                                    =/*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated, Now());*/
                                    
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    
                                    Select(Parent)
                                PaddingLeft: =5
                                RadiusBottomLeft: =1
                                RadiusBottomRight: =1
                                RadiusTopLeft: =1
                                RadiusTopRight: =1
                                Size: =AllScreensCSS.RLabelFontSize-4
                                Width: =Parent.Width/3
                                X: =Parent.TemplateWidth/12
                                Y: =Button4_1.Height+Button4_1.Y+10
                                ZIndex: =2

                            Image9_2 As image:
                                Height: =Min(Self.Width, Parent.TemplateHeight - 115)
                                Image: |-
                                    =If(
                                        IsBlank(ThisItem.Image) ,
                                        If(ThisItem.CIIstatusUpdate = 2,
                                        'submitted-cloud',
                                        'Sample Image'),
                                        ThisItem.Image
                                    )
                                OnSelect: |-
                                    =/*//for reset ideal timer
                                    Reset(tmr_logout);
                                    Set(UserLastNavigated, Now());*/
                                    
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    
                                    Select(Parent)
                                Visible: =true//If(UP,false)
                                Width: =Parent.TemplateWidth/1.8
                                X: =Parent.TemplateWidth/7
                                Y: =16
                                ZIndex: =5

                            Button5_22 As button:
                                BorderColor: =AllScreensCSS.RActiveColor
                                Fill: =AllScreensCSS.RActiveColor
                                Font: =AllScreensCSS.ButtonFont
                                FontWeight: =FontWeight.Bold
                                HoverFill: =AllScreensCSS.RActiveColor
                                Italic: =true
                                OnSelect: |
                                    =//for Logs
                                    UpdateIf(
                                        GcTraceLog,
                                        VarDebug = true,
                                        {
                                            Path: First(GcTraceLog).Path & "/RemoveImg=" & Text(
                                                Now(),
                                                "mm-dd-yy hh:mm:ss am/pm"
                                            )
                                        }
                                    );
                                    /*SaveData(
                                        GcTraceLog,
                                        "localGcTraceLog"
                                    );*/
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    If(
                                        VarImageIsDownloaded = true,
                                        If(
                                            glryItmesAS.Selected.checkpointItemImage = 'checkpointItemImage (templateCheckpointsItems)'.Yes && CountRows(
                                                Filter(
                                                    GC_checkpointItem_Images,
                                                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId &&//checkpointItem_Id.checkpointItemId.checkpointItemId = varCheckpointitemID
                                     checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA
                                                )
                                            ) > 1,
                                            Set(
                                                varIsImage,
                                                true
                                            ),
                                            Set(
                                                varIsImage,
                                                false
                                            )
                                        );
                                        If(
                                            glryItmesAS.Selected.checkpointItemImage = 'checkpointItemImage (templateCheckpointsItems)'.No,
                                            Set(
                                                varIsImage1,
                                                true
                                            ),
                                            Set(
                                                varIsImage1,
                                                false
                                            )
                                        );
                                        If(
                                            (varIsImage = true && varIsImage1 = false) || (varIsImage1 = true && varIsImage = false),
                                            Remove(
                                                GC_checkpointItem_Images,
                                                ThisItem
                                            );
                                       /* SaveData(
                                            GC_checkpointItem_Images,
                                        "localcheckpointitemimage");*/
                                    Collect(
                                                gcImageDelete,
                                                {id: ThisItem.checkpointItemImagesId}
                                            );
                                            SaveData(
                                                gcImageDelete,
                                                "localgcImageDelete"
                                            );
                                            ,
                                            Notify("Here,Image is mandatory.So you can't delete it,change the image.")
                                        ),
                                        Set(
                                            VarDownloadImagesRestrict,
                                            true
                                        )
                                    );
                                RadiusBottomLeft: =1
                                RadiusBottomRight: =1
                                RadiusTopLeft: =1
                                RadiusTopRight: =1
                                Size: =12
                                Text: ="X"
                                Width: =40
                                X: =Image9_2.X+Image9_2.Width+10
                                Y: =Image9_2.Y
                                ZIndex: =6

                            Button4_1 As button:
                                BorderThickness: =0
                                DisabledFill: =RGBA(202, 202, 202, 1)
                                DisplayMode: |-
                                    =If(
                                        VarImageIsDownloaded = true,
                                        DisplayMode.Edit,
                                        DisplayMode.Disabled
                                    )
                                Fill: =RGBA(153, 188, 242, 1)
                                FocusedBorderThickness: =0
                                HoverColor: =Self.Color
                                HoverFill: =Self.Fill
                                OnSelect: |-
                                    =ClearCollect(tempPhoto,{Id:1,image:'Sample Image'});
                                    Set(VarCameraFlag,0);
                                    Navigate(Screen2);
                                PressedColor: =Self.Color
                                PressedFill: =Self.Fill
                                Text: |-
                                    =If(
                                        IsBlank(
                                            LookUp(
                                                GC_checkpointItem_Images,
                                                checkpointItemImagesId = ThisItem.checkpointItemImagesId,
                                                Image
                                            )
                                        ),
                                        "Capture Image",
                                        "Change Image"
                                    )
                                Width: =Parent.TemplateWidth/1.8
                                X: =Parent.TemplateWidth/7
                                Y: =Image9_2.Height+Image9_2.Y+10
                                ZIndex: =7

                        ctnAddImageFS As groupContainer.horizontalAutoLayoutContainer:
                            FillPortions: =0
                            Height: =50
                            LayoutMinHeight: =100
                            LayoutMinWidth: =250
                            LayoutMode: =LayoutMode.Auto
                            LayoutWrap: =true
                            ZIndex: =7

                            lblAddImageFS As label:
                                Color: =AllScreensCSS.RColorBlack
                                DisplayMode: |-
                                    =If(
                                        CountRows(GlryImagesFS.AllItems) = 6,DisplayMode.Disabled,DisplayMode.Edit)
                                Font: =AllScreensCSS.RFont
                                FontWeight: =FontWeight.Bold
                                Size: =18
                                Text: ="Add Image" 
                                ZIndex: =1

                            lblImageRequiredFS As label:
                                Font: =AllScreensCSS.RFont
                                PaddingLeft: =0
                                Size: =16
                                Text: ="*"
                                Visible: =If(glryItmesAS.Selected.checkpointItemImage,true,false)
                                Width: =20
                                ZIndex: =2

                            btnAddImageFS As button:
                                BorderColor: =AllScreensCSS.RActiveColor
                                DisplayMode: |-
                                    =If(
                                        CountRows(GlryImagesFS.AllItems) = 4,DisplayMode.Disabled,DisplayMode.Edit)
                                Fill: =AllScreensCSS.RActiveColor
                                Font: =AllScreensCSS.ButtonFont
                                HoverFill: =AllScreensCSS.RActiveColor
                                OnSelect: |
                                    =//for Logs
                                    UpdateIf(
                                        GcTraceLog,
                                        VarDebug = true,
                                        {
                                            Path: First(GcTraceLog).Path & "/AddImg=" & Text(
                                                Now(),
                                                "mm-dd-yy hh:mm:ss am/pm"
                                            )
                                        }
                                    );
                                    /*SaveData(
                                        GcTraceLog,
                                        "localGcTraceLog"
                                    );*/
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    /*
                                    If(
                                        First(gcCollectionCapCounts).IsIndividualCollection = true && (CountRows(GC_checkpointItemAssessment) > Value(First(gcCollectionCapCounts).IndividualCollectionCount)
                                          || CountRows(GC_checkpointItem_ActionItem) > Value(First(gcCollectionCapCounts).IndividualCollectionCount) || CountRows(GC_checkpointItem_Images) > Value(First(gcCollectionCapCounts).IndividualCollectionCount)),
                                        Set(
                                            VarMemoryPressurePopupMessage,
                                            "Your device's memory is getting full. Please submit the findings as soon as possible and restart the App."
                                        );
                                        Set(
                                            VarMemoryPressurePopup,
                                            true
                                        ),
                                        Set(
                                            VarMemoryPressurePopup,
                                            false
                                        )
                                    );
                                    If(
                                        First(gcCollectionCapCounts).IsAllCollection = true && (CountRows(GC_actionItems) + CountRows(GC_bankAssessment) + CountRows(GC_checkpointItem_ActionItem) + CountRows(GC_checkpointItemAssessment) + CountRows(GC_unitAssessment) + CountRows(gcAssignmentunit) + CountRows(gcProjectAssignment) + CountRows(gcBankunit) + CountRows(gcBank) + CountRows(gcClient) + CountRows(GC_product) + CountRows(GC_templateCheckpointsItem) + CountRows(GC_templateCheckpoints) + CountRows(GC_templateSections) + CountRows(gcImageDelete) + CountRows(gcActionItemDelete) + CountRows(GC_checkpointItem_Images) + CountRows(GcCheckpointAssessment) + CountRows(GcSectionAssessment)) > Value(First(gcCollectionCapCounts).CombinedCollectionCount),
                                        Set(
                                            VarMemoryPressurePopupMessage,
                                            "Your device's memory is getting full. Please submit the findings as soon as possible and restart the App."
                                        );
                                        Set(
                                            VarMemoryPressurePopup1,
                                            true
                                        ),
                                        Set(
                                            VarMemoryPressurePopup1,
                                            false
                                        )
                                    );*/
                                    If(
                                        VarImageIsDownloaded = true,
                                        If(
                                            CountRows(
                                                Filter(
                                                    GC_checkpointItem_Images,
                                                    CIIstatusUpdate = 0 || CIIstatusUpdate = 1 || CIIstatusUpdate = Blank()
                                                )
                                            ) >= First(gcCollectionCapCounts).SavedImageCount,
                                            Set(
                                                VarImagesExceedPopupText,
                                                "You have reached limit of " & First(gcCollectionCapCounts).SavedImageCount & " Unsubmitted images. Please submit before continuing the assessment."
                                            );
                                     // Notify("You have reached limit of 75 images.You can not add Images.",NotificationType.Error);
                                    Set(
                                                VarImagesExceedPopup,
                                                true
                                            );
                                            ,
                                            If(
                                                CountRows(
                                                    Filter(
                                                        GC_checkpointItem_Images,
                                                        CIIstatusUpdate = 0 || CIIstatusUpdate = 1 || CIIstatusUpdate = Blank()
                                                    )
                                                ) > First(gcCollectionCapCounts).SavedImageCount - 10,
                                                Set(
                                                    VarImagesExceedPopupText,
                                                    CountRows(
                                                        Filter(
                                                            GC_checkpointItem_Images,
                                                            CIIstatusUpdate = 0 || CIIstatusUpdate = 1 || CIIstatusUpdate = Blank()
                                                        )
                                                    ) & " Unsubmitted Images are already stored. Now you can add only " & First(gcCollectionCapCounts).SavedImageCount - CountRows(
                                                        Filter(
                                                            GC_checkpointItem_Images,
                                                            CIIstatusUpdate = 0 || CIIstatusUpdate = 1 || CIIstatusUpdate = Blank()
                                                        )
                                                    ) & " images more."
                                                );
                                      //Notify(CountRows(GC_checkpointItem_Images) & " Images are already stored. 75 is a limit.",NotificationType.Error);
                                    Set(
                                                    VarImagesExceedPopup,
                                                    true
                                                );
                                            );
                                            Set(
                                                UP,
                                                false
                                            );
                                            If(
                                                CountRows(GlryImagesFS.AllItems) < 4,
                                                Collect(
                                                    GC_checkpointItem_Images,
                                                    {
                                                        // checkpointItemImagesId:GUID(),
                                                        checkpointItemImagesId: varBankUnitId & "cii" & Text(
                                                            Now(),
                                                            "mmddyyyyhhmmss"
                                                        ) & "-" & Rand(),
                                                        assignmentId: LookUp(
                                                            DropColumns(
                                                                gcProjectAssignment,
                                                                "AstatusUpdate"
                                                            ),
                                                            Id = varAssignmentId
                                                        ),
                                                        //  bankId:LookUp(gcBank,Id=VarBankId),
                                                        bankUnitId: LookUp(
                                                            gcBankunit,
                                                            Id = varBankUnitId
                                                        ),
                                                        section_id: LookUp(
                                                            DropColumns(
                                                                GcSectionAssessment,
                                                                "SstatusUpdate"
                                                            ),
                                                            'sectionAssessment (quantum_sectionassessment)' = varSA
                                                        ),
                                                        checkpoint_id: LookUp(
                                                            DropColumns(
                                                                GcCheckpointAssessment,
                                                                "CstatusUpdate"
                                                            ),
                                                            checkpointAssessment_id = GuidId
                                                        ),
                                                        checkpointItem_Id: LookUp(
                                                            DropColumns(
                                                                GC_checkpointItemAssessment,
                                                                "CIstatusUpdate"
                                                            ),
                                                            'checkpointItemAssessment (quantum_checkpointitemassessment)' = Text(varCItemA)
                                                        ),
                                                        product_id: LookUp(
                                                            GC_product,
                                                            product_Model = glryUnitBS.Selected.productModel
                                                        ),
                                                        image_annotation: "",
                                                        ImageSortSequence: LookUp(
                                                            GC_templateSections,
                                                            sectionId = VarSectionId,
                                                            sectionSequence
                                                        ) & LookUp(
                                                            GC_templateCheckpoints,
                                                            checkpointId = ChId,
                                                            checkpointSequence
                                                        ) & LookUp(
                                                            GC_templateCheckpointsItem,
                                                            checkpointItemId = varCheckpointitemID,
                                                            checkpointItemSequence
                                                        ),
                                                        CIIstatusUpdate: Blank()
                                                    }
                                                );
                                                If(
                                                    CountRows(GlryImagesFS.AllItems) >= 4,
                                                    Notify("You can capture 4 images only."),
                                                    NotificationType.Warning
                                                )
                                            );
                                            Set(
                                                varImage,
                                                true
                                            );
                                        );
                                        ,
                                        Set(
                                            VarDownloadImagesRestrict,
                                            true
                                        )
                                    );
                                    
                                    // Calculate the length of the JSON string
                                    Set(
                                        VarJsonStringAllCol,
                                        Len(
                                            JSON(
                                                DropColumns(
                                                    GC_actionItems,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GC_product,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GC_templateSections,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GC_templateCheckpoints,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GC_templateCheckpointsItem,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(JSON(gcActionItemDelete)) + Len(JSON(gcImageDelete)) + Len(
                                            JSON(
                                                DropColumns(
                                                    gcClient,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    gcBank,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    gcBankunit,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    gcProjectAssignment,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    gcAssignmentunit,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GC_bankAssessment,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GC_unitAssessment,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GcSectionAssessment,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GcCheckpointAssessment,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GC_checkpointItemAssessment,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GC_checkpointItem_ActionItem,
                                                    "_ownerid_value"
                                                )
                                            )
                                        ) + Len(
                                            JSON(
                                                DropColumns(
                                                    GC_checkpointItem_Images,
                                                    "_ownerid_value"
                                                ),
                                                JSONFormat.IncludeBinaryData
                                            )
                                        )+ Len(
                                            JSON(
                                                DropColumns(
                                                    gcCollectionCapCounts,
                                                    "_ownerid_value"
                                                )
                                            )
                                        )
                                    );
                                    /*Set(
                                        VarJsonStringItem,
                                        Len(
                                            JSON(
                                                DropColumns(
                                                    GC_checkpointItemAssessment,
                                                    "_ownerid_value"
                                                )
                                            )
                                        )
                                    );
                                    Set(
                                        VarJsonStringAction,
                                        Len(
                                            JSON(
                                                DropColumns(
                                                    GC_checkpointItem_ActionItem,
                                                    "_ownerid_value"
                                                )
                                            )
                                        )
                                    );
                                    Set(
                                        VarJsonStringImage,
                                        Len(
                                            JSON(
                                                DropColumns(
                                                    GC_checkpointItem_Images,
                                                    "_ownerid_value"
                                                ),
                                                JSONFormat.IncludeBinaryData
                                            )
                                        )
                                    );*/
                                    // Convert characters to bytes (considering UTF-16 encoding)
                                    Set(
                                        VarBytesEstimate,
                                        (VarJsonStringAllCol * 2)
                                    );
                                    //((VarJsonStringItem + VarJsonStringAction + VarJsonStringImage) * 2)
                                    //*0.0009765625mb
                                    //convert bytes to MB
                                    Set(
                                        VarBytestoMB,
                                        (VarBytesEstimate / (1024 * 1024))
                                    );
                                    //*0.0009765625mb
                                    If(
                                        VarBytestoMB > 20,
                                        Set(
                                            VarMemoryPressurePopupMessage,
                                            "Your device's memory is getting full. Please submit the findings as soon as possible and restart the App."
                                        );
                                        Set(
                                            VarMemoryPressurePopup,
                                            true
                                        ),
                                        Set(
                                            VarMemoryPressurePopup,
                                            false
                                        )
                                    );
                                PressedFill: =AllScreensCSS.RActiveColor
                                RadiusBottomLeft: =1
                                RadiusBottomRight: =1
                                RadiusTopLeft: =1
                                RadiusTopRight: =1
                                Text: ="+"
                                Width: =40
                                Y: =lblAddImageFS.Y
                                ZIndex: =3

                            Label4 As label:
                                Size: =12
                                Text: |-
                                    =" ( Unsubmitted image count is " & CountRows(
                                        Filter(
                                            GC_checkpointItem_Images,
                                            CIIstatusUpdate = 0 || CIIstatusUpdate = 1
                                        )
                                    ) & " ) " & VarBytestoMB & "MB"
                                Visible: |-
                                    =If(
                                        CountRows(
                                            Filter(
                                                GC_checkpointItem_Images,
                                                CIIstatusUpdate = 0 || CIIstatusUpdate = 1
                                            )
                                        ) > 0,
                                        true,
                                        false
                                    )
                                Width: =300
                                ZIndex: =4

                        Container2 As groupContainer.horizontalAutoLayoutContainer:
                            FillPortions: =0
                            Height: =100
                            LayoutAlignItems: =LayoutAlignItems.Center
                            LayoutGap: =10
                            LayoutJustifyContent: =LayoutJustifyContent.Center
                            LayoutMinHeight: =100
                            LayoutMinWidth: =250
                            LayoutMode: =LayoutMode.Auto
                            Width: =Parent.Width -40
                            Y: =btnAddImageFS.Height+btnAddImageFS.Y+50
                            ZIndex: =8

                            btnSaveFS As button:
                                BorderColor: =Self.Fill
                                DisplayMode: =If(IsBlank(txtAnnotationFS) && CountRows(GlryActionItemFS.AllItems)=0 && CountRows(GlryImagesFS.AllItems)=0,DisplayMode.Disabled,DisplayMode.Edit)
                                Fill: =AllScreensCSS.RActiveColor
                                Font: =AllScreensCSS.ButtonFont
                                FontWeight: =FontWeight.Normal
                                HoverFill: =AllScreensCSS.RActiveColor
                                OnSelect: |
                                    =//for Logs
                                    UpdateIf(
                                        GcTraceLog,
                                        VarDebug = true,
                                        {
                                            Path: First(GcTraceLog).Path & "/SaveStart=" & Text(
                                                Now(),
                                                "mm-dd-yy hh:mm:ss am/pm"
                                            )
                                        }
                                    );
                                    SaveData(
                                        GcTraceLog,
                                        "localGcTraceLog"
                                    );
                                    //Notify("save start");
                                    Set(
                                        VarBlankrow1,
                                        false
                                    );
                                    Set(
                                        VarBlankrow2,
                                        false
                                    );
                                    //for safety check
                                    If(
                                        DateDiff(
                                            UserLastNavigatedTime,
                                            Now(),
                                            TimeUnit.Seconds
                                        ) > SafetyCheckTime,
                                        Set(
                                            safetyPopup,
                                            true
                                        );
                                        ,
                                        Set(
                                            UserLastNavigatedTime,
                                            Now()
                                        );
                                        
                                    );
                                    If(
                                        !IsBlank(
                                            LookUp(
                                                GlryActionItemFS.AllItems,
                                                IsBlank(ComboBox1_2.Selected.actionItemName) && TextInput8.Text = ""
                                            )
                                        ),
                                        Set(
                                            VarBlankrow1,
                                            true
                                        )
                                    );
                                    If(
                                        !IsBlank(
                                            LookUp(
                                                GlryImagesFS.AllItems,
                                                //(Image9_2.Image) = Blank()
                                                Image9_2.Image='Sample Image'|| Image9_2.Image = 'submitted-cloud'
                                                       )
                                        ),
                                        Set(
                                            VarBlankrow2,
                                            true
                                        )
                                    );
                                    If(
                                        VarBlankrow1 = true,
                                        Notify(
                                            "Blank action is not allowed,Please delete blank action or add action.",
                                            NotificationType.Error
                                        ),
                                        VarBlankrow2 = true,
                                        Notify(
                                            "Image is not captured,Please delete blank image or capture new image.",
                                            NotificationType.Error
                                        ),
                                        If(
                                            IsBlank(txtAnnotationFS) && VarBlankrow1 = false && VarBlankrow2 = false,
                                            Notify(
                                                "Annotation is required.",
                                                NotificationType.Error
                                            ),
                                            If(
                                                glryItmesAS.Selected.checkpointItemImage = 'checkpointItemImage (templateCheckpointsItems)'.Yes && CountRows(GlryImagesFS.AllItems) < 1,
                                                Notify(
                                                    "Image is mandatory.",
                                                    NotificationType.Error
                                                ),
                                                UpdateIf(
                                                    gcProjectAssignment,
                                                    Id = varAssignmentId && bankId.Id = VarBankId && isCompleted = "Upcomming",
                                                    {
                                                        isCompleted: "Inprogress1",
                                                        AstatusUpdate: 0
                                                    }
                                                );
                                      //for updating status of bank assessment
                                    UpdateIf(
                                                    GC_bankAssessment,
                                                    assignmentId.Id = varAssignmentId && bankId.Id = VarBankId && Assessment_Status = "Upcomming",
                                                    {
                                                        Assessment_Status: "Inprogress",
                                                        BstatusUpdate: 0
                                                    }
                                                );
                                                
                                    //for updating status of unit assessment
                                    UpdateIf(
                                                    GC_unitAssessment,
                                                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId,
                                             //&& Assessment_status ="Upcomming",
                                                    {
                                                        Assessment_status: "Inprogress",
                                                        UstatusUpdate: 0
                                                    }
                                                );
                                        //for updating status of section assessment to 0 for save status
                                    UpdateIf(
                                                    GcSectionAssessment,
                                                    'sectionAssessment (quantum_sectionassessment)' = varSA,
                                                    {SstatusUpdate: 0}
                                                );
                                     //for updating status of checkpoint assessment to 0 for save status
                                    UpdateIf(
                                                    GcCheckpointAssessment,
                                                    checkpointAssessment_id = GuidId,
                                                    {CstatusUpdate: 0}
                                                );
                                                
                                    //for checkpoint  Item annotation - checkpoint Item Assessment
                                    //record exist then update that record using update if function
                                    UpdateIf(
                                                    GC_checkpointItemAssessment,
                                                    'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA,
                                                    {
                                                        checkpointItem_annotation: txtAnnotationFS.Text,
                                                        assessmentStatus: If(
                                                            LookUp(
                                                                GC_checkpointItemAssessment,
                                                                'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA,
                                                                assessmentStatus
                                                            ) = "Check",
                                                            "Check",
                                                            "Uncheck"
                                                        ),
                                                        CIstatusUpdate: 0
                                                    }
                                                );
                                             //Notify("update action"& CountRows(GC_checkpointItem_ActionItem));
                                    //For checkpointitem action item
                                    ForAll(
                                                    GlryActionItemFS.AllItems As a,
                                                    UpdateIf(
                                                        GC_checkpointItem_ActionItem,
                                                        checkpointItemActionItemsId = a.checkpointItemActionItemsId,
                                                        {
                                                            ActionItem_Name: If(
                                                                IsBlank(a.TextInput8.Text),
                                                                a.ComboBox1_2.Selected.actionItemName,
                                                                a.TextInput8.Text
                                                            ),
                                                            priority: a.Dropdown5_11.Selected.Value,
                                                            OwnerId: a.Dropdown5_12.Selected.Value,
                                                            TimeEstimate: a.TextInput5_10.Text,
                                                            MaterialEstimate: a.TextInput5_11.Text,
                                                            Action_status: "Open",
                                                            CIAstatusUpdate: 0,
                                                            ActionSortSequence: LookUp(
                                                                GC_templateSections,
                                                                sectionId = VarSectionId,
                                                                sectionSequence
                                                            ) & LookUp(
                                                                GC_templateCheckpoints,
                                                                checkpointId = ChId,
                                                                checkpointSequence
                                                            ) & LookUp(
                                                                GC_templateCheckpointsItem,
                                                                checkpointItemId = varCheckpointitemID,
                                                                checkpointItemSequence
                                                            )
                                                        }
                                                    );
                                                );
                                         // Notify("update images"& CountRows(GC_checkpointItem_Images));      
                                    //for checkpoint image 
                                    If(
                                                    VarImageIsDownloaded = true,
                                                    ForAll(
                                                        GlryImagesFS.AllItems As i,
                                                        UpdateIf(
                                                            GC_checkpointItem_Images,
                                                            checkpointItemImagesId = i.checkpointItemImagesId,
                                                            {
                                                                Image: i.Image9_2.Image,
                                                                image_annotation: i.TextInput6_2.Text,
                                                                CIIstatusUpdate: 0,
                                                                ImageSortSequence: LookUp(
                                                                    GC_templateSections,
                                                                    sectionId = VarSectionId,
                                                                    sectionSequence
                                                                ) & LookUp(
                                                                    GC_templateCheckpoints,
                                                                    checkpointId = ChId,
                                                                    checkpointSequence
                                                                ) & LookUp(
                                                                    GC_templateCheckpointsItem,
                                                                    checkpointItemId = varCheckpointitemID,
                                                                    checkpointItemSequence
                                                                )
                                                            }
                                                        )
                                                    );
                                                );
                                                Set(
                                                    popupsuccess1,
                                                    true
                                                );
                                            );
                                        );
                                        
                                    );
                                    //Notify("saving data to local cache");
                                    //************************************
                                    // savedata from collections to local cache .
                                    SaveData(
                                        gcProjectAssignment,
                                        "localprojectassignment"
                                    );
                                    SaveData(
                                        GC_bankAssessment,
                                        "localbankassessment"
                                    );
                                    SaveData(
                                        GC_unitAssessment,
                                        "localunitassessment"
                                    );
                                    ClearCollect(
                                        GcSectionAssessmentCache,
                                        Filter(
                                            GcSectionAssessment,
                                            SstatusUpdate = 0 || SstatusUpdate = 1
                                        )
                                    );
                                         //update 
                                    ForAll(
                                        GcSectionAssessmentCache1 As i,
                                        If(
                                            IsBlank(
                                                LookUp(
                                                    GcSectionAssessmentCache,
                                                    'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                )
                                            ),
                                            Patch(
                                                GcSectionAssessmentCache,
                                                Defaults(GcSectionAssessmentCache),
                                                {
                                                    'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                                    'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                                    assignmentId: i.assignmentId,
                                                    bankUnitId: i.bankUnitId,
                                                    product_id: i.product_id,
                                                    sectionId: i.sectionId,
                                                    sectionName: i.sectionName,
                                                    AssessmentStatus: i.AssessmentStatus,
                                                    SstatusUpdate: i.SstatusUpdate,
                                                    sectionSequence: i.sectionSequence,
                                                    sectionComment: i.sectionComment
                                                }
                                            );
                                            ,
                                            Patch(
                                                GcSectionAssessmentCache,
                                                LookUp(
                                                    GcSectionAssessmentCache,
                                                    'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                ),
                                                {
                                                    'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                                    'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                                    assignmentId: i.assignmentId,
                                                    bankUnitId: i.bankUnitId,
                                                    product_id: i.product_id,
                                                    sectionId: i.sectionId,
                                                    sectionName: i.sectionName,
                                                    AssessmentStatus: i.AssessmentStatus,
                                                    SstatusUpdate: i.SstatusUpdate,
                                                    sectionSequence: i.sectionSequence,
                                                    sectionComment: i.sectionComment
                                                }
                                            );
                                        );
                                        //if
                                    );
                                    //forall
                                    SaveData(
                                        GcSectionAssessmentCache,
                                        "localsectionassessment"
                                    );
                                    ClearCollect(
                                        GcCheckpointAssessmentCache,
                                        Filter(
                                            GcCheckpointAssessment,
                                            CstatusUpdate = 0 || CstatusUpdate = 1
                                        )
                                    );
                                         //update
                                    ForAll(
                                        GcCheckpointAssessmentCache1 As i,
                                        If(
                                            IsBlank(
                                                LookUp(
                                                    GcCheckpointAssessmentCache,
                                                    checkpointAssessment_id = i.checkpointAssessment_id
                                                )
                                            ),
                                            Patch(
                                                GcCheckpointAssessmentCache,
                                                Defaults(GcCheckpointAssessmentCache),
                                                {
                                                    checkpointAssessment: i.checkpointAssessment,
                                                    checkpointAssessment_id: i.checkpointAssessment_id,
                                                    assignmentId: i.assignmentId,
                                                    bankUnitId: i.bankUnitId,
                                                    product_id: i.product_id,
                                                    sectionId: i.sectionId,
                                                    checkpointId: i.checkpointId,
                                                    checkpointName: i.checkpointName,
                                                    AssessmentStatus: i.AssessmentStatus,
                                                    CstatusUpdate: i.CstatusUpdate,
                                                    CheckpointSequence: i.CheckpointSequence,
                                                    checkpointComment: i.checkpointComment
                                                }
                                            );
                                            ,
                                            Patch(
                                                GcCheckpointAssessmentCache,
                                                LookUp(
                                                    GcCheckpointAssessmentCache,
                                                    checkpointAssessment_id = i.checkpointAssessment_id
                                                ),
                                                {
                                                    checkpointAssessment: i.checkpointAssessment,
                                                    checkpointAssessment_id: i.checkpointAssessment_id,
                                                    assignmentId: i.assignmentId,
                                                    bankUnitId: i.bankUnitId,
                                                    product_id: i.product_id,
                                                    sectionId: i.sectionId,
                                                    checkpointId: i.checkpointId,
                                                    checkpointName: i.checkpointName,
                                                    AssessmentStatus: i.AssessmentStatus,
                                                    CstatusUpdate: i.CstatusUpdate,
                                                    CheckpointSequence: i.CheckpointSequence,
                                                    checkpointComment: i.checkpointComment
                                                }
                                            );
                                        );
                                        //if
                                    );
                                    //forall
                                    SaveData(
                                        GcCheckpointAssessmentCache,
                                        "localcheckpointassessment"
                                    );
                                    ClearCollect(
                                        GC_checkpointItemAssessmentCache,
                                        Filter(
                                            GC_checkpointItemAssessment,
                                            CIstatusUpdate = 0 || CIstatusUpdate = 1
                                        )
                                    );
                                        //update
                                    ForAll(
                                        GC_checkpointItemAssessmentCache1 As i,
                                        If(
                                            IsBlank(
                                                LookUp(
                                                    GC_checkpointItemAssessmentCache,
                                                    'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                                )
                                            ),
                                            Patch(
                                                GC_checkpointItemAssessmentCache,
                                                Defaults(GC_checkpointItemAssessmentCache),
                                                {
                                                    'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                                    'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                    checkpointAssessment_Id: i.checkpointAssessment_Id,
                                                    assignmentId: i.assignmentId,
                                                    bankUnitId: i.bankUnitId,
                                                    product_id: i.product_id,
                                                    section_Id: i.section_Id,
                                                    checkpointItem_annotation: i.checkpointItem_annotation,
                                                    checkpointItemId: i.checkpointItemId,
                                                    checkpointItemName: i.checkpointItemName,
                                                    assessmentStatus: i.assessmentStatus,
                                                    CIstatusUpdate: i.CIstatusUpdate,
                                                    checkpointitemSequence: i.checkpointitemSequence,
                                                    checkpointItemComment: i.checkpointItemComment
                                                }
                                            );
                                            ,
                                            Patch(
                                                GC_checkpointItemAssessmentCache,
                                                LookUp(
                                                    GC_checkpointItemAssessmentCache,
                                                    'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                                ),
                                                {
                                                    'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                                    'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                    checkpointAssessment_Id: i.checkpointAssessment_Id,
                                                    assignmentId: i.assignmentId,
                                                    bankUnitId: i.bankUnitId,
                                                    product_id: i.product_id,
                                                    section_Id: i.section_Id,
                                                    checkpointItem_annotation: i.checkpointItem_annotation,
                                                    checkpointItemId: i.checkpointItemId,
                                                    checkpointItemName: i.checkpointItemName,
                                                    assessmentStatus: i.assessmentStatus,
                                                    CIstatusUpdate: i.CIstatusUpdate,
                                                    checkpointitemSequence: i.checkpointitemSequence,
                                                    checkpointItemComment: i.checkpointItemComment
                                                }
                                            );
                                        );
                                        //if
                                    );
                                    //forall
                                    SaveData(
                                        GC_checkpointItemAssessmentCache,
                                        "localcheckpointitemassessment"
                                    );
                                    ClearCollect(
                                        GC_checkpointItem_ActionItemCache,
                                        Filter(
                                            GC_checkpointItem_ActionItem,
                                            CIAstatusUpdate = 0 || CIAstatusUpdate = 1
                                        )
                                    );
                                    ForAll(
                                        GC_checkpointItem_ActionItemCache1 As i,
                                        If(
                                            IsBlank(
                                                LookUp(
                                                    GC_checkpointItem_ActionItemCache,
                                                    checkpointItemActionItemsId = i.checkpointItemActionItemsId
                                                )
                                            ),
                                            Patch(
                                                GC_checkpointItem_ActionItemCache,
                                                Defaults(GC_checkpointItem_ActionItemCache),
                                                {
                                                    checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                                    checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                                    ActionItem_Name: i.ActionItem_Name,
                                                    assignmentId: i.assignmentId,
                                                    bankId: i.bankId,
                                                    bankUnitId: i.bankUnitId,
                                                    section_id: i.section_id,
                                                    checkpoint_id: i.checkpoint_id,
                                                    checkpointItem_Id: i.checkpointItem_Id,
                                                    product_id: i.product_id,
                                                    priority: i.priority,
                                                    OwnerId: i.OwnerId,
                                                    TimeEstimate: i.TimeEstimate,
                                                    MaterialEstimate: i.MaterialEstimate,
                                                    CIAstatusUpdate: i.CIAstatusUpdate,
                                                    Action_status: i.Action_status
                                                }
                                            );
                                            ,
                                            Patch(
                                                GC_checkpointItem_ActionItemCache,
                                                LookUp(
                                                    GC_checkpointItem_ActionItemCache,
                                                    checkpointItemActionItemsId = i.checkpointItemActionItemsId
                                                ),
                                                {
                                                    checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                                    checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                                    ActionItem_Name: i.ActionItem_Name,
                                                    assignmentId: i.assignmentId,
                                                    bankId: i.bankId,
                                                    bankUnitId: i.bankUnitId,
                                                    section_id: i.section_id,
                                                    checkpoint_id: i.checkpoint_id,
                                                    checkpointItem_Id: i.checkpointItem_Id,
                                                    product_id: i.product_id,
                                                    priority: i.priority,
                                                    OwnerId: i.OwnerId,
                                                    TimeEstimate: i.TimeEstimate,
                                                    MaterialEstimate: i.MaterialEstimate,
                                                    CIAstatusUpdate: i.CIAstatusUpdate,
                                                    Action_status: i.Action_status
                                                }
                                            );
                                        );
                                        //if
                                    );
                                    //forall
                                    SaveData(
                                        GC_checkpointItem_ActionItemCache,
                                        "localcheckpointitemactionitem"
                                    );
                                    ClearCollect(
                                        GC_checkpointItem_ImagesCache,
                                        Filter(
                                            GC_checkpointItem_Images,
                                            CIIstatusUpdate = 0 || CIIstatusUpdate = 1
                                        )
                                    );
                                    ForAll(
                                        GC_checkpointItem_ImagesCache1 As i,
                                        If(
                                            IsBlank(
                                                LookUp(
                                                    GC_checkpointItem_ImagesCache,
                                                    checkpointItemImagesId = i.checkpointItemImagesId
                                                )
                                            ),
                                            Patch(
                                                GC_checkpointItem_ImagesCache,
                                                Defaults(GC_checkpointItem_ImagesCache),
                                                {
                                                    checkpointItem_Images: i.checkpointItem_Images,
                                                    checkpointItemImagesId: i.checkpointItemImagesId,
                                                    assignmentId: i.assignmentId,
                                                    bankUnitId: i.bankUnitId,
                                                    section_id: i.section_id,
                                                    checkpoint_id: i.checkpoint_id,
                                                    checkpointItem_Id: i.checkpointItem_Id,
                                                    product_id: i.product_id,
                                                    // Image:Image14_2.Image,
                                                    Image: i.Image,
                                                    image_annotation: i.image_annotation,
                                                    CIIstatusUpdate: i.CIIstatusUpdate
                                                }
                                            );
                                            ,
                                            Patch(
                                                GC_checkpointItem_ImagesCache,
                                                LookUp(
                                                    GC_checkpointItem_ImagesCache,
                                                    checkpointItemImagesId = i.checkpointItemImagesId
                                                ),
                                                {
                                                    checkpointItem_Images: i.checkpointItem_Images,
                                                    checkpointItemImagesId: i.checkpointItemImagesId,
                                                    assignmentId: i.assignmentId,
                                                    bankUnitId: i.bankUnitId,
                                                    section_id: i.section_id,
                                                    checkpoint_id: i.checkpoint_id,
                                                    checkpointItem_Id: i.checkpointItem_Id,
                                                    product_id: i.product_id,
                                                    // Image:Image14_2.Image,
                                                    Image: i.Image,
                                                    image_annotation: i.image_annotation,
                                                    CIIstatusUpdate: i.CIIstatusUpdate
                                                }
                                            );
                                        );
                                        //if
                                    );
                                    //forall
                                    SaveData(
                                        GC_checkpointItem_ImagesCache,
                                        "localcheckpointitemimage"
                                    );
                                    //Notify("save end");
                                    //for Logs
                                    UpdateIf(
                                        GcTraceLog,
                                        VarDebug = true,
                                        {
                                            Path: First(GcTraceLog).Path & "/SaveEnd=" & Text(
                                                Now(),
                                                "mm-dd-yy hh:mm:ss am/pm"
                                            )
                                        }
                                    );
                                    SaveData(
                                        GcTraceLog,
                                        "localGcTraceLog"
                                    );
                                PressedFill: =AllScreensCSS.RActiveColor
                                Text: ="Save "
                                Width: =180
                                Y: =btnAddImageFS.Height+btnAddImageFS.Y+50
                                ZIndex: =1

                            btnExitSave As button:
                                BorderThickness: =0
                                Fill: =AllScreensCSS.RActiveColor
                                FocusedBorderThickness: =0
                                HoverFill: |-
                                    =Self.Fill
                                    //ColorFade(RGBA(56, 96, 178, 1), -20%)
                                OnSelect: |-
                                    =
                                    Set(VarPopUpExitApp,true);
                                PaddingBottom: =2
                                PaddingTop: =2
                                PressedColor: =Self.Color
                                PressedFill: =Self.Fill
                                Text: ="Exit App"
                                Visible: =false
                                Width: =180
                                ZIndex: =2

    grsafetyHeader As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =13

        Rectangle1_12 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =safetyPopup = true
            Width: =Parent.Width
            ZIndex: =3

        Rectangle2_12 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =250
            Visible: =safetyPopup = true
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =4

        Image2_24 As image:
            Height: =64
            Image: =safety_pageImage
            Visible: =safetyPopup = true
            Width: =64
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_12.Y+20
            ZIndex: =5

        Label2_14 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            Height: =90
            PaddingLeft: =15
            PaddingRight: =15
            Size: =14
            Text: ="Since you are idle for more than 30 minutes you need to perform safety check again before resuming the assessment."
            Visible: =safetyPopup = true
            Width: =324
            X: =(Parent.Width-Self.Width)/2
            Y: |-
                =//Label1_22.Y+ Self.Height+5
                Image2_24.Y+Image2_24.Height-5
            ZIndex: =6

        btnSuccess_7 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |-
                =Set(safetyPopup ,false);
                Navigate(ProjectScreen);
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =safetyPopup = true
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =Label2_14.Y+ Label2_14.Height+20
            ZIndex: =7

    grPopupSuccessSave As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =19

        Rectangle1_9 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =popupsuccess1=true
            Width: =Parent.Width
            ZIndex: =8

        Rectangle2_9 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =280
            Visible: =popupsuccess1=true
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =9

        Image2_21 As image:
            Height: =52
            Image: =Group
            Visible: =popupsuccess1=true
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_9.Y+20
            ZIndex: =10

        Label1_21 As label:
            Align: =Align.Center
            Color: =RGBA(14, 161, 26, 1)
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Size: =18
            Text: ="Success"
            Visible: =popupsuccess1=true
            Width: =324
            X: =(Parent.Width-Self.Width)/2
            Y: =Image2_21.Y+Self.Height+10
            ZIndex: =11

        Label2_11 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =100
            Size: =15
            Text: |
                ="Assessment findings saved locally. It will be submitted for review once submit button is clicked."
            Visible: =popupsuccess1=true
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Label1_21.Y+ Label1_21.Height+2
            ZIndex: =12

        btnSuccess_4 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |
                =Set(
                    popupsuccess1,
                    false
                );
                Navigate(AssessmentScreen);
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =popupsuccess1=true
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =Label2_11.Y+ Label2_11.Height+10
            ZIndex: =13

    grCloseActionConfirmation As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        Rectangle1_10 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =PopupCloseAction
            Width: =Parent.Width
            ZIndex: =24

        Rectangle2_10 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =280
            Visible: =PopupCloseAction
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =25

        Image2_22 As image:
            Height: =52
            Image: =info
            Visible: =PopupCloseAction
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_10.Y+20
            ZIndex: =26

        Label2_12 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =100
            Size: =15
            Text: ="Do you want to close this action?"
            Visible: =PopupCloseAction
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Image2_22.Y+ Image2_22.Height+2
            ZIndex: =28

        btnSuccess_5 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |
                =//for Logs
                UpdateIf(
                    GcTraceLog,
                    VarDebug = true,
                    {
                        Path: First(GcTraceLog).Path & "/ClosePrevAction=" & Text(
                            Now(),
                            "mm-dd-yy hh:mm:ss am/pm"
                        )
                    }
                );
                /*SaveData(
                    GcTraceLog,
                    "localGcTraceLog"
                );*/
                //Set(C, false );
                //Set(P, true );
                Set(
                    VarPrevNav,
                    false
                );
                Set(
                    PopupCloseAction,
                    false
                );
                UpdateIf(
                    GC_checkpointItem_ActionItem,
                    checkpointItemActionItemsId = SelectedcheckpointItemActionItemsId,
                    {
                        Action_status: "Close",
                        CIAstatusUpdate: 1
                    }
                );
                Navigate(FindingScreen);
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =PopupCloseAction
            Width: =120
            X: =(Parent.Width-Self.Width)/2.3
            Y: =Label2_12.Y+ Label2_12.Height+10
            ZIndex: =29

        btnSuccess_8 As button:
            BorderColor: =RGBA(75, 125, 6, 1)
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverBorderColor: =RGBA(75, 125, 6, 1)
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |-
                =//Set(C, false );
                Set(PopupCloseAction, false );
                //Set(P, true );
                Set(VarPrevNav, false );
                Navigate(FindingScreen);
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Cancel"
            Visible: =PopupCloseAction
            Width: =120
            X: =btnSuccess_5.X+btnSuccess_5.Width+20
            Y: =Label2_12.Y+ Label2_12.Height+10
            ZIndex: =30

    grPopupImageExceed As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =37

        Rectangle1_17 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =VarImagesExceedPopup
            Width: =Parent.Width
            ZIndex: =31

        Rectangle2_13 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =280
            Visible: =VarImagesExceedPopup
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =32

        Image2_30 As image:
            Height: =52
            Image: =info
            Visible: =VarImagesExceedPopup
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_13.Y+20
            ZIndex: =33

        Label1_22 As label:
            Align: =Align.Center
            Color: =AllScreensCSS.RActiveColor
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Size: =18
            Text: ="Info"
            Visible: =VarImagesExceedPopup
            Width: =324
            X: =(Parent.Width-Self.Width)/2
            Y: =Image2_30.Y+Image2_30.Height
            ZIndex: =34

        Label2_15 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =100
            Size: =15
            Text: =VarImagesExceedPopupText
            Visible: =VarImagesExceedPopup
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Label1_22.Y+ Label1_22.Height
            ZIndex: =35

        btnSuccess_10 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |
                =Set(
                     VarImagesExceedPopup,
                    false
                );
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =VarImagesExceedPopup
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =Label2_15.Y+ Label2_15.Height+10
            ZIndex: =36

    Grp_exit_2 As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =43

        Rectangle1_20 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =VarPopUpExitApp
            Width: =Parent.Width
            ZIndex: =37

        Rectangle2_17 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =280
            Visible: =VarPopUpExitApp
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =38

        Image2_29 As image:
            Height: =52
            Image: =info
            Visible: =VarPopUpExitApp
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_17.Y+20
            ZIndex: =39

        Label2_19 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =100
            Size: =15
            Text: ="Are you sure you want to exit ?"
            Visible: =VarPopUpExitApp
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Image2_29.Y+ Image2_29.Height+2
            ZIndex: =40

        btnExitOk_2 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |-
                =/*Set(VarPopUpExitApp,false);
                Set(varloader,true);
                SaveData(
                    gcProjectAssignment,
                    "localprojectassignment"
                );
                SaveData(
                    GC_bankAssessment,
                    "localbankassessment"
                );
                SaveData(
                    GC_unitAssessment,
                    "localunitassessment"
                );
                SaveData(
                    GcSectionAssessment,
                    "localsectionassessment"
                );
                SaveData(
                    GcCheckpointAssessment,
                    "localcheckpointassessment"
                );
                SaveData(
                    GC_checkpointItemAssessment,
                    "localcheckpointitemassessment"
                );
                SaveData(
                    GC_checkpointItem_ActionItem,
                    "localcheckpointitemactionitem"
                );
                SaveData(
                    GC_checkpointItem_Images,
                    "localcheckpointitemimage"
                );
                SaveData(
                    gcActionItemDelete,
                    "localgcActionItemDelete"
                );
                SaveData(
                    gcImageDelete,
                    "localgcImageDelete"
                );
                Set(varloader,false);
                Exit()*/
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =VarPopUpExitApp
            Width: =120
            X: =(Parent.Width-Self.Width)/2.3
            Y: =Label2_19.Y+ Label2_19.Height+10
            ZIndex: =41

        btnSuccess_14 As button:
            BorderColor: =RGBA(75, 125, 6, 1)
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverBorderColor: =RGBA(75, 125, 6, 1)
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: =Set(VarPopUpExitApp,false);
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Cancel"
            Visible: =VarPopUpExitApp
            Width: =120
            X: =btnExitOk_2.X+btnExitOk_2.Width+20
            Y: =Label2_19.Y+ Label2_19.Height+10
            ZIndex: =42

    grExitAppLoadder_2 As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =48

        iconOuterRectangleBS_4 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =varloader
            Width: =Parent.Width
            ZIndex: =43

        iconInnerRectangleBS_4 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =270
            Visible: =varloader
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =44

        imgloaderBS_4 As image:
            Height: =52
            Image: ='ajax-loader 2'
            Visible: =varloader
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =iconInnerRectangleBS_4.Y+20
            ZIndex: =45

        lblSyncSuccessPatchBS_4 As label:
            Align: =Align.Center
            Color: =RGBA(14, 161, 26, 1)
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            PaddingBottom: =0
            Size: =18
            Text: ="Saving..."
            Visible: =varloader
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =imgloaderBS_4.Y+imgloaderBS_4.Height+10
            ZIndex: =46

        lblsyncSuccessBS_4 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Semibold
            Height: =140
            Size: =15
            Text: ="Saving data to your device cache. Please do not kill the App."
            VerticalAlign: =VerticalAlign.Top
            Visible: =varloader
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =lblSyncSuccessPatchBS_4.Y+lblSyncSuccessPatchBS_4.Height+10
            ZIndex: =47

    grPopupDownloadImagesRestrict As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =54

        Rectangle1_21 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =VarDownloadImagesRestrict
            Width: =Parent.Width
            ZIndex: =48

        Rectangle2_18 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =280
            Visible: =VarDownloadImagesRestrict
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =49

        Image2_31 As image:
            Height: =52
            Image: =info 
            Visible: =VarDownloadImagesRestrict
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_18.Y+20
            ZIndex: =50

        Label1_24 As label:
            Align: =Align.Center
            Color: =AllScreensCSS.RActiveColor
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Size: =18
            Text: ="Info"
            Visible: =VarDownloadImagesRestrict
            Width: =324
            X: =(Parent.Width-Self.Width)/2
            Y: =Image2_31.Y+Image2_31.Height
            ZIndex: =51

        Label2_20 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =100
            Size: =15
            Text: ="You have to download images first, then you can Add/delete it ."
            Visible: =VarDownloadImagesRestrict
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Label1_24.Y+ Label1_24.Height
            ZIndex: =52

        btnSuccess_11 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |
                =Set(
                     VarDownloadImagesRestrict,
                    false
                );
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =VarDownloadImagesRestrict
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =Label2_20.Y+ Label2_20.Height+10
            ZIndex: =53

    Grp_MemoryPressure_Confirmation_1 As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =60

        Rectangle1_29 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =VarMemoryPressurePopup || VarMemoryPressurePopup1
            Width: =Parent.Width
            ZIndex: =54

        Rectangle2_26 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =280
            Visible: =VarMemoryPressurePopup || VarMemoryPressurePopup1
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =55

        Image2_49 As image:
            Height: =52
            Image: =info
            Visible: =VarMemoryPressurePopup || VarMemoryPressurePopup1
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_26.Y+20
            ZIndex: =56

        Label2_28 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =100
            Size: =15
            Text: =VarMemoryPressurePopupMessage
            Visible: =VarMemoryPressurePopup || VarMemoryPressurePopup1
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Image2_49.Y+ Image2_49.Height+2
            ZIndex: =57

        btnExitOk_5 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |-
                =//for Logs
                UpdateIf(
                    GcTraceLog,
                    VarDebug = true,
                    {
                        Path: First(GcTraceLog).Path & "/UExit:" & glryUnitBS.Selected.bankUnitId.unitNumber & "=" & Text(
                            Now(),
                            "mm-dd-yy hh:mm:ss am/pm"
                        )
                    }
                );
                Set(VarMemoryPressurePopup,false);
                Set(VarMemoryPressurePopup1,false);
                //Exit();
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =VarMemoryPressurePopup || VarMemoryPressurePopup1
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =Label2_28.Y+ Label2_28.Height+10
            ZIndex: =58

        btnSuccess_23 As button:
            BorderColor: =RGBA(75, 125, 6, 1)
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverBorderColor: =RGBA(75, 125, 6, 1)
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |-
                =//for Logs
                UpdateIf(
                    GcTraceLog,
                    VarDebug = true,
                    {
                        Path: First(GcTraceLog).Path & "/UStart:" & glryUnitBS.Selected.bankUnitId.unitNumber & "=" & Text(
                            Now(),
                            "mm-dd-yy hh:mm:ss am/pm"
                        )
                    }
                );
                Set(VarMemoryPressurePopup,false);
                Set(VarMemoryPressurePopup1,false);
                //for safety check to show default selected
                Set(
                    varSpinner,
                    true
                );
                Set(
                    varSafety,
                    false
                );
                //here set variable for selected product model.
                Set(
                    CId,
                    glryUnitBS.Selected.productModel
                );
                //set variable for selected bankunitId.
                Set(
                    varBankUnitId,
                    glryUnitBS.Selected.bankUnitId.Id);
                //set variable for selected unit number.
                Set(
                    VarCurrentUnitNumber,
                    glryUnitBS.Selected.bankUnitId.unitNumber
                );
                If(
                    IsEmpty(GcSectionAssessmentCache) && IsEmpty(GcCheckpointAssessmentCache) && IsEmpty(GC_checkpointItemAssessmentCache) && IsEmpty(GC_checkpointItem_ActionItemCache) && IsEmpty(GC_checkpointItem_ImagesCache),
                    Concurrent(
                        LoadData(
                            GcSectionAssessmentCache,
                            "localsectionassessment",
                            true
                        );
                        ClearCollect(
                            GcSectionAssessmentCache1,
                            GcSectionAssessmentCache
                        );
                        ,
                        LoadData(
                            GcCheckpointAssessmentCache,
                            "localcheckpointassessment",
                            true
                        );
                        ClearCollect(
                            GcCheckpointAssessmentCache1,
                            GcCheckpointAssessmentCache
                        );
                        ,
                        LoadData(
                            GC_checkpointItemAssessmentCache,
                            "localcheckpointitemassessment",
                            true
                        );
                        ClearCollect(
                            GC_checkpointItemAssessmentCache1,
                            GC_checkpointItemAssessmentCache
                        );
                        ,
                        LoadData(
                            GC_checkpointItem_ActionItemCache,
                            "localcheckpointitemactionitem",
                            true
                        );
                        ClearCollect(
                            GC_checkpointItem_ActionItemCache1,
                            GC_checkpointItem_ActionItemCache
                        );
                        ,
                        LoadData(
                            GC_checkpointItem_ImagesCache,
                            "localcheckpointitemimage",
                            true
                        );
                        ClearCollect(
                            GC_checkpointItem_ImagesCache1,
                            GC_checkpointItem_ImagesCache
                        );
                    );
                    
                );
                //Here we check if network is available or not, if available then check collection is empty or not ,if collection is empty then get specific assessor data from dataverse and store it into collection and save collection to cache
                If(
                    Connection.Connected,
                    Concurrent(
                        //Section assessment transaction data
                        If(
                            IsEmpty(GcSectionAssessment),
                            ClearCollect(
                                GcSectionAssessmentAdd,
                                Filter(
                                    sectionAssessment,
                                    bankUnitId.Id = varBankUnitId
                                )
                            );
                           //Adding column for status maintain
                ClearCollect(
                                GcSectionAssessment,
                                AddColumns(
                                    GcSectionAssessmentAdd,
                                    "SstatusUpdate",
                                    2
                                )
                            );
                          //Update to local
                ForAll(
                                Filter(
                                    GcSectionAssessmentCache1,
                                    bankUnitId.Id = varBankUnitId
                                ) As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GcSectionAssessment,
                                            'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                        )
                                    ),
                                    Patch(
                                        GcSectionAssessment,
                                        Defaults(GcSectionAssessment),
                                        {
                                            'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                            'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            sectionName: i.sectionName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            SstatusUpdate: i.SstatusUpdate,
                                            sectionSequence: i.sectionSequence,
                                            sectionComment: i.sectionComment
                                        }
                                    );
                                    ,
                                    Patch(
                                        GcSectionAssessment,
                                        LookUp(
                                            GcSectionAssessment,
                                            'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                        ),
                                        {
                                            'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                            'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            sectionName: i.sectionName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            SstatusUpdate: i.SstatusUpdate,
                                            sectionSequence: i.sectionSequence,
                                            sectionComment: i.sectionComment
                
                                        }
                                    );
                                );
                                //if
                            );
                            //forall
                RemoveIf(
                                GcSectionAssessmentCache1,
                                bankUnitId.Id = varBankUnitId
                            );
                            ,
                            If(
                                CountRows(
                                    Filter(
                                        GcSectionAssessment,
                                        bankUnitId.Id = varBankUnitId
                                    )
                                ) < 1,
                                ClearCollect(
                                    GcSectionAssessmentTemp,
                                    Filter(
                                        sectionAssessment,
                                    //assignmentId.assessorId = varLoggedAssessor
                                        bankUnitId.Id = varBankUnitId
                                    )
                                );
                                ForAll(
                                    GcSectionAssessmentTemp As i,
                                    Patch(
                                        GcSectionAssessment,
                                        Defaults(GcSectionAssessment),
                                        {
                                            'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                            'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            sectionName: i.sectionName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            SstatusUpdate: 2,
                                            sectionSequence: i.sectionSequence,
                                            sectionComment: i.sectionComment
                                        }
                                    )
                                );
                         /// update local data
                ForAll(
                                    Filter(
                                        GcSectionAssessmentCache1,
                                        bankUnitId.Id = varBankUnitId
                                    ) As i,
                                    If(
                                        IsBlank(
                                            LookUp(
                                                GcSectionAssessment,
                                                'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                            )
                                        ),
                                        Patch(
                                            GcSectionAssessment,
                                            Defaults(GcSectionAssessment),
                                            {
                                                'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                                'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                                assignmentId: i.assignmentId,
                                                bankUnitId: i.bankUnitId,
                                                product_id: i.product_id,
                                                sectionId: i.sectionId,
                                                sectionName: i.sectionName,
                                                AssessmentStatus: i.AssessmentStatus,
                                                SstatusUpdate: i.SstatusUpdate,
                                                sectionSequence: i.sectionSequence,
                                                sectionComment: i.sectionComment
                                            }
                                        );
                                        ,
                                        Patch(
                                            GcSectionAssessment,
                                            LookUp(
                                                GcSectionAssessment,
                                                'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                            ),
                                            {
                                                'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                                'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                                assignmentId: i.assignmentId,
                                                bankUnitId: i.bankUnitId,
                                                product_id: i.product_id,
                                                sectionId: i.sectionId,
                                                sectionName: i.sectionName,
                                                AssessmentStatus: i.AssessmentStatus,
                                                SstatusUpdate: i.SstatusUpdate,
                                                sectionSequence: i.sectionSequence,
                                                sectionComment: i.sectionComment
                                            }
                                        );
                                    );
                                    //if
                                );
                                //forall
                RemoveIf(
                                    GcSectionAssessmentCache1,
                                    bankUnitId.Id = varBankUnitId
                                );
                            );
                        );
                        ,
                        //Checkpoint assessment transaction data
                        If(
                            IsEmpty(GcCheckpointAssessment),
                            ClearCollect(
                                GcCheckpointAssessmentAdd,
                                Filter(
                                    checkpointAssessment,
                                    bankUnitId.Id = varBankUnitId
                                )
                            );
                                //Adding column for status maintain
                ClearCollect(
                                GcCheckpointAssessment,
                                AddColumns(
                                    GcCheckpointAssessmentAdd,
                                    "CstatusUpdate",
                                    2
                                )
                            );
                           //update local data
                ForAll(
                                Filter(
                                    GcCheckpointAssessmentCache1,
                                    bankUnitId.Id = varBankUnitId
                                ) As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GcCheckpointAssessment,
                                            checkpointAssessment_id = i.checkpointAssessment_id
                                        )
                                    ),
                                    Patch(
                                        GcCheckpointAssessment,
                                        Defaults(GcCheckpointAssessment),
                                        {
                                            checkpointAssessment: i.checkpointAssessment,
                                            checkpointAssessment_id: i.checkpointAssessment_id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            checkpointId: i.checkpointId,
                                            checkpointName: i.checkpointName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            CstatusUpdate: i.CstatusUpdate,
                                            CheckpointSequence: i.CheckpointSequence,
                                            checkpointComment: i.checkpointComment
                                        }
                                    );
                                    ,
                                    Patch(
                                        GcCheckpointAssessment,
                                        LookUp(
                                            GcCheckpointAssessment,
                                            checkpointAssessment_id = i.checkpointAssessment_id
                                        ),
                                        {
                                            checkpointAssessment: i.checkpointAssessment,
                                            checkpointAssessment_id: i.checkpointAssessment_id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            checkpointId: i.checkpointId,
                                            checkpointName: i.checkpointName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            CstatusUpdate: i.CstatusUpdate,
                                            CheckpointSequence: i.CheckpointSequence,
                                            checkpointComment: i.checkpointComment
                                        }
                                    );
                                );
                                //if
                            );
                            //forall
                RemoveIf(
                                GcCheckpointAssessmentCache1,
                                bankUnitId.Id = varBankUnitId
                            );
                            ,
                            If(
                                CountRows(
                                    Filter(
                                        GcCheckpointAssessment,
                                        bankUnitId.Id = varBankUnitId
                                    )
                                ) < 1,
                                ClearCollect(
                                    GcCheckpointAssessmentTemp,
                                    Filter(
                                        checkpointAssessment,
                                        bankUnitId.Id = varBankUnitId
                                    )
                                );
                                ForAll(
                                    GcCheckpointAssessmentTemp As i,
                                    Patch(
                                        GcCheckpointAssessment,
                                        Defaults(GcCheckpointAssessment),
                                        {
                                            checkpointAssessment: i.checkpointAssessment,
                                            checkpointAssessment_id: i.checkpointAssessment_id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            checkpointId: i.checkpointId,
                                            checkpointName: i.checkpointName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            CstatusUpdate: 2,
                                            CheckpointSequence: i.CheckpointSequence,
                                            checkpointComment: i.checkpointComment
                                        }
                                    );
                                );
                                //update local data
                ForAll(
                                    Filter(
                                        GcCheckpointAssessmentCache1,
                                        bankUnitId.Id = varBankUnitId
                                    ) As i,
                                    If(
                                        IsBlank(
                                            LookUp(
                                                GcCheckpointAssessment,
                                                checkpointAssessment_id = i.checkpointAssessment_id
                                            )
                                        ),
                                        Patch(
                                            GcCheckpointAssessment,
                                            Defaults(GcCheckpointAssessment),
                                            {
                                                checkpointAssessment: i.checkpointAssessment,
                                                checkpointAssessment_id: i.checkpointAssessment_id,
                                                assignmentId: i.assignmentId,
                                                bankUnitId: i.bankUnitId,
                                                product_id: i.product_id,
                                                sectionId: i.sectionId,
                                                checkpointId: i.checkpointId,
                                                checkpointName: i.checkpointName,
                                                AssessmentStatus: i.AssessmentStatus,
                                                CstatusUpdate: i.CstatusUpdate,
                                                CheckpointSequence: i.CheckpointSequence,
                                                checkpointComment: i.checkpointComment
                                            }
                                        );
                                        ,
                                        Patch(
                                            GcCheckpointAssessment,
                                            LookUp(
                                                GcCheckpointAssessment,
                                                checkpointAssessment_id = i.checkpointAssessment_id
                                            ),
                                            {
                                                checkpointAssessment: i.checkpointAssessment,
                                                checkpointAssessment_id: i.checkpointAssessment_id,
                                                assignmentId: i.assignmentId,
                                                bankUnitId: i.bankUnitId,
                                                product_id: i.product_id,
                                                sectionId: i.sectionId,
                                                checkpointId: i.checkpointId,
                                                checkpointName: i.checkpointName,
                                                AssessmentStatus: i.AssessmentStatus,
                                                CstatusUpdate: i.CstatusUpdate,
                                                CheckpointSequence: i.CheckpointSequence,
                                                checkpointComment: i.checkpointComment
                                            }
                                        );
                                    );
                                    //if
                                );
                                //forall
                RemoveIf(
                                    GcCheckpointAssessmentCache1,
                                    bankUnitId.Id = varBankUnitId
                                );
                            );
                        );
                        ,
                            //Item assessment transaction data
                        If(
                            IsEmpty(GC_checkpointItemAssessment),
                            ClearCollect(
                                GC_checkpointItemAssessmentAdd,
                                Filter(
                                    checkpointItemAssessment,
                                    bankUnitId.Id = varBankUnitId
                                )
                            );
                            ClearCollect(
                                GC_checkpointItemAssessment,
                                AddColumns(
                                    GC_checkpointItemAssessmentAdd,
                                    "CIstatusUpdate",
                                    2
                                )
                            );
                            //update local data
                ForAll(
                                Filter(
                                    GC_checkpointItemAssessmentCache1,
                                    bankUnitId.Id = varBankUnitId
                                ) As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GC_checkpointItemAssessment,
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                        )
                                    ),
                                    Patch(
                                        GC_checkpointItemAssessment,
                                        Defaults(GC_checkpointItemAssessment),
                                        {
                                            'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                            checkpointAssessment_Id: i.checkpointAssessment_Id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            section_Id: i.section_Id,
                                            checkpointItem_annotation: i.checkpointItem_annotation,
                                            checkpointItemId: i.checkpointItemId,
                                            checkpointItemName: i.checkpointItemName,
                                            assessmentStatus: i.assessmentStatus,
                                            CIstatusUpdate: i.CIstatusUpdate,
                                            checkpointitemSequence: i.checkpointitemSequence,
                                            checkpointItemComment: i.checkpointItemComment
                                        }
                                    );
                                    ,
                                    Patch(
                                        GC_checkpointItemAssessment,
                                        LookUp(
                                            GC_checkpointItemAssessment,
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                        ),
                                        {
                                            'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                            checkpointAssessment_Id: i.checkpointAssessment_Id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            section_Id: i.section_Id,
                                            checkpointItem_annotation: i.checkpointItem_annotation,
                                            checkpointItemId: i.checkpointItemId,
                                            checkpointItemName: i.checkpointItemName,
                                            assessmentStatus: i.assessmentStatus,
                                            CIstatusUpdate: i.CIstatusUpdate,
                                            checkpointitemSequence: i.checkpointitemSequence,
                                            checkpointItemComment: i.checkpointItemComment
                                        }
                                    );
                                );
                                //if
                            );
                            //forall
                RemoveIf(
                                GC_checkpointItemAssessmentCache1,
                                bankUnitId.Id = varBankUnitId
                            );
                            ,
                            If(
                                CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        bankUnitId.Id = varBankUnitId
                                    )
                                ) < 1,
                                ClearCollect(
                                    GC_checkpointItemAssessmentTemp,
                                    Filter(
                                        checkpointItemAssessment,
                                        bankUnitId.Id = varBankUnitId
                                    )
                                );
                                ForAll(
                                    GC_checkpointItemAssessmentTemp As i,
                                    Patch(
                                        GC_checkpointItemAssessment,
                                        Defaults(GC_checkpointItemAssessment),
                                        {
                                            'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                            checkpointAssessment_Id: i.checkpointAssessment_Id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            section_Id: i.section_Id,
                                            checkpointItem_annotation: i.checkpointItem_annotation,
                                            checkpointItemId: i.checkpointItemId,
                                            checkpointItemName: i.checkpointItemName,
                                            assessmentStatus: i.assessmentStatus,
                                            CIstatusUpdate: 2,
                                            checkpointitemSequence: i.checkpointitemSequence,
                                            checkpointItemComment: i.checkpointItemComment
                                        }
                                    )
                                );
                                 //update local data
                ForAll(
                                    Filter(
                                        GC_checkpointItemAssessmentCache1,
                                        bankUnitId.Id = varBankUnitId
                                    ) As i,
                                    If(
                                        IsBlank(
                                            LookUp(
                                                GC_checkpointItemAssessment,
                                                'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                            )
                                        ),
                                        Patch(
                                            GC_checkpointItemAssessment,
                                            Defaults(GC_checkpointItemAssessment),
                                            {
                                                'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                                'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                checkpointAssessment_Id: i.checkpointAssessment_Id,
                                                assignmentId: i.assignmentId,
                                                bankUnitId: i.bankUnitId,
                                                product_id: i.product_id,
                                                section_Id: i.section_Id,
                                                checkpointItem_annotation: i.checkpointItem_annotation,
                                                checkpointItemId: i.checkpointItemId,
                                                checkpointItemName: i.checkpointItemName,
                                                assessmentStatus: i.assessmentStatus,
                                                CIstatusUpdate: i.CIstatusUpdate,
                                                checkpointitemSequence: i.checkpointitemSequence,
                                                checkpointItemComment: i.checkpointItemComment
                                            }
                                        );
                                        ,
                                        Patch(
                                            GC_checkpointItemAssessment,
                                            LookUp(
                                                GC_checkpointItemAssessment,
                                                'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                            ),
                                            {
                                                'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                                'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                checkpointAssessment_Id: i.checkpointAssessment_Id,
                                                assignmentId: i.assignmentId,
                                                bankUnitId: i.bankUnitId,
                                                product_id: i.product_id,
                                                section_Id: i.section_Id,
                                                checkpointItem_annotation: i.checkpointItem_annotation,
                                                checkpointItemId: i.checkpointItemId,
                                                checkpointItemName: i.checkpointItemName,
                                                assessmentStatus: i.assessmentStatus,
                                                CIstatusUpdate: i.CIstatusUpdate,
                                                checkpointitemSequence: i.checkpointitemSequence,
                                                checkpointItemComment: i.checkpointItemComment
                                            }
                                        );
                                    );
                                    //if
                                );
                                //forall
                RemoveIf(
                                    GC_checkpointItemAssessmentCache1,
                                    bankUnitId.Id = varBankUnitId
                                );
                            );
                        );
                        ,
                       //checkpoint Action Items assessment transaction data
                        If(
                            IsEmpty(GC_checkpointItem_ActionItem),
                            ClearCollect(
                                GC_checkpointItem_ActionItemAdd,
                                Filter(
                                    checkpointItem_ActionItem,
                                    bankUnitId.Id = varBankUnitId
                                )
                            );
                            ClearCollect(
                                GC_checkpointItem_ActionItem,
                                AddColumns(
                                    GC_checkpointItem_ActionItemAdd,
                                    "CIAstatusUpdate",
                                    2
                                )
                            );
                             //update local data
                ForAll(
                                Filter(
                                    GC_checkpointItem_ActionItemCache1,
                                    bankUnitId.Id = varBankUnitId
                                ) As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GC_checkpointItem_ActionItem,
                                            checkpointItemActionItemsId = i.checkpointItemActionItemsId
                                        )
                                    ),
                                    Patch(
                                        GC_checkpointItem_ActionItem,
                                        Defaults(GC_checkpointItem_ActionItem),
                                        {
                                            checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                            checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                            ActionItem_Name: i.ActionItem_Name,
                                            assignmentId: i.assignmentId,
                                            bankId: i.bankId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            priority: i.priority,
                                            OwnerId: i.OwnerId,
                                            TimeEstimate: i.TimeEstimate,
                                            MaterialEstimate: i.MaterialEstimate,
                                            CIAstatusUpdate: i.CIAstatusUpdate,
                                            Action_status: i.Action_status
                                        }
                                    );
                                    ,
                                    Patch(
                                        GC_checkpointItem_ActionItem,
                                        LookUp(
                                            GC_checkpointItem_ActionItem,
                                            checkpointItemActionItemsId = i.checkpointItemActionItemsId
                                        ),
                                        {
                                            checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                            checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                            ActionItem_Name: i.ActionItem_Name,
                                            assignmentId: i.assignmentId,
                                            bankId: i.bankId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            priority: i.priority,
                                            OwnerId: i.OwnerId,
                                            TimeEstimate: i.TimeEstimate,
                                            MaterialEstimate: i.MaterialEstimate,
                                            CIAstatusUpdate: i.CIAstatusUpdate,
                                            Action_status: i.Action_status
                                        }
                                    );
                                );
                                //if
                            );
                            //forall
                RemoveIf(
                                GC_checkpointItem_ActionItemCache1,
                                bankUnitId.Id = varBankUnitId
                            );
                            ,
                            If(
                                CountRows(
                                    Filter(
                                        GC_checkpointItem_ActionItem,
                                        bankUnitId.Id = varBankUnitId
                                    )
                                ) < 1,
                                ClearCollect(
                                    GC_checkpointItem_ActionItemTemp,
                                    Filter(
                                        checkpointItem_ActionItem,
                                        bankUnitId.Id = varBankUnitId
                                    )
                                );
                                ForAll(
                                    GC_checkpointItem_ActionItemTemp As i,
                                    Patch(
                                        GC_checkpointItem_ActionItem,
                                        Defaults(GC_checkpointItem_ActionItem),
                                        {
                                            checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                            checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                            ActionItem_Name: i.ActionItem_Name,
                                            assignmentId: i.assignmentId,
                                            bankId: i.bankId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            priority: i.priority,
                                            OwnerId: i.OwnerId,
                                            TimeEstimate: i.TimeEstimate,
                                            MaterialEstimate: i.MaterialEstimate,
                                            CIAstatusUpdate: 2,
                                            Action_status: i.Action_status
                                        }
                                    );
                                );
                                ForAll(
                                    Filter(
                                        GC_checkpointItem_ActionItemCache1,
                                        bankUnitId.Id = varBankUnitId
                                    ) As i,
                                    If(
                                        IsBlank(
                                            LookUp(
                                                GC_checkpointItem_ActionItem,
                                                checkpointItemActionItemsId = i.checkpointItemActionItemsId
                                            )
                                        ),
                                        Patch(
                                            GC_checkpointItem_ActionItem,
                                            Defaults(GC_checkpointItem_ActionItem),
                                            {
                                                checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                                checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                                ActionItem_Name: i.ActionItem_Name,
                                                assignmentId: i.assignmentId,
                                                bankId: i.bankId,
                                                bankUnitId: i.bankUnitId,
                                                section_id: i.section_id,
                                                checkpoint_id: i.checkpoint_id,
                                                checkpointItem_Id: i.checkpointItem_Id,
                                                product_id: i.product_id,
                                                priority: i.priority,
                                                OwnerId: i.OwnerId,
                                                TimeEstimate: i.TimeEstimate,
                                                MaterialEstimate: i.MaterialEstimate,
                                                CIAstatusUpdate: i.CIAstatusUpdate,
                                                Action_status: i.Action_status
                                            }
                                        );
                                        ,
                                        Patch(
                                            GC_checkpointItem_ActionItem,
                                            LookUp(
                                                GC_checkpointItem_ActionItem,
                                                checkpointItemActionItemsId = i.checkpointItemActionItemsId
                                            ),
                                            {
                                                checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                                checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                                ActionItem_Name: i.ActionItem_Name,
                                                assignmentId: i.assignmentId,
                                                bankId: i.bankId,
                                                bankUnitId: i.bankUnitId,
                                                section_id: i.section_id,
                                                checkpoint_id: i.checkpoint_id,
                                                checkpointItem_Id: i.checkpointItem_Id,
                                                product_id: i.product_id,
                                                priority: i.priority,
                                                OwnerId: i.OwnerId,
                                                TimeEstimate: i.TimeEstimate,
                                                MaterialEstimate: i.MaterialEstimate,
                                                CIAstatusUpdate: i.CIAstatusUpdate,
                                                Action_status: i.Action_status
                                            }
                                        );
                                    );
                                    //if
                                );
                                //forall
                RemoveIf(
                                    GC_checkpointItem_ActionItemCache1,
                                    bankUnitId.Id = varBankUnitId
                                );
                            );
                        );
                        ,
                        //checkpoint Action Items assessment transaction data
                        If(
                            IsEmpty(GC_checkpointItem_Images),
                            ClearCollect(
                                GC_checkpointItem_ImagesAdd,
                                Filter(
                                    checkpointItem_Images,
                                    bankUnitId.Id = varBankUnitId
                                )
                            );
                            ClearCollect(
                                GC_checkpointItem_Images,
                                AddColumns(
                                    GC_checkpointItem_ImagesAdd,
                                    "CIIstatusUpdate",
                                    2
                                )
                            );
                            UpdateIf(
                                GC_checkpointItem_Images,
                                bankUnitId.Id = varBankUnitId,
                                {Image: Blank()}
                            );
                            ForAll(
                                Filter(
                                    GC_checkpointItem_ImagesCache1,
                                    bankUnitId.Id = varBankUnitId
                                ) As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GC_checkpointItem_Images,
                                            checkpointItemImagesId = i.checkpointItemImagesId
                                        )
                                    ),
                                    Patch(
                                        GC_checkpointItem_Images,
                                        Defaults(GC_checkpointItem_Images),
                                        {
                                            checkpointItem_Images: i.checkpointItem_Images,
                                            checkpointItemImagesId: i.checkpointItemImagesId,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            Image: i.Image,
                                            image_annotation: i.image_annotation,
                                            CIIstatusUpdate: i.CIIstatusUpdate
                                        }
                                    );
                                    ,
                                    Patch(
                                        GC_checkpointItem_Images,
                                        LookUp(
                                            GC_checkpointItem_Images,
                                            checkpointItemImagesId = i.checkpointItemImagesId
                                        ),
                                        {
                                            checkpointItem_Images: i.checkpointItem_Images,
                                            checkpointItemImagesId: i.checkpointItemImagesId,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            Image: i.Image,
                                            image_annotation: i.image_annotation,
                                            CIIstatusUpdate: i.CIIstatusUpdate
                                        }
                                    );
                                );
                                //if
                            );
                            //forall
                RemoveIf(
                                GC_checkpointItem_ImagesCache1,
                                bankUnitId.Id = varBankUnitId
                            );
                            ,
                            If(
                                CountRows(
                                    Filter(
                                        GC_checkpointItem_Images,
                                        bankUnitId.Id = varBankUnitId
                                    )
                                ) < 1,
                                ClearCollect(
                                    GC_checkpointItem_ImagesTemp,
                                    Filter(
                                        checkpointItem_Images,
                                        bankUnitId.Id = varBankUnitId
                                    )
                                );
                                ForAll(
                                    GC_checkpointItem_ImagesTemp As i,
                                    Patch(
                                        GC_checkpointItem_Images,
                                        Defaults(GC_checkpointItem_Images),
                                        {
                                            checkpointItem_Images: i.checkpointItem_Images,
                                            checkpointItemImagesId: i.checkpointItemImagesId,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            Image: Blank(),
                                            // i.Image,
                image_annotation: i.image_annotation,
                                            CIIstatusUpdate: 2
                                        }
                                    );
                                );
                                ForAll(
                                    Filter(
                                        GC_checkpointItem_ImagesCache1,
                                        bankUnitId.Id = varBankUnitId
                                    ) As i,
                                    If(
                                        IsBlank(
                                            LookUp(
                                                GC_checkpointItem_Images,
                                                checkpointItemImagesId = i.checkpointItemImagesId
                                            )
                                        ),
                                        Patch(
                                            GC_checkpointItem_Images,
                                            Defaults(GC_checkpointItem_Images),
                                            {
                                                checkpointItem_Images: i.checkpointItem_Images,
                                                checkpointItemImagesId: i.checkpointItemImagesId,
                                                assignmentId: i.assignmentId,
                                                bankUnitId: i.bankUnitId,
                                                section_id: i.section_id,
                                                checkpoint_id: i.checkpoint_id,
                                                checkpointItem_Id: i.checkpointItem_Id,
                                                product_id: i.product_id,
                                                Image: i.Image,
                                                image_annotation: i.image_annotation,
                                                CIIstatusUpdate: i.CIIstatusUpdate
                                            }
                                        );
                                        ,
                                        Patch(
                                            GC_checkpointItem_Images,
                                            LookUp(
                                                GC_checkpointItem_Images,
                                                checkpointItemImagesId = i.checkpointItemImagesId
                                            ),
                                            {
                                                checkpointItem_Images: i.checkpointItem_Images,
                                                checkpointItemImagesId: i.checkpointItemImagesId,
                                                assignmentId: i.assignmentId,
                                                bankUnitId: i.bankUnitId,
                                                section_id: i.section_id,
                                                checkpoint_id: i.checkpoint_id,
                                                checkpointItem_Id: i.checkpointItem_Id,
                                                product_id: i.product_id,
                                                Image: i.Image,
                                                image_annotation: i.image_annotation,
                                                CIIstatusUpdate: i.CIIstatusUpdate
                                            }
                                        );
                                    );
                                    //if
                                );
                                //forall
                RemoveIf(
                                    GC_checkpointItem_ImagesCache1,
                                    bankUnitId.Id = varBankUnitId
                                );
                            );
                        );
                    );
                    Navigate(SectionScreen);
                    ,//net not connected
                    If(
                        !IsBlank(
                            LookUp(
                                GC_unitAssessment,
                                assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && Assessment_status = "Upcomming"
                            )
                        ),
                        Navigate(SectionScreen);
                        ,
                        If(
                            CountRows(
                                Filter(
                                    GcSectionAssessment,
                                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId
                                )
                            ) < 1,
                            Set(
                                VarUnitDataText,
                                "Network not available, Unable to get submitted data from cloud."
                            );
                            Set(
                                VarUnitDataTextPopUp,
                                true
                            );
                            ,
                            Navigate(SectionScreen);
                        );
                    );
                    
                );
                Set(
                    varSpinner,
                    false
                );
                //net connected
                Clear(GcSectionAssessmentAdd);
                Clear(GcCheckpointAssessmentAdd);
                Clear(GC_checkpointItemAssessmentAdd);
                Clear(GC_checkpointItem_ActionItemAdd);
                Clear(GC_checkpointItem_ImagesAdd);
                Clear(GcSectionAssessmentTemp);
                Clear(GcCheckpointAssessmentTemp);
                Clear(GC_checkpointItemAssessmentTemp);
                Clear(GC_checkpointItem_ActionItemTemp);
                Clear(GC_checkpointItem_ImagesTemp);
                
                //for Logs
                UpdateIf(
                    GcTraceLog,
                    VarDebug = true,
                    {
                        Path: First(GcTraceLog).Path & "/UEnd:" & glryUnitBS.Selected.bankUnitId.unitNumber & "=" & Text(
                            Now(),
                            "mm-dd-yy hh:mm:ss am/pm"
                        )
                    }
                );
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="No"
            Visible: =false //VarMemoryPressurePopup || VarMemoryPressurePopup1
            Width: =120
            X: =btnExitOk_5.X+btnExitOk_5.Width+20
            Y: =Label2_28.Y+ Label2_28.Height+10
            ZIndex: =59

