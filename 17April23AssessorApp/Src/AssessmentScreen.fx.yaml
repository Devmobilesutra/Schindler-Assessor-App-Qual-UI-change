AssessmentScreen As screen:
    OnHidden: =Set(IsResetCboxItemsAS, false);Set(IsResetCboxItemsAS, true) ;
    OnVisible: |
        =/*//for reset ideal timer
        Reset(tmr_logout);
        Set(UserLastNavigated, Now());*/
        
        //for safety check
        If(
            DateDiff(
                UserLastNavigatedTime,
                Now(),
                TimeUnit.Seconds
            ) > SafetyCheckTime,
            Set(
                safetyPopup,
                true
            );
            ,
            Set(
                UserLastNavigatedTime,
                Now()
            );
            
        );
        
        Set(varloader,false);
        Set(VarPopUpExitApp,false);
        
        Set(varComment,false);
        Set(safetyPopup,false);
        Set(varSpinner,false);
        Set(popupsuccess,false );

    ctnMainAS As groupContainer.manualLayoutContainer:
        Height: =Max(App.Height, App.MinScreenHeight)
        Width: =Parent.Width
        ZIndex: =1

        ctnMiddleAS As groupContainer.horizontalAutoLayoutContainer:
            Height: |-
                =//ctnMainAS.Height-(ctnHeaderAS.Height)
                Parent.Height
            LayoutDirection: =LayoutDirection.Vertical
            LayoutMode: =LayoutMode.Auto
            LayoutOverflowY: =LayoutOverflow.Scroll
            Width: =Parent.Width
            Y: =ctnHeaderSS_1.Height+ctnHeaderSS_1.Y
            ZIndex: =2

            "'ctnBack&onlinestatus' As groupContainer.verticalAutoLayoutContainer":
                AlignInContainer: =AlignInContainer.SetByContainer
                FillPortions: =0.2
                Height: =80
                LayoutMinHeight: =80
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingBottom: =5
                Width: =Parent.Width
                Y: =ctnHeaderSS_1.Y+ctnHeaderSS_1.Height
                ZIndex: =1

                ctnBack As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.SetByContainer
                    FillPortions: =0
                    Height: =80
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutGap: =10
                    LayoutJustifyContent: =LayoutJustifyContent.Center
                    LayoutMinHeight: =100
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    PaddingLeft: =40
                    Width: =Parent.Width
                    Y: =ctnHeaderSS_1.Y+ctnHeaderSS_1.Height
                    ZIndex: =1

                    btnBack As button:
                        BorderColor: =AllScreensCSS.RActiveColor
                        Color: =RGBA(0, 0, 0, 1)
                        DisabledColor: =RGBA(0, 0, 0, 1)
                        DisabledFill: =RGBA(0, 0, 0, 0)
                        Fill: =RGBA(0, 0, 0, 0)
                        Height: =ctnBack.Height/1.6
                        HoverColor: =RGBA(0, 0, 0, 1)
                        HoverFill: =
                        OnSelect: |-
                            =
                            UpdateContext({locInfoExpanded:false});
                            Set(varExpanded,false);
                            Navigate(SectionScreen);
                        PaddingBottom: =10
                        PaddingLeft: =20
                        PaddingRight: =10
                        PaddingTop: =10
                        PressedFill: =
                        RadiusBottomLeft: =5
                        RadiusBottomRight: =5
                        RadiusTopLeft: =5
                        RadiusTopRight: =5
                        Size: =AllScreensCSS.RLabelFontSize-2
                        Text: ="Back"
                        Width: =200 //ctnBack.Width/6
                        ZIndex: =1

            Container3_2 As groupContainer.verticalAutoLayoutContainer:
                FillPortions: =0
                Height: |-
                    =//ctnSectionSS.Height/1.8
                    200
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                Width: =1366
                Y: =80
                ZIndex: =2

                ctnAssessorAS_3 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    Width: =ctnMiddleAS.Width
                    ZIndex: =2

                    lblAssesorNameAS_3 As label:
                        Font: =AllScreensCSS.RFont
                        FontWeight: =FontWeight.Semibold
                        Height: =ctnAssessorAS_3.Height
                        PaddingLeft: =40
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Assessor name "
                        Width: |-
                            =//ctnMiddleAS.Width/5
                            350
                        ZIndex: =1

                    lblAssessorAS_3 As label:
                        FillPortions: =1
                        Font: =AllScreensCSS.RFont
                        Height: =ctnAssessorAS_3.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =LookUp(gcProjectAssignment,Id= varAssignmentId && bankId.goNumber=lblBankName.Text,assessorName)
                        Width: =ctnMiddleAS.Width/2
                        X: =lblAssesorNameAS_3.X+lblAssesorNameAS_3.Width
                        ZIndex: =2

                ctnBankAS_3 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    Width: =ctnMiddleAS.Width
                    ZIndex: =3

                    lblBankNumberAS_4 As label:
                        Font: =AllScreensCSS.RFont
                        FontWeight: =FontWeight.Semibold
                        Height: =ctnBankAS_3.Height
                        PaddingLeft: =40
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="G.O./Commission number"
                        Width: |-
                            =//ctnMiddleAS.Width/9
                            350
                        ZIndex: =1

                    lblBankAS_4 As label:
                        FillPortions: =1
                        Font: =AllScreensCSS.RFont
                        Height: =ctnBankAS_3.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =lblBankName.Text
                        Width: =ctnMiddleAS.Width/6
                        X: =lblBankNumberAS_4.X+lblBankNumberAS_4.Width
                        ZIndex: =2

                ctnUnitAS_1 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    Width: =ctnMiddleAS.Width
                    Y: =
                    ZIndex: =4

                    lblBankNumberAS_5 As label:
                        Font: =AllScreensCSS.RFont
                        FontWeight: =FontWeight.Semibold
                        Height: =ctnUnitAS_1.Height
                        PaddingLeft: =40
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Unit "
                        Width: |-
                            =//ctnMiddleAS.Width/9
                            350
                        ZIndex: =1

                    lblBankAS_5 As label:
                        FillPortions: =1
                        Font: =AllScreensCSS.RFont
                        Height: =ctnUnitAS_1.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =glryUnitBS.Selected.bankUnitId.unitNumber
                        Width: =ctnMiddleAS.Width/6
                        X: =lblBankNumberAS_5.X+lblBankNumberAS_5.Width
                        ZIndex: =2

                ctnAssessmntTypeAS_3 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    Width: =ctnMiddleAS.Width
                    ZIndex: =5

                    lblAssessmentTypeAS_3 As label:
                        Font: =AllScreensCSS.RFont
                        FontWeight: =FontWeight.Semibold
                        Height: =ctnAssessmntTypeAS_3.Height
                        PaddingLeft: =40
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Assessment type "
                        Width: |-
                            =//ctnMiddleAS.Width/4.5
                            350
                        ZIndex: =1

                    lblAtypeAS_3 As label:
                        FillPortions: =1
                        Font: =AllScreensCSS.RFont
                        Height: =ctnAssessmntTypeAS_3.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =LookUp(gcProjectAssignment,Id= varAssignmentId && bankId.goNumber=lblBankName.Text,assessmentType)
                        Width: =ctnMiddleAS.Width/4
                        X: =lblAssessmentTypeAS_3.X+lblAssessmentTypeAS_3.Width
                        ZIndex: =2

                ctnAssessmentDateAS_3 As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.Start
                    FillPortions: =0
                    Height: =30
                    LayoutMinHeight: =30
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    Width: =ctnMiddleAS.Width
                    ZIndex: =6

                    lblAssessmentDateAS_3 As label:
                        Font: =AllScreensCSS.RFont
                        FontWeight: =FontWeight.Semibold
                        Height: =ctnAssessmentDateAS_3.Height
                        PaddingLeft: =40
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: ="Assessment date "
                        Width: |-
                            =//ctnMiddleAS.Width/4.5
                            350
                        ZIndex: =1

                    lblADateAS_3 As label:
                        FillPortions: =1
                        Font: =AllScreensCSS.RFont
                        Height: =ctnAssessmentDateAS_3.Height
                        PaddingLeft: =2
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =lblADate.Text
                        Width: =ctnMiddleAS.Width/8
                        X: =lblAssessmentDateAS_3.X+lblAssessmentDateAS_3.Width
                        ZIndex: =2

            ctnSectionAS As groupContainer.verticalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                FillPortions: =0
                Height: =40
                LayoutMinHeight: =40
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                LayoutWrap: =true
                Width: =ctnMiddleAS.Width
                Y: =Container3_2.Height+Container3_2.Y
                ZIndex: =4

                lblSectionname As label:
                    Color: =RGBA(209, 19, 19, 1)
                    FillPortions: =1
                    Font: =AllScreensCSS.RFont
                    FontWeight: =FontWeight.Bold
                    Height: =ctnSectionAS.Height
                    PaddingLeft: =40
                    Size: =22
                    Text: = glrySectionSS.Selected.sectionname
                    Width: =ctnSectionAS.Width/8
                    X: =60
                    ZIndex: =2

            ctnCheckpointAS As groupContainer.verticalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                FillPortions: =0
                Height: =60
                LayoutAlignItems: =LayoutAlignItems.Center
                LayoutMinHeight: =40
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingLeft: =40
                PaddingRight: =40
                Width: =ctnMiddleAS.Width
                ZIndex: =5

                lblCheckpointAS As label:
                    FillPortions: =1
                    Font: =AllScreensCSS.RFont
                    Height: =ctnCheckpointAS.Height
                    Size: =AllScreensCSS.RLabelFontSize
                    Text: =LookUp(GC_templateCheckpoints,checkpointId=ChId,checkpointName) 
                    Width: =ctnCheckpointAS.Width/25
                    ZIndex: =1

            ctnitemsAS As groupContainer.horizontalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                FillPortions: =0
                Height: |
                    =//Parent.Height
                    glryItmesAS.Height+ctnFooterAS.Height+130
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingLeft: =40
                PaddingRight: =20
                Width: =ctnMiddleAS.Width
                Y: =ctnCheckpointAS.Height+ctnCheckpointAS.Y
                ZIndex: =6

                "glryItmesAS As gallery.'BrowseLayout_Flexible_NewsFeed_ver4.0'":
                    FillPortions: =0
                    Height: |-
                        =//Parent.Height
                        (CountRows(glryItmesAS.AllItems)*glryItmesAS.TemplateHeight)+80
                    Items: |-
                        =Sort(
                            Filter(
                                GC_templateCheckpointsItem,
                                checkpointId.checkpointId = LookUp(
                                    GC_templateCheckpoints,
                                    checkpointId = ChId,
                                    checkpointId
                                ),
                                checkpointItemName
                            ),
                            Value(checkpointItemSequence)
                        )
                    Layout: =Layout.Vertical
                    LayoutMinHeight: =400
                    LayoutMinWidth: =320
                    ShowScrollbar: =false
                    TemplatePadding: =0
                    TemplateSize: =120
                    Width: =ctnitemsAS.Width
                    X: |
                        =8
                    Y: =ctnitemsAS.Y
                    ZIndex: =1

                    SepItemsAS As rectangle:
                        BorderColor: =RGBA(184, 0, 0, 1)
                        BorderThickness: =2
                        Fill: =RGBA(0, 0, 0, 0)
                        Height: |-
                            =//glryItmesAS.TemplateHeight
                            cboxItemsAS.Height
                        Width: =Parent.TemplateWidth
                        Y: =8
                        ZIndex: =1

                    imgTickactive As image:
                        Height: |-
                            =//Parent.Height/12
                            25
                        Image: =teckActive
                        OnSelect: =Select(Parent)
                        PaddingBottom: =2
                        Visible: |-
                            =//cboxItemsAS.Value=true
                            /*If(
                                IsBlank(
                            cboxItemsAS.Value=true
                                ),
                                false,
                                true
                            )*/
                            If(
                                IsBlank(
                                    LookUp(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id=varAssignmentId && 
                                        bankUnitId.Id=varBankUnitId 
                                       // && section_Id.sectionId.sectionId=VarSectionId && 
                                        //checkpointAssessment_Id.checkpointId.checkpointId=ChId 
                                        && checkpointItemId.checkpointItemId=ThisItem.checkpointItemId 
                                        && assessmentStatus="Check"
                                        )
                                        ),
                                false,
                                true
                            )
                        Width: |-
                            =//Parent.Width/40
                            25
                        X: =If(App.Width>1025,Parent.X+20,Parent.X/1.7)
                        Y: =45
                        ZIndex: =3

                    imgTickinactive As image:
                        Height: |-
                            =//Parent.Height/12
                            25
                        Image: =tickInactive
                        OnSelect: =Select(Parent)
                        PaddingBottom: =2
                        Visible: |
                            =//cboxItemsAS.Value=false
                            If(
                                IsBlank(
                                    LookUp(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id=varAssignmentId && 
                                        bankUnitId.Id=varBankUnitId 
                                       // && section_Id.sectionId.sectionId=VarSectionId && 
                                        //checkpointAssessment_Id.checkpointId.checkpointId=ChId 
                                        && checkpointItemId.checkpointItemId=ThisItem.checkpointItemId 
                                        && assessmentStatus="Check"
                                        )
                                        ),
                                true,
                                false
                            )
                        Width: |-
                            =//Parent.Width/40
                            25
                        X: =If(App.Width>1025,Parent.X+20,Parent.X/1.7)
                        Y: =45
                        ZIndex: =4

                    Button7 As button:
                        BorderColor: =AllScreensCSS.RActiveColor
                        Color: =AllScreensCSS.RColorBlack
                        DisplayMode: |-
                            =//If(glryItmesAS.Selected.cboxItemsAS.Value=true,DisplayMode.Edit,View)
                            DisplayMode.Edit
                        Fill: =AllScreensCSS.RColorWhite
                        Font: =AllScreensCSS.RFont
                        HoverColor: =RGBA(0, 0, 0, 1)
                        HoverFill: |-
                            =///ColorFade(RGBA(56, 96, 178, 1), -20%)
                            Self.Fill
                        OnSelect: |+
                            =//Notify("finding start",NotificationType.Information);
                            
                            /*//for reset ideal timer
                            Reset(tmr_logout);
                            Set(UserLastNavigated, Now());*/
                            
                            //for safety check
                            If(
                                DateDiff(
                                    UserLastNavigatedTime,
                                    Now(),
                                    TimeUnit.Seconds
                                ) > SafetyCheckTime,
                                Set(
                                    safetyPopup,
                                    true
                                );
                                ,
                                Set(
                                    UserLastNavigatedTime,
                                    Now()
                                );
                                
                            );
                            
                            Set(varCheckpointitemID,ThisItem.checkpointItemId);
                            
                            //for updating status of section assessment
                            If(/*CountRows(
                                 Filter(GcSectionAssessment,
                                     assignmentId.Id=varAssignmentId && 
                                     bankUnitId.Id = varBankUnitId && 
                                     sectionId.sectionId = VarSectionId
                                ))<1*/
                                IsBlank(LookUp(GcSectionAssessment,
                                     assignmentId.Id=varAssignmentId && 
                                     bankUnitId.Id = varBankUnitId && 
                                     sectionId.sectionId = VarSectionId)),
                                
                               //Set(varSA,Text(GUID()));
                                Set(varSA,varBankUnitId & "Se" & Text( Now(), "mmddyyyyhhmmss" )&"-" & Rand()
                                );
                               Patch(
                                GcSectionAssessment,
                                Defaults(GcSectionAssessment),
                                {
                                'sectionAssessment (quantum_sectionassessment)':varSA,
                                assignmentId:LookUp(DropColumns(gcProjectAssignment,"AstatusUpdate"),Id=varAssignmentId),
                                bankUnitId:LookUp(gcBankunit,Id=varBankUnitId),
                                product_id:LookUp(GC_product,product_Model=glryUnitBS.Selected.productModel),
                                sectionId:LookUp(GC_templateSections,sectionId=VarSectionId),
                                sectionName:glrySectionSS.Selected.sectionname,
                                AssessmentStatus:"Inprogress",
                                SstatusUpdate:Blank(),
                                sectionSequence:LookUp(GC_templateSections,sectionId=VarSectionId,sectionSequence)
                                }
                                ),
                                Set(varSA,LookUp(
                                    GcSectionAssessment,
                                    assignmentId.Id=varAssignmentId && 
                                    bankUnitId.Id= varBankUnitId && 
                                    sectionId.sectionId = VarSectionId,'sectionAssessment (quantum_sectionassessment)') 
                                    )
                                );
                                 If(
                                 !IsEmpty(Errors(GcSectionAssessment)),
                                 Notify(
                                     Concat(Errors(GcSectionAssessment), Column&": "&Message),
                                     NotificationType.Error
                                 )/*,
                                 Notify(
                                     "Section Patch successfully.",
                                     NotificationType.Error
                                 )*/
                             );
                              
                            
                            
                            //for updating assessment of checkpoint assessment
                            If(/*CountRows(
                                   Filter(GcCheckpointAssessment,
                                        assignmentId.Id=varAssignmentId && 
                                        bankUnitId.Id = varBankUnitId && 
                                        sectionId.'sectionAssessment (quantum_sectionassessment)'=varSA &&
                                        checkpointAssessment_id=GuidId
                                        )
                                    )<1*/
                                    IsBlank(LookUp(GcCheckpointAssessment,
                                       assignmentId.Id=varAssignmentId && 
                                        bankUnitId.Id = varBankUnitId && 
                                        sectionId.'sectionAssessment (quantum_sectionassessment)'=varSA &&
                                        checkpointId.checkpointId=ChId)),
                               
                                //Set(GuidId,Text(GUID()));
                                Set(GuidId,varBankUnitId & "ch" & Text( Now(), "mmddyyyyhhmmss" )&"-" & Rand());
                                Patch(
                                GcCheckpointAssessment,
                                Defaults(GcCheckpointAssessment),
                                {
                                   checkpointAssessment_id:GuidId,
                                   assignmentId:LookUp(DropColumns(gcProjectAssignment,"AstatusUpdate"),Id=varAssignmentId),
                                   bankUnitId:LookUp(gcBankunit,Id=varBankUnitId),
                                   product_id:LookUp(GC_product,product_Model=glryUnitBS.Selected.productModel),
                                   sectionId: LookUp(DropColumns(GcSectionAssessment,"SstatusUpdate"),'sectionAssessment (quantum_sectionassessment)'=varSA),
                                   checkpointId:LookUp(GC_templateCheckpoints,checkpointId= ChId),
                                   checkpointName:LookUp(GC_templateCheckpoints,checkpointId= ChId,checkpointName),
                                   AssessmentStatus:"Inprogress",
                                   CstatusUpdate:Blank(),
                                   CheckpointSequence:LookUp(GC_templateCheckpoints,checkpointId= ChId,checkpointSequence)
                                   //sectionAssessmentid:LookUp(GcSectionAssessment,'sectionAssessment (quantum_sectionassessment)'=varSA)
                                }
                                ),
                                Set(GuidId,LookUp(
                                        GcCheckpointAssessment,
                                        assignmentId.Id=varAssignmentId && 
                                        bankUnitId.Id = varBankUnitId  && 
                                        //sectionId.sectionId.sectionId=VarSectionId && 
                                        sectionId.'sectionAssessment (quantum_sectionassessment)'=varSA &&
                                        checkpointId.checkpointId = ChId,checkpointAssessment_id
                                    )););
                                 If(
                                 !IsEmpty(Errors(GcCheckpointAssessment)),
                                 Notify(
                                     Concat(Errors(GcCheckpointAssessment), Column&": "&Message),
                                     NotificationType.Error
                                 )/*,
                                 Trace("checkpoint successfully :" ,TraceSeverity.Information);
                                 Notify(
                                     "CheckpointAssessment Patch successfully.",
                                     NotificationType.Error
                                 )*/
                                  );
                            
                            If(/*CountRows(
                                Filter(GC_checkpointItemAssessment,
                                     assignmentId.Id=varAssignmentId && bankUnitId.Id=varBankUnitId &&                                                              checkpointItemId.checkpointItemId=varCheckpointitemID &&
                                      section_Id.'sectionAssessment (quantum_sectionassessment)'=varSA &&
                                      checkpointAssessment_Id.checkpointAssessment_id=GuidId &&
                                     'checkpointItemAssessment (quantum_checkpointitemassessment)'= varCItemA
                                 ))<1*/
                                 IsBlank(LookUp(
                                      GC_checkpointItemAssessment,
                                              assignmentId.Id=varAssignmentId && bankUnitId.Id=varBankUnitId &&                                                              checkpointItemId.checkpointItemId=varCheckpointitemID &&
                                      section_Id.'sectionAssessment (quantum_sectionassessment)'=varSA &&
                                      checkpointAssessment_Id.checkpointAssessment_id=GuidId
                                     )),
                                   
                               //Set(varCItemA,Text(GUID()));
                               Set(varCItemA,varBankUnitId & "ci" & Text( Now(), "mmddyyyyhhmmss" )&"-"& Rand());
                                Patch(
                                GC_checkpointItemAssessment,
                                Defaults(GC_checkpointItemAssessment),
                                        {
                                         'checkpointItemAssessment (quantum_checkpointitemassessment)': varCItemA,
                                            assignmentId: LookUp(
                                                DropColumns(
                                                gcProjectAssignment,
                                                "AstatusUpdate"),
                                                Id = varAssignmentId
                                            ),
                                            bankUnitId: LookUp(
                                              gcBankunit,
                                                Id = varBankUnitId
                                            ),
                                            product_id:LookUp(GC_product,product_Model=glryUnitBS.Selected.productModel)
                                            ,
                                            section_Id:LookUp(
                                                DropColumns(
                                                    GcSectionAssessment,
                                                "SstatusUpdate"),
                                                'sectionAssessment (quantum_sectionassessment)'=varSA),
                                            checkpointAssessment_Id:LookUp(
                                                DropColumns(
                                                    GcCheckpointAssessment,
                                                    "CstatusUpdate"),
                                                    checkpointAssessment_id=GuidId),
                                            checkpointItem_annotation:"",
                                            checkpointItemId: LookUp(
                                                GC_templateCheckpointsItem,
                                            checkpointItemId = varCheckpointitemID
                                            ),
                                            checkpointItemName: glryItmesAS.Selected.cboxItemsAS.Text,
                                            assessmentStatus:"Uncheck",
                                            CIstatusUpdate:Blank(),
                                            checkpointitemSequence: LookUp(GC_templateCheckpointsItem,checkpointItemId = varCheckpointitemID,checkpointItemSequence),
                                            CheckpointItemSortSequence: LookUp(GC_templateSections,sectionId=VarSectionId,sectionSequence) & LookUp(GC_templateCheckpoints,checkpointId= ChId,checkpointSequence) & LookUp(GC_templateCheckpointsItem,checkpointItemId = varCheckpointitemID,checkpointItemSequence)
                                        }
                                
                                    ),
                            Set(varCItemA,LookUp(GC_checkpointItemAssessment,
                                   assignmentId.Id=glryProject.Selected.Id && bankUnitId.Id=varBankUnitId && 
                                   checkpointItemId.checkpointItemId=varCheckpointitemID,'checkpointItemAssessment (quantum_checkpointitemassessment)'));
                                );
                                If(
                                 !IsEmpty(Errors(GC_checkpointItemAssessment)),
                                  Notify(
                                     Concat(Errors(GC_checkpointItemAssessment), Column&": "&Message),
                                     NotificationType.Error
                                 );
                            
                            
                            
                                 /*,
                                 Notify(
                                     "checkpointItemAssessment Patch sucssessfully.",
                                     NotificationType.Error
                                 )*/
                             );  
                             // For navigation from Previous finding 
                                 Set(VarPrevNav,true);
                            //Notify("finding endd",NotificationType.Information);
                            Navigate(FindingScreen);
                            
                        PressedBorderColor: =Self.BorderColor
                        PressedColor: =Self.Color
                        PressedFill: =Self.Fill
                        Size: =If(App.Width>1025,11,8)
                        Text: ="Findings"
                        Width: |-
                            =//If(App.Width<830,Parent.Width/5.8,App.Width<770,Parent.Width/5.8,Parent.Width/9.2)
                            If(App.Width<830,Parent.Width/6,App.Width<770,Parent.Width/6,Parent.Width/7)
                        X: =Button18_2.X+Button18_2.Width+15
                        Y: =45
                        ZIndex: =5

                    Circle1 As circle:
                        Fill: =AllScreensCSS.RActiveColor
                        Height: =10
                        OnSelect: =Select(Parent)
                        Visible: |-
                            =If(
                                !IsBlank(LookUp(
                                        GC_checkpointItemAssessment,
                                        checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId, checkpointItem_annotation))
                                || CountRows(
                                    Filter(
                                        GC_checkpointItem_ActionItem,
                                        checkpointItem_Id.checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId
                                    )
                                ) <> 0
                                 
                                || CountRows(
                                    Filter(
                                        GC_checkpointItem_Images,
                                        checkpointItem_Id.checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId
                                    )
                                )
                                 <> 0,
                                /*|| CountRows(Filter(
                                    GC_checkpointItemAssessment,
                                    checkpointItemId.checkpointItemId = varCheckpointitemID && bankUnitId.Id = varBankUnitId && assignmentId.isCompleted = "Completed"))>0,*/
                                true,
                                false
                            )
                        Width: =10
                        X: |-
                            =//Button18_2.X-Self.Width-15
                            Image1_1.X+Image1_1.Width+25
                        Y: =Parent.TemplateHeight/2.3
                        ZIndex: =6

                    cboxItemsAS As checkbox:
                        BorderColor: =RGBA(0, 0, 0, 0)
                        CheckboxBackgroundFill: =RGBA(0, 0, 0, 0)
                        CheckboxBorderColor: =RGBA(0, 0, 0, 0)
                        CheckboxSize: =glryItmesAS.Width/12
                        CheckmarkFill: =RGBA(0, 0, 0, 0)
                        Default: |-
                            =If(
                                IsBlank(
                                    LookUp(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id=varAssignmentId && 
                                        bankUnitId.Id=varBankUnitId 
                                       // && section_Id.sectionId.sectionId=VarSectionId && 
                                        //checkpointAssessment_Id.checkpointId.checkpointId=ChId 
                                        && checkpointItemId.checkpointItemId=ThisItem.checkpointItemId 
                                        && assessmentStatus="Check"
                                        )
                                        ),
                                false,
                                true
                            )
                        DisabledBorderColor: =RGBA(0, 0, 0, 1)
                        Font: =AllScreensCSS.RFont
                        Height: =110
                        HoverColor: =RGBA(0, 0, 0, 1)
                        OnCheck: |-
                            =
                            //for safety check
                            If(
                                DateDiff(
                                    UserLastNavigatedTime,
                                    Now(),
                                    TimeUnit.Seconds
                                ) > SafetyCheckTime,
                                Set(
                                    safetyPopup,
                                    true
                                );
                                ,
                                Set(
                                    UserLastNavigatedTime,
                                    Now()
                                );
                                
                            );
                            //set the Id of selected checkpointitemId
                            Set(
                                varCheckpointitemID,
                                ThisItem.checkpointItemId
                            );
                            ///If record already exist for selected checkpointitem in collection GC_checkpointItemAssessment , then save it's primary key in variable.
                            Set(
                                varCItemA,
                                LookUp(
                                    GC_checkpointItemAssessment,
                                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = varCheckpointitemID,
                                    'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                )
                            );
                            /////////////check is image is mandatory for selected checkpointitem in the template templatecheckpointitems and check if there is np row in collection GC_checkpointitem_Images for selected checkpointitem.then flag error message and reset value of checkbox to false.
                            //else 
                              // allow user to check this checkpoinitem as complete .
                              // update status of selected row in  collection GC_checkpointitemAssessment as Check.
                            If(
                                (glryItmesAS.Selected.checkpointItemImage = 'checkpointItemImage (templateCheckpointsItems)'.Yes && Not("NA option" in glryItmesAS.Selected.checkpointItemName) && IsBlank(
                                    LookUp(
                                        GC_checkpointItem_Images,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId &&
                             checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = varCItemA
                                    )
                                )),
                                Notify(
                                    "Image is Required",
                                    NotificationType.Error
                                );
                                glryItmesAS.Selected.cboxItemsAS.Value = false;
                                Set(
                                    IsResetCboxItemsAS,
                                    false
                                );
                                ,
                            glryItmesAS.Selected.cboxItemsAS.Value = true;
                            Set(
                                IsResetCboxItemsAS,
                                true
                            );
                            If(
                                IsResetCboxItemsAS = true,
                            //Assignment status update      
                                UpdateIf(
                                    gcProjectAssignment,
                                    Id = varAssignmentId && bankId.Id = VarBankId && isCompleted = "Upcomming",
                                    {
                                        isCompleted: "Inprogress1",
                                        AstatusUpdate: 0
                                    }
                                );
                                
                            //here one row already exist for varBankId in GC_BankAssessment  with Assessment_Status = "Upcomming" ,then updating status of bank assessment
                            UpdateIf(
                                    GC_bankAssessment,
                                    assignmentId.Id = varAssignmentId && bankId.Id = VarBankId && Assessment_Status = "Upcomming",
                                    {
                                        Assessment_Status: "Inprogress",
                                        BstatusUpdate: 0
                                    }
                                );
                                
                            // here one row already exist for varBankunitId in GC_UnitAssessment with Assessment_Status ="Upcomming", updating status of unit assessment.
                            UpdateIf(
                                    GC_unitAssessment,
                                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && Assessment_status = "Upcomming",
                                    {
                                        Assessment_status: "Inprogress",
                                        UstatusUpdate: 0
                                    }
                                );
                                
                            // unit assessment status update 0  for save status update
                            UpdateIf(
                                    GC_unitAssessment,
                                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId,
                                    //&& Assessment_status ="Inprogress",
                                    {UstatusUpdate: 0}
                                );
                                
                            //here, If there is no row for VarSectionId in GectionAssessment, then set new GUID in Variable varSA and collect row for varSectionId .If a row  is already exist  for VarsectionId then set it's primary column key in variable.
                            If(
                                    IsBlank(
                                        LookUp(
                                            GcSectionAssessment,
                                            assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && sectionId.sectionId = VarSectionId
                                        )
                                    ),
                                    Set(
                                        varSA,
                                        varBankUnitId & "Se" & Text(
                                            Now(),
                                            "mmddyyyyhhmmss"
                                        ) & "-" & Rand()
                                    );
                                    Patch(
                                        GcSectionAssessment,
                                        Defaults(GcSectionAssessment),
                                        {
                                            'sectionAssessment (quantum_sectionassessment)': varSA,
                                            assignmentId: LookUp(
                                                DropColumns(
                                                    gcProjectAssignment,
                                                    "AstatusUpdate"
                                                ),
                                                Id = varAssignmentId
                                            ),
                                            bankUnitId: LookUp(
                                                gcBankunit,
                                                Id = varBankUnitId
                                            ),
                                            product_id: LookUp(
                                                GC_product,
                                                product_Model = glryUnitBS.Selected.productModel
                                            ),
                                            sectionId: LookUp(
                                                GC_templateSections,
                                                sectionId = VarSectionId
                                            ),
                                            sectionName: glrySectionSS.Selected.sectionname,
                                            AssessmentStatus: "Inprogress",
                                            SstatusUpdate: 0,
                                            sectionSequence: LookUp(
                                                GC_templateSections,
                                                sectionId = VarSectionId,
                                                sectionSequence
                                            )
                                        }
                                    ),
                                    Set(
                                        varSA,
                                        LookUp(
                                            GcSectionAssessment,
                                            assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && sectionId.sectionId = VarSectionId,
                                            'sectionAssessment (quantum_sectionassessment)'
                                        )
                                    );
                              //section assessment status update 0 for save status update
                            UpdateIf(
                                        GcSectionAssessment,
                                        'sectionAssessment (quantum_sectionassessment)' = varSA,
                                        {SstatusUpdate: 0}
                                    );
                                );
                                
                            // a row present for checkpoint Assessment. If there is no row for ChId in GcCheckpointAssessment, then set new GUID in Variable GuidId and collect row for ChId.If a row  is already exist  for ChId then set it's primary column key in variable.
                            If(
                                    IsBlank(
                                        LookUp(
                                            GcCheckpointAssessment,
                                            assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && sectionId.'sectionAssessment (quantum_sectionassessment)' = varSA && checkpointId.checkpointId = ChId
                                        )
                                    ),
                                    Set(
                                        GuidId,
                                        varBankUnitId & "ch" & Text(
                                            Now(),
                                            "mmddyyyyhhmmss"
                                        ) & "-" & Rand()
                                    );
                                    Patch(
                                        GcCheckpointAssessment,
                                        Defaults(GcCheckpointAssessment),
                                        {
                                            checkpointAssessment_id: GuidId,
                                            assignmentId: LookUp(
                                                DropColumns(
                                                    gcProjectAssignment,
                                                    "AstatusUpdate"
                                                ),
                                                Id = varAssignmentId
                                            ),
                                            bankUnitId: LookUp(
                                                gcBankunit,
                                                Id = varBankUnitId
                                            ),
                                            product_id: LookUp(
                                                GC_product,
                                                product_Model = glryUnitBS.Selected.productModel
                                            ),
                                            sectionId: LookUp(
                                                DropColumns(
                                                    GcSectionAssessment,
                                                    "SstatusUpdate"
                                                ),
                                                'sectionAssessment (quantum_sectionassessment)' = varSA
                                            ),
                                            checkpointId: LookUp(
                                                GC_templateCheckpoints,
                                                checkpointId = ChId
                                            ),
                                            checkpointName: LookUp(
                                                GC_templateCheckpoints,
                                                checkpointId = ChId,
                                                checkpointName
                                            ),
                                            AssessmentStatus: "Inprogress",
                                            CstatusUpdate: 0,
                                            CheckpointSequence: LookUp(
                                                GC_templateCheckpoints,
                                                checkpointId = ChId,
                                                checkpointSequence
                                            )
                                        }
                                    ),
                                    Set(
                                        GuidId,
                                        LookUp(
                                            GcCheckpointAssessment,
                                            assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && sectionId.'sectionAssessment (quantum_sectionassessment)' = varSA && checkpointId.checkpointId = ChId,
                                            checkpointAssessment_id
                                        )
                                    );
                               //for checkpoint assessment status update 0 to save update
                            UpdateIf(
                                        GcCheckpointAssessment,
                                        checkpointAssessment_id = GuidId,
                                        {CstatusUpdate: 0}
                                    );
                                );
                                
                            //a row present for varcheckpointitem in GC_checkpointItemAssessment.If there is no row for GC_checkpointitemAssessment ,then set new GUID in variable VarCItemA.and collect row for varCItemA.
                            If(
                                    IsBlank(
                                        LookUp(
                                            GC_checkpointItemAssessment,
                                            assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && section_Id.'sectionAssessment (quantum_sectionassessment)' = varSA && checkpointItemId.checkpointItemId = varCheckpointitemID
                                        )
                                    ),
                                    Set(
                                        varCItemA,
                                        varBankUnitId & "ci" & Text(
                                            Now(),
                                            "mmddyyyyhhmmss"
                                        ) & "-" & Rand()
                                    );
                                    Patch(
                                        GC_checkpointItemAssessment,
                                        Defaults(GC_checkpointItemAssessment),
                                        {
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)': varCItemA,
                                            checkpointAssessment_Id: LookUp(
                                                DropColumns(
                                                    GcCheckpointAssessment,
                                                    "CstatusUpdate"
                                                ),
                                                checkpointAssessment_id = GuidId
                                            ),
                                            assignmentId: LookUp(
                                                DropColumns(
                                                    gcProjectAssignment,
                                                    "AstatusUpdate"
                                                ),
                                                Id = varAssignmentId
                                            ),
                                            bankUnitId: LookUp(
                                                gcBankunit,
                                                Id = varBankUnitId
                                            ),
                                            product_id: LookUp(
                                                GC_product,
                                                product_Model = glryUnitBS.Selected.productModel
                                            ),
                                            section_Id: LookUp(
                                                DropColumns(
                                                    GcSectionAssessment,
                                                    "SstatusUpdate"
                                                ),
                                                'sectionAssessment (quantum_sectionassessment)' = varSA
                                            ),
                                            checkpointItem_annotation: "",
                                            checkpointItemId: LookUp(
                                                GC_templateCheckpointsItem,
                                                checkpointItemId = glryItmesAS.Selected.checkpointItemId
                                            ),
                                            checkpointItemName: glryItmesAS.Selected.cboxItemsAS.Text,
                                            assessmentStatus: "Check",
                                            CIstatusUpdate: 0,
                                            checkpointitemSequence: LookUp(
                                                GC_templateCheckpointsItem,
                                                checkpointItemId = glryItmesAS.Selected.checkpointItemId,
                                                checkpointItemSequence
                                            ),
                                            CheckpointItemSortSequence: LookUp(
                                                GC_templateSections,
                                                sectionId = VarSectionId,
                                                sectionSequence
                                            ) & LookUp(
                                                GC_templateCheckpoints,
                                                checkpointId = ChId,
                                                checkpointSequence
                                            ) & LookUp(
                                                GC_templateCheckpointsItem,
                                                checkpointItemId = varCheckpointitemID,
                                                checkpointItemSequence
                                            )
                                        }
                                    ),
                                    UpdateIf(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = varCheckpointitemID,
                                        {
                                            assessmentStatus: "Check",
                                            CIstatusUpdate: 0
                                        }
                                    );
                                )
                            );
                            /*************************************/
                            ///Save data from collections to local cache
                            SaveData(
                                gcProjectAssignment,
                                "localprojectassignment"
                            );
                            SaveData(
                                GC_bankAssessment,
                                "localbankassessment"
                            );
                            SaveData(
                                GC_unitAssessment,
                                "localunitassessment"
                            );
                            ClearCollect(
                                GcSectionAssessmentCache,
                                Filter(
                                    GcSectionAssessment,
                                    SstatusUpdate = 0 || SstatusUpdate = 1
                                )
                            );
                                //update 
                            ForAll(
                                GcSectionAssessmentCache1 As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GcSectionAssessmentCache,
                                            'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                        )
                                    ),
                                    Patch(
                                        GcSectionAssessmentCache,
                                        Defaults(GcSectionAssessmentCache),
                                        {
                                            'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                            'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            sectionName: i.sectionName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            SstatusUpdate: i.SstatusUpdate,
                                            sectionSequence: i.sectionSequence,
                                            sectionComment: i.sectionComment
                                        }
                                    );
                                    ,
                                    Patch(
                                        GcSectionAssessmentCache,
                                        LookUp(
                                            GcSectionAssessmentCache,
                                            'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                        ),
                                        {
                                            'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                            'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            sectionName: i.sectionName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            SstatusUpdate: i.SstatusUpdate,
                                            sectionSequence: i.sectionSequence,
                                            sectionComment: i.sectionComment
                                        }
                                    );
                                );
                                    //if
                            );
                                //forall
                            SaveData(
                                GcSectionAssessmentCache,
                                "localsectionassessment"
                            );
                            ClearCollect(
                                GcCheckpointAssessmentCache,
                                Filter(
                                    GcCheckpointAssessment,
                                    CstatusUpdate = 0 || CstatusUpdate = 1
                                )
                            );
                                 //update
                            ForAll(
                                GcCheckpointAssessmentCache1 As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GcCheckpointAssessmentCache,
                                            checkpointAssessment_id = i.checkpointAssessment_id
                                        )
                                    ),
                                    Patch(
                                        GcCheckpointAssessmentCache,
                                        Defaults(GcCheckpointAssessmentCache),
                                        {
                                            checkpointAssessment: i.checkpointAssessment,
                                            checkpointAssessment_id: i.checkpointAssessment_id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            checkpointId: i.checkpointId,
                                            checkpointName: i.checkpointName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            CstatusUpdate: i.CstatusUpdate,
                                            CheckpointSequence: i.CheckpointSequence,
                                            checkpointComment: i.checkpointComment
                                        }
                                    );
                                    ,
                                    Patch(
                                        GcCheckpointAssessmentCache,
                                        LookUp(
                                            GcCheckpointAssessmentCache,
                                            checkpointAssessment_id = i.checkpointAssessment_id
                                        ),
                                        {
                                            checkpointAssessment: i.checkpointAssessment,
                                            checkpointAssessment_id: i.checkpointAssessment_id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            checkpointId: i.checkpointId,
                                            checkpointName: i.checkpointName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            CstatusUpdate: i.CstatusUpdate,
                                            CheckpointSequence: i.CheckpointSequence,
                                            checkpointComment: i.checkpointComment
                                        }
                                    );
                                );
                                    //if
                            );
                                //forall
                            SaveData(
                                GcCheckpointAssessmentCache,
                                "localcheckpointassessment"
                            );
                            ClearCollect(
                                GC_checkpointItemAssessmentCache,
                                Filter(
                                    GC_checkpointItemAssessment,
                                    CIstatusUpdate = 0 || CIstatusUpdate = 1
                                )
                            );
                                 //update
                            ForAll(
                                GC_checkpointItemAssessmentCache1 As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GC_checkpointItemAssessmentCache,
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                        )
                                    ),
                                    Patch(
                                        GC_checkpointItemAssessmentCache,
                                        Defaults(GC_checkpointItemAssessmentCache),
                                        {
                                            'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                            checkpointAssessment_Id: i.checkpointAssessment_Id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            section_Id: i.section_Id,
                                            checkpointItem_annotation: i.checkpointItem_annotation,
                                            checkpointItemId: i.checkpointItemId,
                                            checkpointItemName: i.checkpointItemName,
                                            assessmentStatus: i.assessmentStatus,
                                            CIstatusUpdate: i.CIstatusUpdate,
                                            checkpointitemSequence: i.checkpointitemSequence,
                                            checkpointItemComment: i.checkpointItemComment
                                        }
                                    );
                                    ,
                                    Patch(
                                        GC_checkpointItemAssessmentCache,
                                        LookUp(
                                            GC_checkpointItemAssessmentCache,
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                        ),
                                        {
                                            'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                            checkpointAssessment_Id: i.checkpointAssessment_Id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            section_Id: i.section_Id,
                                            checkpointItem_annotation: i.checkpointItem_annotation,
                                            checkpointItemId: i.checkpointItemId,
                                            checkpointItemName: i.checkpointItemName,
                                            assessmentStatus: i.assessmentStatus,
                                            CIstatusUpdate: i.CIstatusUpdate,
                                            checkpointitemSequence: i.checkpointitemSequence,
                                            checkpointItemComment: i.checkpointItemComment
                                        }
                                    );
                                );//if
                            );//forall
                            SaveData(
                                GC_checkpointItemAssessmentCache,
                                "localcheckpointitemassessment"
                            );
                            )
                        OnSelect: |
                            =//Set(locItemExpanded,false
                            
                            // If(ThisItem.checkpointItemImage='checkpointItemImage (templateCheckpointsItems)'.Yes && CountRows(Filter(GC_checkpointItem_Images,assignmentId.Id=varAssignmentId && bankUnitId.Id=varBankUnitId && checkpointItem_Id.checkpointItemId.checkpointItemId=varCheckpointitemID))=0,Set(IsReset,false),Set(IsReset,true));
                            /*Set(varCItemA,LookUp(GC_checkpointItemAssessment,assignmentId.Id=varAssignmentId&&bankUnitId.Id=varBankUnitId&&checkpointItemId.checkpointItemId=varCheckpointitemID,'checkpointItemAssessment (quantum_checkpointitemassessment)'));
                            */
                            
                            /*If(glryItmesAS.Selected.checkpointItemImage='checkpointItemImage (templateCheckpointsItems)'.Yes&&
                                    //(UploadedImage1_2.Image=Blank()
                            CountRows(Filter(GC_checkpointItem_Images,assignmentId.Id=varAssignmentId&&bankUnitId.Id=varBankUnitId&&checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)'=varCItemA))<1,Set(IsResetCboxItemsAS, false );glryItmesAS.Selected.cboxItemsAS.Value= false ,glryItmesAS.Selected.cboxItemsAS.Value= true ;Set(IsResetCboxItemsAS, true ))*/
                            Set(IsResetCboxItemsAS,false);Set(IsResetCboxItemsAS,true);
                        OnUncheck: |+
                            =/*//for reset ideal timer
                            Reset(tmr_logout);
                            Set(UserLastNavigated, Now());*/
                            
                            //for safety check
                            If(
                                DateDiff(
                                    UserLastNavigatedTime,
                                    Now(),
                                    TimeUnit.Seconds
                                ) > SafetyCheckTime,
                                Set(
                                    safetyPopup,
                                    true
                                );
                                ,
                                Set(
                                    UserLastNavigatedTime,
                                    Now()
                                );
                                
                            );
                            
                            Set(varCheckpointitemID,ThisItem.checkpointItemId);
                            //RemoveIf(GC_checkpointItemAssessment,checkpointItemId.checkpointItemId=ThisItem.checkpointItemId && bankUnitId.Id=varBankUnitId)
                              
                             // unit assessment status update 0 to 1 for green and grey status update
                                UpdateIf(
                                    GC_unitAssessment,
                                    assignmentId.Id=varAssignmentId && bankUnitId.Id=varBankUnitId ,
                                    {
                                        UstatusUpdate:0
                                    }
                                );
                            //section assessment status update 0 to 1 for green and grey status update
                                UpdateIf(
                                    GcSectionAssessment,
                                    'sectionAssessment (quantum_sectionassessment)'= varSA ,
                                    {
                                      SstatusUpdate:0
                                    }
                                );
                            //checkpoint assessment status update 0 to 1 for green and grey status update
                                UpdateIf(
                                    GcCheckpointAssessment,
                                    checkpointAssessment_id = GuidId,
                                    {
                                        CstatusUpdate: 0
                                    }
                                );
                            
                            
                            UpdateIf(GC_checkpointItemAssessment,assignmentId.Id=varAssignmentId &&
                                                                         bankUnitId.Id=varBankUnitId &&
                                                                          checkpointItemId.checkpointItemId=varCheckpointitemID,
                                                                          {
                                                                                assessmentStatus:"Uncheck",
                                                                                CIstatusUpdate:0 //Blank()
                                                                          });
                             glryItmesAS.Selected.cboxItemsAS.Value=false;
                             //Set(IsResetCboxItemsAS,true);
                            
                            
                            //update to local cache
                              SaveData(
                                    GC_unitAssessment,
                                    "localunitassessment"
                                );
                            
                            
                                  ClearCollect(GcSectionAssessmentCache,Filter(GcSectionAssessment,SstatusUpdate = 0 || SstatusUpdate = 1));
                                 //update 
                                    ForAll(
                                            GcSectionAssessmentCache1 As i,
                                            If(
                                                IsBlank(
                                                    LookUp(
                                                        GcSectionAssessmentCache,
                                                        'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                    )
                                                ),
                                                Patch(
                                                    GcSectionAssessmentCache,
                                                    Defaults(GcSectionAssessmentCache),
                                                    {
                                                           'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                                        'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        product_id: i.product_id,
                                                        sectionId: i.sectionId,
                                                        sectionName: i.sectionName,
                                                        AssessmentStatus: i.AssessmentStatus,
                                                        SstatusUpdate: i.SstatusUpdate,
                                                        sectionSequence: i.sectionSequence,
                                                        sectionComment: i.sectionComment
                                                    }
                                                );
                                                ,
                                                Patch(
                                                    GcSectionAssessmentCache,
                                                    LookUp(
                                                        GcSectionAssessmentCache,
                                                        'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                    ),
                                                    {
                                                          'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                                        'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        product_id: i.product_id,
                                                        sectionId: i.sectionId,
                                                        sectionName: i.sectionName,
                                                        AssessmentStatus: i.AssessmentStatus,
                                                        SstatusUpdate: i.SstatusUpdate,
                                                        sectionSequence: i.sectionSequence,
                                                        sectionComment: i.sectionComment
                                                    }
                                                );
                                            );//if
                                        );//forall
                                SaveData(
                                    GcSectionAssessmentCache,
                                    "localsectionassessment"
                                );
                            
                                ClearCollect(GcCheckpointAssessmentCache,Filter(GcCheckpointAssessment,CstatusUpdate = 0 || CstatusUpdate = 1));
                                 //update
                                   ForAll(
                                            GcCheckpointAssessmentCache1 As i,
                                            If(
                                                IsBlank(
                                                    LookUp(
                                                        GcCheckpointAssessmentCache,
                                                         checkpointAssessment_id = i.checkpointAssessment_id
                                                    )
                                                ),
                                                Patch(
                                                    GcCheckpointAssessmentCache,
                                                    Defaults(GcCheckpointAssessmentCache),
                                                    {
                                                        checkpointAssessment: i.checkpointAssessment,
                                                        checkpointAssessment_id: i.checkpointAssessment_id,
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        product_id: i.product_id,
                                                        sectionId: i.sectionId,
                                                        checkpointId: i.checkpointId,
                                                        checkpointName: i.checkpointName,
                                                        AssessmentStatus: i.AssessmentStatus,
                                                        CstatusUpdate: i.CstatusUpdate,
                                                        CheckpointSequence: i.CheckpointSequence,
                                                        checkpointComment: i.checkpointComment
                                                    }
                                                );
                                                ,
                                                Patch(
                                                    GcCheckpointAssessmentCache,
                                                    LookUp(
                                                        GcCheckpointAssessmentCache,
                                                        checkpointAssessment_id= i.checkpointAssessment_id
                                                    ),
                                                    {
                                                       checkpointAssessment: i.checkpointAssessment,
                                                        checkpointAssessment_id: i.checkpointAssessment_id,
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        product_id: i.product_id,
                                                        sectionId: i.sectionId,
                                                        checkpointId: i.checkpointId,
                                                        checkpointName: i.checkpointName,
                                                        AssessmentStatus: i.AssessmentStatus,
                                                        CstatusUpdate: i.CstatusUpdate,
                                                        CheckpointSequence: i.CheckpointSequence,
                                                        checkpointComment: i.checkpointComment
                                                    }
                                                );
                                            );//if
                                        );//forall
                                SaveData(
                                    GcCheckpointAssessmentCache,
                                    "localcheckpointassessment"
                                );
                            
                                ClearCollect(GC_checkpointItemAssessmentCache,Filter(GC_checkpointItemAssessment,CIstatusUpdate = 0 || CIstatusUpdate = 1));
                                //update
                                    ForAll(
                                            GC_checkpointItemAssessmentCache1 As i,
                                            If(
                                                IsBlank(
                                                    LookUp(
                                                        GC_checkpointItemAssessmentCache,
                                                         'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                                    )
                                                ),
                                                Patch(
                                                    GC_checkpointItemAssessmentCache,
                                                    Defaults(GC_checkpointItemAssessmentCache),
                                                    {
                                                       'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                                        'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                        checkpointAssessment_Id: i.checkpointAssessment_Id,
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        product_id: i.product_id,
                                                        section_Id: i.section_Id,
                                                        checkpointItem_annotation: i.checkpointItem_annotation,
                                                        checkpointItemId: i.checkpointItemId,
                                                        checkpointItemName: i.checkpointItemName,
                                                        assessmentStatus: i.assessmentStatus,
                                                        CIstatusUpdate: i.CIstatusUpdate,
                                                        checkpointitemSequence: i.checkpointitemSequence,
                                                        checkpointItemComment: i.checkpointItemComment
                                                    }
                                                );
                                               ,
                                                Patch(
                                                    GC_checkpointItemAssessmentCache,
                                                    LookUp(
                                                        GC_checkpointItemAssessmentCache,
                                                        'checkpointItemAssessment (quantum_checkpointitemassessment)'= i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                                    ),
                                                    {
                                                       'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                                        'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                        checkpointAssessment_Id: i.checkpointAssessment_Id,
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        product_id: i.product_id,
                                                        section_Id: i.section_Id,
                                                        checkpointItem_annotation: i.checkpointItem_annotation,
                                                        checkpointItemId: i.checkpointItemId,
                                                        checkpointItemName: i.checkpointItemName,
                                                        assessmentStatus: i.assessmentStatus,
                                                        CIstatusUpdate: i.CIstatusUpdate,
                                                        checkpointitemSequence: i.checkpointitemSequence,
                                                        checkpointItemComment: i.checkpointItemComment
                                                    }
                                                );
                                            );//if
                                        );//forall
                                SaveData(
                                    GC_checkpointItemAssessmentCache,
                                    "localcheckpointitemassessment"
                                );
                            
                            
                        PaddingLeft: =3
                        PaddingRight: =3
                        Reset: =IsResetCboxItemsAS=true
                        Size: =If(App.Width>830,AllScreensCSS.RfontsizeInput,App.Width>770,10)
                        Text: =ThisItem.checkpointItemName
                        Width: |-
                            =//Parent.TemplateWidth - 104
                            //Parent.Width/1.4
                            //If(App.Width<830,Parent.Width/1.75,App.Width<770,Parent.Width/1.65,Parent.Width/1.45)
                            Parent.Width-(Button18_2.Width+Image1_1.Width+Circle1.Width+imgTickactive.Width+300)
                        Y: =2
                        ZIndex: =7

                    Button18_2 As button:
                        BorderColor: =ColorFade(Self.Color, -15%)
                        Color: =AllScreensCSS.RColorBlack
                        DisplayMode: |-
                            =//If(IsEmpty(ThisItem.checkpointItemAssessment.checkpointItemComment) || IsBlank(ThisItem.checkpointItemAssessment.checkpointItemComment),DisplayMode.Disabled,Edit)
                            If(LookUp(GC_checkpointItemAssessment,assignmentId.Id=varAssignmentId &&checkpointItemId.checkpointItemId=ThisItem.checkpointItemId && bankUnitId.Id=varBankUnitId,checkpointItemComment)=Blank(),DisplayMode.Disabled,DisplayMode.Edit)
                        Fill: =AllScreensCSS.RColorWhite
                        Font: =AllScreensCSS.RFont
                        HoverColor: =Self.Color
                        HoverFill: =Self.Fill
                        OnSelect: |-
                            =Set(varComment,true);
                            Set(varItemComment,true);
                            Set(varCheckpointitemID,ThisItem.checkpointItemId);
                        PaddingLeft: =20
                        PressedBorderColor: =Self.BorderColor
                        PressedColor: =Self.Color
                        PressedFill: =Self.Fill
                        Size: |-
                            =//AllScreensCSS.RfontsizeInput
                            //If(App.Width<830,AllScreensCSS.RLabelFontSize,App.Width<770,AllScreensCSS.RLabelFontSize,(AllScreensCSS.RfontsizeInput-2))
                            If(App.Width>1025,11,8)
                        Text: ="View Comment"
                        Width: |-
                            =//If(App.Width<830,Parent.Width/5.6,App.Width<770,Parent.Width/6.4,Parent.Width/10)
                            If(App.Width<830,Parent.Width/5.8,App.Width<770,Parent.Width/5.8,Parent.Width/7)
                        X: |-
                            =//cboxItemsAS.X+cboxItemsAS.Width+30
                            Circle1.X+Circle1.Width+30
                        Y: =45
                        ZIndex: =8

                    Image1_1 As image:
                        Height: =20
                        Image: |-
                            =If(
                                CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 2
                                    )
                                ) > 0,
                                greenUpload,
                                CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 1
                                    )
                                ) > 0,
                                BlackUploadnew,
                                   CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 0
                                    )
                                ) > 0,
                                'wd9G0yiWsMtJXt7-Save-Button-PNG-Transparent-Photo'
                            
                            )
                              
                        OnSelect: =Select(Parent)
                        Visible: |-
                            =/*If(CountRows(Filter(GC_checkpointItemAssessment,assignmentId.Id=varAssignmentId && bankUnitId.Id=varBankUnitId &&checkpointItemId.checkpointItemId=ThisItem.checkpointItemId && CIstatusUpdate=2 || CIstatusUpdate=1||CIstatusUpdate=0))>0,true,false)*/
                            If(
                                CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        (assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 2) 
                                        || (assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 1)
                                         || (assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 0)
                                    )
                                ) > 0,
                                true,
                                false
                            )
                        Width: =20
                        X: |-
                            =//Circle1.X-Circle1.Width-Self.Width
                            cboxItemsAS.X+cboxItemsAS.Width+30
                        Y: =glryItmesAS.TemplateHeight/2.5
                        ZIndex: =9

                    lblSyncindicatorBS_3 As label:
                        Align: =Align.Center
                        AutoHeight: =true
                        Color: =RGBA(116, 116, 116, 1)
                        Font: =AllScreensCSS.RFont
                        Height: =39
                        OnSelect: =Select(Parent)
                        Size: =8
                        Text: |-
                            =If(
                                CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 2
                                    )
                                ) > 0,
                                "Submitted",
                                CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 1
                                    )
                                ) > 0   ,
                                "Submitted"
                            ,
                                 CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 0
                                    )
                                ) > 0,"Saved")
                              
                        Visible: |-
                            =If(
                                CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        (assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 2) 
                                        || (assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 1)
                                         || (assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointItemId.checkpointItemId = ThisItem.checkpointItemId && CIstatusUpdate = 0)
                                    )
                                ) > 0,
                                true,
                                false
                            )
                        Width: =90
                        X: =cboxItemsAS.Width/1.01
                        Y: =Image1_1.Height+Image1_1.Y
                        ZIndex: =10

                    imgcmntSS_3 As image:
                        Height: =If(Parent.Width>821,20,18)
                        Image: =Comment
                        OnSelect: =Select(Parent)
                        Width: =If(Parent.Width>821,25,20)
                        X: =Button18_2.X+2
                        Y: =Button18_2.Y+(Button18_2.Height/3.2)
                        ZIndex: =11

                    imgcmntSS_4 As image:
                        Height: =If(Parent.Width>821,20,18)
                        Image: =Comment
                        OnSelect: =Select(Parent)
                        Visible: =false
                        Width: =If(Parent.Width>821,25,20)
                        X: =Button7.X+5
                        Y: =Button7.Y+(Button7.Height/3)
                        ZIndex: =12

                ctnFooterAS As groupContainer.verticalAutoLayoutContainer:
                    AlignInContainer: =AlignInContainer.SetByContainer
                    FillPortions: =0
                    Height: =100
                    LayoutAlignItems: =LayoutAlignItems.Center
                    LayoutGap: =20
                    LayoutJustifyContent: =LayoutJustifyContent.Center
                    LayoutMinHeight: =60
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    PaddingBottom: =40
                    PaddingLeft: =40
                    PaddingRight: =40
                    Width: =Parent.Width
                    Y: =glryItmesAS.Y+glryItmesAS.Height
                    ZIndex: =2

                    btnSubmit As button:
                        AlignInContainer: =AlignInContainer.Center
                        Color: |
                            =RGBA(255, 255, 255, 1)
                        DisplayMode: |-
                            =If(
                                Connection.Connected = true,
                                DisplayMode.Edit,
                                DisplayMode.Disabled
                            )
                            //DisplayMode.Edit
                        Fill: =AllScreensCSS.RActiveColor
                        Height: =50
                        HoverFill: |-
                            =///ColorFade(RGBA(56, 96, 178, 1), -20%)
                            Self.Fill
                        OnSelect: |
                            =Set(VarSubmitError,false);
                            //for safety check
                            If(
                                DateDiff(
                                    UserLastNavigatedTime,
                                    Now(),
                                    TimeUnit.Seconds
                                ) > SafetyCheckTime,
                                Set(
                                    safetyPopup,
                                    true
                                );
                                ,
                                Set(
                                    UserLastNavigatedTime,
                                    Now()
                                );
                                
                            );
                            Set(
                                varSpinner,
                                true
                            );
                            Set(
                                Varpatchlabel,
                                "Uploading findings for " & LookUp(
                                    GC_templateCheckpoints,
                                    checkpointId = ChId,
                                    checkpointName
                                ) & " . Please do not exit the app till upload is complete."
                            );
                                //for changing (tabs) depending on  assessment status upcomming to inprogress for first time
                                //if collection contain assessment status upcomming or inprogress1 then we set variable to navigate dashboard screen 
                            If(
                                IsBlank(
                                    LookUp(
                                        gcProjectAssignment,
                                        (Id = varAssignmentId && isCompleted = "Inprogress1") || (Id = varAssignmentId && isCompleted = "Upcomming")
                                    )
                                ),
                                Set(
                                    VarNav,
                                    false
                                ),
                                Set(
                                    VarNav,
                                    true
                                );
                                
                            //Updating assignment status and sync status inside collection first time for detecting unpatched data
                            UpdateIf(
                                    gcProjectAssignment,
                                    Id = varAssignmentId && bankId.Id = VarBankId && isCompleted = "Inprogress1",
                                    {
                                        isCompleted: "Inprogress",
                                        AstatusUpdate: 1
                                    }
                                );
                                
                            );
                            Concurrent(
                               //network not available to patch then set message
                                Set(
                                    VarPopupText,
                                    "Network is not available , please try after sometime ."
                                );
                                ,
                            //updating bank assessment status from 0 to 1 first time for detecting unpatched data
                                UpdateIf(
                                    GC_bankAssessment,
                                    assignmentId.Id = varAssignmentId && bankId.Id = VarBankId && BstatusUpdate = 0,
                                    {BstatusUpdate: 1}
                                );
                                ,
                            //updating unit assessment status from 0 to 1 first time for detecting unpatched data and sync status update
                                UpdateIf(
                                    GC_unitAssessment,
                                    assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && UstatusUpdate = 0,
                                    {UstatusUpdate: 1}
                                );
                                ,
                            //updating Section assessment status from 0 to 1 for detecting unpatched data and sync status update
                                UpdateIf(
                                    GcSectionAssessment,
                                    'sectionAssessment (quantum_sectionassessment)' = varSA && SstatusUpdate = 0,
                                    {SstatusUpdate: 1}
                                );
                                ,
                            //updating checkpoint assessment status from 0 to 1 for detecting unpatched data and sync status update
                                UpdateIf(
                                    GcCheckpointAssessment,
                                    checkpointAssessment_id = GuidId && CstatusUpdate = 0,
                                    {CstatusUpdate: 1}
                                );
                                ,
                            //updating Checkpoint item assessment status from 0 to 1 for detecting unpatched data and sync status update
                                UpdateIf(
                                    GC_checkpointItemAssessment,
                                    checkpointAssessment_Id.checkpointAssessment_id = GuidId && CIstatusUpdate = 0,
                                    {CIstatusUpdate: 1}
                                );
                                ,
                            //updating checkpointitem action's item status from 0 to 1 for detecting unpatched data
                                UpdateIf(
                                    GC_checkpointItem_ActionItem,
                                    checkpoint_id.checkpointAssessment_id = GuidId && CIAstatusUpdate = 0,
                                    {CIAstatusUpdate: 1}
                                );
                                ,
                               //updating checkpoint images status from 0 to 1 for detecting unpatched data
                                UpdateIf(
                                    GC_checkpointItem_Images,
                                    checkpoint_id.checkpointAssessment_id = GuidId && CIIstatusUpdate = 0,
                                    {CIIstatusUpdate: 1}
                                );
                                
                            );
                            //here we check new records are available(checkpointItemAssessment ,checkpointAction And checkpointImages) for patch or not. If not available then set message "No new assessment records found for submission." 
                            //otherwise If available then we check status 2 record of current submitted data is available in unit ,section and checkpoint table if available then update status 2 to status 1 (for show green and gray tick)
                            If(
                                CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CIstatusUpdate = 1
                                    )
                                ) < 1 && CountRows(
                                    Filter(
                                        GC_checkpointItem_ActionItem,
                                        (assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CIAstatusUpdate = 1) || (bankUnitId.Id = varBankUnitId && Action_status = "Close" && CIAstatusUpdate = 1)
                                    )
                                ) < 1 && CountRows(
                                    Filter(
                                        GC_checkpointItem_Images,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CIIstatusUpdate = 1
                                    )
                                ) < 1,
                                 //Data not available to patch then set message
                                Set(
                                    VarPopupText,
                                    "No new assessment records found for submission. "
                                );
                                ,
                                Concurrent(
                                    //if we update existing unit then do status 2 to 1 for show green and grey tick
                                    UpdateIf(
                                        GC_unitAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && UstatusUpdate = 2,
                                        {UstatusUpdate: 1}
                                    );
                                    ,
                                    //if we update existing section then do status 2 to 1 for show green and grey tick
                                    UpdateIf(
                                        GcSectionAssessment,
                                        'sectionAssessment (quantum_sectionassessment)' = varSA && SstatusUpdate = 2,
                                        {SstatusUpdate: 1}
                                    );
                                    ,
                                //if we update existing checkpoint then do status 2 to 1 for show green and grey tick
                                    UpdateIf(
                                        GcCheckpointAssessment,
                                        checkpointAssessment_id = GuidId && CstatusUpdate = 2,
                                        {CstatusUpdate: 1}
                                    );
                                );
                                
                            //if network available then patch 1 status data to dataverse
                            If(
                                    Connection.Connected,
                                    Concurrent(
                                      
                                       //to delete deleted actions from dataverse
                                        Clear(gcActionItemDelete1);
                                        ForAll(
                                            gcActionItemDelete As i,
                                            RemoveIf(
                                                checkpointItem_ActionItem,
                                                checkpointItemActionItemsId = i.id
                                            );
                                            RemoveIf(
                                                GC_checkpointItem_ActionItem,
                                                checkpointItemActionItemsId = i.id
                                            );
                                            If(
                                                !IsBlank(
                                                    LookUp(
                                                        checkpointItem_ActionItem,
                                                        checkpointItemActionItemsId = i.id
                                                    )
                                                ),
                                                Collect(
                                                    gcActionItemDelete1,
                                                    {id: i.id}
                                                );
                                            );
                                        );
                                        If(
                                            !IsEmpty(gcActionItemDelete1),
                                            Notify("All locally deleted action are not removed from server.")
                                        );
                                        ClearCollect(
                                            gcActionItemDelete,
                                            gcActionItemDelete1
                                        );
                                        SaveData(
                                            gcActionItemDelete,
                                            "localgcActionItemDelete"
                                        );
                                        ,
                                       //to delete deleted images from dataverse
                                        Clear(gcImageDelete1);
                                        ForAll(
                                            gcImageDelete As i,
                                            RemoveIf(
                                                checkpointItem_Images,
                                                checkpointItemImagesId = i.id
                                            );
                                            RemoveIf(
                                                GC_checkpointItem_Images,
                                                checkpointItemImagesId = i.id
                                            );
                                            If(
                                                !IsBlank(
                                                    LookUp(
                                                        checkpointItem_Images,
                                                        checkpointItemImagesId = i.id
                                                    )
                                                ),
                                                Collect(
                                                    gcImageDelete1,
                                                    {id: i.id}
                                                );
                                            );
                                        );
                                        If(
                                            !IsEmpty(gcImageDelete1),
                                            Notify("All locally deleted images are not removed from server.")
                                        );
                                        ClearCollect(
                                            gcImageDelete,
                                            gcImageDelete1
                                        );
                                        SaveData(
                                            gcImageDelete,
                                            "localgcImageDelete"
                                        );
                                        ,
                                    //updating isCompleted status of assignment into assigment table only for the first time when submit button is clicked
                                        UpdateIf(
                                            assignments,
                                            Id = varAssignmentId && isCompleted = "Upcomming",
                                            {isCompleted: "Inprogress"}
                                        );
                                    //updating patch status 2 to collection gcProjectAssignment
                            UpdateIf(
                                            gcProjectAssignment,
                                            Id = varAssignmentId,
                                            {AstatusUpdate: 2}
                                        );
                                    //updating Assessment_Status of  bank into bank Assessment table only for the first time when submit button is clicked
                            UpdateIf(
                                            bankAssessment,
                                            assignmentId.Id = varAssignmentId && bankId.Id = VarBankId && Assessment_Status = "Upcomming",
                                            {Assessment_Status: "Inprogress"}
                                        );
                                   //updating patch status 2 to collection GC_bankAssessment
                            UpdateIf(
                                            GC_bankAssessment,
                                            assignmentId.Id = varAssignmentId,
                                            {BstatusUpdate: 2}
                                        );
                                        ,
                                   //updating Assessment_Status of  unit into unit Assessment table only for the first time when submit button is clicked
                                        Set(
                                            VarUpdateunit,
                                            UpdateIf(
                                                unitAssessment,
                                                assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && Assessment_status = "Upcomming",
                                                {Assessment_status: "Inprogress"}
                                            );
                                        );
                                   //updating patch status 2 to collection GC_unitAssessment
                            UpdateIf(
                                            GC_unitAssessment,
                                            assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId,
                                            {UstatusUpdate: 2}
                                        );
                                    );
                                    //concurrent 
                                    //Checking section record is available or not for patch => if Available then patch and get specific section data and update lookup using for loop 
                            If(
                                        CountRows(
                                            Filter(
                                                GcSectionAssessment,
                                                assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && SstatusUpdate = 1
                                            )
                                        ) > 0,
                                    //patching status 1 section assessment data to dataverse table
                                        Patch(
                                            sectionAssessment,
                                            ShowColumns(
                                                DropColumns(
                                                    Filter(
                                                        GcSectionAssessment,
                                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && SstatusUpdate = 1
                                                    ),
                                                    "SstatusUpdate"
                                                ),
                                                "quantum_sectionassessmentid",
                                                "shlaf_assignmentId",
                                                "shlaf_bankUnitId",
                                                "shlaf_product_id",
                                                "quantum_sectionassessment",
                                                "shlaf_sectionId",
                                                "quantum_sectionname",
                                                "shlaf_sectioncomment",
                                                "quantum_assessmentstatus",
                                                "cr28a_sectionsequence"
                                            )
                                        );
                                        If(
                                            (!IsEmpty(Errors(sectionAssessment))),
                                            Notify(
                                                "Section Patch function Error " & Concat(
                                                    Errors(sectionAssessment),
                                                    Column & ": " & Message
                                                ),
                                                NotificationType.Error
                                            );
                                            Set(VarSubmitError,true);
                                            Set(
                                                VarPopupText,
                                                "Section Patch function Error " 
                                                /*& Concat(
                                                    Errors(sectionAssessment),
                                                    Column & ": " & Message
                                                )*/
                                            );
                                            ,
                                            Set(
                                                VarPopupText,
                                                "Assessment records submitted successfully."
                                            );
                                            
                            //getting specific section assessment data from dataverse and store it into temporary collection beacause we need unique indetifier from dataverse
                            ClearCollect(
                                                TempSectionAssessment,
                                                Filter(
                                                    sectionAssessment,
                                                    assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && 'sectionAssessment (quantum_sectionassessment)' = varSA
                                                )
                                            );
                                            
                            //updating unique identifier ,comment ,assignment status and patch status to section collection from temporary collection 
                            ForAll(
                                                TempSectionAssessment As i,
                                                Concurrent(
                                                    UpdateIf(
                                                        GcSectionAssessment,
                                                        'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)' && SstatusUpdate = 1,
                                                        {
                                                            'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                                            sectionComment: i.sectionComment,
                                                            AssessmentStatus: i.AssessmentStatus,
                                                            SstatusUpdate: 2
                                                        }
                                                    );
                                                    ,
                                //updating sectionid lookup for checkpoint assessment collection to get updated unique key from dataverse using temporary collection
                                                    UpdateIf(
                                                        GcCheckpointAssessment,
                                                        sectionId.'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)',
                                                        {
                                                            sectionId: LookUp(
                                                                TempSectionAssessment,
                                                                'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                            )
                                                        }
                                                    );
                                                    ,
                            //updating sectionId in checkpointAssessment assessment collection to get updated unique key from dataverse using temporary collection
                                                    UpdateIf(
                                                        GC_checkpointItemAssessment,
                                                        section_Id.'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)',
                                                        {
                                                            section_Id: LookUp(
                                                                TempSectionAssessment,
                                                                'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                            )
                                                        }
                                                    );
                                                    ,
                              //updating sectionId  in checkpoint Action item collection to get updated unique key from dataverse  using temporary collection      
                                                    UpdateIf(
                                                        GC_checkpointItem_ActionItem,
                                                        section_id.'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)',
                                                        {
                                                            section_id: LookUp(
                                                                TempSectionAssessment,
                                                                'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                            )
                                                        }
                                                    );
                                                    ,
                                //updating sectionId  in checkpoint images collection to get updated unique key from dataverse using temporary collection
                                                    UpdateIf(
                                                        GC_checkpointItem_Images,
                                                        section_id.'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)',
                                                        {
                                                            section_id: LookUp(
                                                                TempSectionAssessment,
                                                                'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                            )
                                                        }
                                                    );
                                                );
                                            );
                                    //if
                                       //Checking checkpoint record is available or not for patch => if Available then patch and get specific section data and update lookup using for loop 
                            If(
                                                CountRows(
                                                    Filter(
                                                        GcCheckpointAssessment,
                                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CstatusUpdate = 1
                                                    )
                                                ) > 0,
                                        //patching status 1 checkpoint assessment data to dataverse table
                                                Patch(
                                                    checkpointAssessment,
                                                    ShowColumns(
                                                        DropColumns(
                                                            Filter(
                                                                GcCheckpointAssessment,
                                                                assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CstatusUpdate = 1
                                                            ),
                                                            "CstatusUpdate"
                                                        ),
                                                        "quantum_checkpointassessmentid",
                                                        "shlaf_assignmentId",
                                                        "shlaf_bankUnitId",
                                                        "shlaf_product_id",
                                                        "quantum_sectionId",
                                                        "quantum_checkpointassessment",
                                                        "shlaf_checkpointId",
                                                        "quantum_checkpointname",
                                                        "quantum_checkpoint_annotation",
                                                        "shlaf_checkpointcomment",
                                                        "quantum_assessmentstatus",
                                                        "cr28a_checkpointsequence"
                                                    )
                                                );
                                                If(
                                                    (!IsEmpty(Errors(checkpointAssessment))),
                                                    Notify(
                                                        "Checkpoint Patch function Error " & Concat(
                                                            Errors(checkpointAssessment),
                                                            Column & ": " & Message
                                                        ),
                                                        NotificationType.Error
                                                    );
                                                     Set(VarSubmitError,true);
                                                    Set(
                                                        VarPopupText,
                                                        "Checkpoint Patch function Error " 
                                                        /*& Concat(
                                                            Errors(checkpointAssessment),
                                                            Column & ": " & Message
                                                        )*/
                                                    );
                                                    ,
                                                    Set(
                                                        VarPopupText,
                                                        "Assessment records submitted successfully."
                                                    );
                                        //getting specific checkpoint data from dataverse and store it into temporary collection beacause we need unique indetifier from dataverse
                            ClearCollect(
                                                        TempCheckpointAssessment,
                                                        Filter(
                                                            checkpointAssessment,
                                                            assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointAssessment_id = GuidId
                                                        )
                                                    );
                                 //updating unique identifire ,comment ,assignment status and patch status to checkpoint collection from temporary collection  
                            ForAll(
                                                        TempCheckpointAssessment As j,
                                                        Concurrent(
                                                            UpdateIf(
                                                                GcCheckpointAssessment,
                                                                checkpointAssessment_id = j.checkpointAssessment_id && CstatusUpdate = 1,
                                                                {
                                                                    checkpointAssessment: j.checkpointAssessment,
                                                                    checkpointComment: j.checkpointComment,
                                                                    AssessmentStatus: j.AssessmentStatus,
                                                                    CstatusUpdate: 2
                                                                }
                                                            );
                                                            ,
                            //updating checkpointAssessmentId lookup in checkpointItem assessment collection to get updated unique key from dataverse using temporary collection
                                                            UpdateIf(
                                                                GC_checkpointItemAssessment,
                                                                checkpointAssessment_Id.checkpointAssessment_id = j.checkpointAssessment_id,
                                                                {
                                                                    checkpointAssessment_Id: LookUp(
                                                                        TempCheckpointAssessment,
                                                                        checkpointAssessment_id = j.checkpointAssessment_id
                                                                    )
                                                                }
                                                            );
                                                            ,
                              //updating checkpointId lookup in checkpoint Action item collection to get updated unique key from dataverse  using temporary collection      
                                                            UpdateIf(
                                                                GC_checkpointItem_ActionItem,
                                                                checkpoint_id.checkpointAssessment_id = j.checkpointAssessment_id,
                                                                {
                                                                    checkpoint_id: LookUp(
                                                                        TempCheckpointAssessment,
                                                                        checkpointAssessment_id = j.checkpointAssessment_id
                                                                    )
                                                                }
                                                            );
                                                            ,
                                //updating checkpointId lookup in checkpoint images collection to get updated unique key from dataverse using temporary collection
                                                            UpdateIf(
                                                                GC_checkpointItem_Images,
                                                                checkpoint_id.checkpointAssessment_id = j.checkpointAssessment_id,
                                                                {
                                                                    checkpoint_id: LookUp(
                                                                        TempCheckpointAssessment,
                                                                        checkpointAssessment_id = j.checkpointAssessment_id
                                                                    )
                                                                }
                                                            );
                                                        );
                                                    );
                               //Checking checkpointItem record is available or not for patch => if Available then patch and get specific checkpoint data and update lookup using for loop 
                            If(
                                                        CountRows(
                                                            Filter(
                                                                GC_checkpointItemAssessment,
                                                                assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CIstatusUpdate = 1
                                                            )
                                                        ) > 0,
                                 //patching status 1 checkpointItem assessment data to dataverse table
                                                        Set(
                                                            VarResultPatchItem,
                                                            Patch(
                                                                checkpointItemAssessment,
                                                                ShowColumns(
                                                                    DropColumns(
                                                                        Filter(
                                                                            GC_checkpointItemAssessment,
                                                                            assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CIstatusUpdate = 1
                                                                        ),
                                                                        "CIstatusUpdate"
                                                                    ),
                                                                    "quantum_checkpointitemassessmentid",
                                                                    "shlaf_assignmentId",
                                                                    "shlaf_bankUnitId",
                                                                    "shlaf_product_id",
                                                                    "shlaf_section_Id",
                                                                    "quantum_checkpointAssessment_Id",
                                                                    "quantum_checkpointitemassessment",
                                                                    "shlaf_checkpointItemId",
                                                                    "quantum_checkpointitemname",
                                                                    "quantum_checkpointitem_annotation",
                                                                    "shlaf_checkpointitemcomment",
                                                                    "quantum_assessmentstatus",
                                                                    "cr28a_checkpointitemsequence",
                                                                    "shlaf_checkpointitemsortsequence"
                                                                )
                                                            );
                                                        );
                                                        If(
                                                            (!IsEmpty(Errors(checkpointItemAssessment))),
                                                            Notify(
                                                                "CheckpointItem Patch function Error " & Concat(
                                                                    Errors(checkpointItemAssessment),
                                                                    Column & ": " & Message
                                                                ),
                                                                NotificationType.Error
                                                            );
                                                             Set(VarSubmitError,true);
                                                            Set(
                                                                VarPopupText,
                                                                "CheckpointItem Patch function Error " 
                                                                /*& Concat(
                                                                    Errors(checkpointItemAssessment),
                                                                    Column & ": " & Message
                                                                )*/
                                                            );
                                                            ,
                                                            Set(
                                                                VarPopupText,
                                                                "Assessment records submitted successfully."
                                                            );
                                        //getting specific checkpoint data from dataverse and store it into temporary collection beacause we need unique indetifier from dataverse       
                            ClearCollect(
                                                                TempCheckpointItemAssessment,
                                                                Filter(
                                                                    checkpointItemAssessment,
                                                                    assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpointAssessment_Id.checkpointAssessment_id = GuidId
                                                                )
                                                            );
                                 //updating unique identifire ,comment ,assignment status and patch status to checkpoint item collection from temporary collection  
                            ForAll(
                                                                TempCheckpointItemAssessment As k,
                                                                Concurrent(
                                                                    UpdateIf(
                                                                        GC_checkpointItemAssessment,
                                                                        'checkpointItemAssessment (quantum_checkpointitemassessment)' = k.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIstatusUpdate = 1,
                                                                        {
                                                                            'checkpointItemAssessment (quantum_checkpointitemassessmentid)': k.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                                                            assessmentStatus: k.assessmentStatus,
                                                                            checkpointItemComment: k.checkpointItemComment,
                                                                            CIstatusUpdate: 2
                                                                        }
                                                                    );
                                                                    ,
                                 //updating checkpointItemId lookup in checkpointActionItem collection to get updated unique key from dataverse  using temporary collection      
                                                                    UpdateIf(
                                                                        GC_checkpointItem_ActionItem,
                                                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = k.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                                        {
                                                                            checkpointItem_Id: LookUp(
                                                                                TempCheckpointItemAssessment,
                                                                                'checkpointItemAssessment (quantum_checkpointitemassessment)' = k.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                                                            )
                                                                        }
                                                                    );
                                                                    ,
                                //updating checkpointItemId lookup in checkpoint images collection to get updated unique key from dataverse using temporary collection
                                                                    UpdateIf(
                                                                        GC_checkpointItem_Images,
                                                                        checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = k.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                                        {
                                                                            checkpointItem_Id: LookUp(
                                                                                TempCheckpointItemAssessment,
                                                                                'checkpointItemAssessment (quantum_checkpointitemassessment)' = k.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                                                            )
                                                                        }
                                                                    );
                                                                );
                                                            );
                                  //  Concurrent(
                                           //Checking checkpointActionItem record is available or not for patch => if Available then patch and get specific checkpointActionItem data 
                            If(
                                                                CountRows(
                                                                    Filter(
                                                                        GC_checkpointItem_ActionItem,
                                                                        (assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CIAstatusUpdate = 1) || (bankUnitId.Id = varBankUnitId && Action_status = "Close" && CIAstatusUpdate = 1)
                                                                    )
                                                                ) > 0,
                                                                Set(
                                                                    Varpatchlabel,
                                                                    "Uploading Actions, Images."
                                                                );
                                         //patching status 1 checkpointActionItem assessment data to dataverse table
                            Patch(
                                                                    checkpointItem_ActionItem,
                                                                    ShowColumns(
                                                                        DropColumns(
                                                                            Filter(
                                                                                GC_checkpointItem_ActionItem,
                                                                                (assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CIAstatusUpdate = 1) || (bankUnitId.Id = varBankUnitId && Action_status = "Close" && CIAstatusUpdate = 1)
                                                                            ),
                                                                            "CIAstatusUpdate"
                                                                        ),
                                                                        "quantum_checkpointitem_actionitemsid",
                                                                        "shlaf_assignmentId",
                                                                        "shlaf_bankId",
                                                                        "shlaf_bankUnitId",
                                                                        "shlaf_product_id",
                                                                        "shlaf_section_id",
                                                                        "shlaf_checkpoint_id",
                                                                        "quantum_checkpointItem_Id",
                                                                        "quantum_checkpointitemactionitemsid",
                                                                        "shlaf_actionitem_name",
                                                                        "quantum_priority",
                                                                        "quantum_materialestimate",
                                                                        "quantum_timeestimate",
                                                                        "quantum_duedate",
                                                                        "quantum_ownerid",
                                                                        "cr28a_action_status",
                                                                        "shlaf_actionsortsequence"
                                                                    )
                                                                );
                                                                If(
                                                                    (!IsEmpty(Errors(checkpointItem_ActionItem))),
                                                                    Notify(
                                                                        "CheckpointActionItem Patch function Error " & Concat(
                                                                            Errors(checkpointItem_ActionItem),
                                                                            Column & ": " & Message
                                                                        ),
                                                                        NotificationType.Error
                                                                    );
                                                                    Set(VarSubmitError,true);
                                                                    Set(
                                                                        VarPopupText,
                                                                        "CheckpointActionItem Patch function Error " & Concat(
                                                                            Errors(checkpointItem_ActionItem),
                                                                            Column & ": " & Message
                                                                        )
                                                                    );
                                                                    ,
                                                                    Set(
                                                                        VarPopupText,
                                                                        "Assessment records submitted successfully."
                                                                    );
                                        //getting specific unit wise checkpoint Action item data from dataverse to collection beacause we need unique indetifier from dataverse
                            ClearCollect(
                                                                        TempcheckpointItem_ActionItem,
                                                                        Filter(
                                                                            checkpointItem_ActionItem,
                                                                            assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpoint_id.checkpointAssessment_id = GuidId
                                                                        )
                                                                    );
                             //updating unique identifire and patch status to Checkpoint action collection from temporary collection  
                            ForAll(
                                                                        TempcheckpointItem_ActionItem As i,
                                                                        UpdateIf(
                                                                            GC_checkpointItem_ActionItem,
                                                                            checkpointItemActionItemsId = i.checkpointItemActionItemsId && CIAstatusUpdate = 1,
                                                                            {
                                                                                checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                                                                //unique key
                                                                                Action_status: i.Action_status,
                                                                                CIAstatusUpdate: 2
                                                                            }
                                                                        )
                                                                    );
                                       // ,
                                           //Checking checkpointImages record is available or not for patch => if Available then patch and get specific checkpointImages data 
                            If(
                                                                        CountRows(
                                                                            Filter(
                                                                                GC_checkpointItem_Images,
                                                                                assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CIIstatusUpdate = 1
                                                                            )
                                                                        ) > 0,
                              //patching status 1 checkpointImages assessment data to dataverse table
                                                                        Patch(
                                                                            checkpointItem_Images,
                                                                            ShowColumns(
                                                                                DropColumns(
                                                                                    Filter(
                                                                                        GC_checkpointItem_Images,
                                                                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && CIIstatusUpdate = 1
                                                                                    ),
                                                                                    "CIIstatusUpdate"
                                                                                ),
                                                                                "quantum_checkpointitem_imagesid",
                                                                                "shlaf_assignmentId",
                                                                                "shlaf_bankUnitId",
                                                                                "shlaf_product_id",
                                                                                "shlaf_section_id",
                                                                                "shlaf_checkpoint_id",
                                                                                "quantum_checkpointItem_Id",
                                                                                "quantum_checkpointitemimagesid",
                                                                                "shlaf_image_annotation",
                                                                                "quantum_image",
                                                                                "shlaf_imagesortsequence"
                                                                            )
                                                                        );
                                                                        If(
                                                                            (!IsEmpty(Errors(checkpointItem_Images))),
                                                                            Notify(
                                                                                "CheckpointImages Patch function Error " & Concat(
                                                                                    Errors(checkpointItem_Images),
                                                                                    Column & ": " & Message
                                                                                ),
                                                                                NotificationType.Error
                                                                            );
                                                                            Set(VarSubmitError,true);
                                                                            Set(
                                                                                VarPopupText,
                                                                                "CheckpointImages Patch function Error "
                                                                                /* & Concat(
                                                                                    Errors(checkpointItem_Images),
                                                                                    Column & ": " & Message
                                                                                )*/
                                                                            );
                                                                            ,
                                                                            Set(
                                                                                VarPopupText,
                                                                                "Assessment records submitted successfully."
                                                                            );
                                                                            
                            //getting specific checkpoint wise checkpoint images  data from dataverse to collection beacause we need unique indetifier from dataverse
                            ClearCollect(
                                                                                TempCheckpointItem_Images,
                                                                                Filter(
                                                                                    checkpointItem_Images,
                                                                                    assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId && checkpoint_id.checkpointAssessment_id = GuidId
                                                                                )
                                                                            );
                                 //updating unique identifire and patch status to checkpoint images collection from temporary collection  
                            ForAll(
                                                                                TempCheckpointItem_Images As i,
                                                                                UpdateIf(
                                                                                    GC_checkpointItem_Images,
                                                                                    checkpointItemImagesId = i.checkpointItemImagesId && CIIstatusUpdate = 1,
                                                                                    {
                                                                                        checkpointItem_Images: i.checkpointItem_Images,
                                                                                        //unique key
                                                                                        CIIstatusUpdate: 2
                                                                                    }
                                                                                )
                                                                            );
                                                                        );
                                                                        //checkpointImages IfError
                                                                    );
                                                                    //checkpointImages countrows
                                                                );
                                                                //checkpointActionItem IfError
                                                            );
                                                            //checkpointActionItem countrows
                                  //  );//concurrent
                                                        );
                                                        //checkpointItem IfError
                                                    );
                                                    //checkpointItem countrows 
                                                );
                                                //checkpoint IfError
                                            );
                                            //checkpoint countrows 
                                        );
                                        //Section IfError
                                    );
                                    //Section countrows
                                );
                                //Net connected 
                            );
                                    //*****************************************************************************************************************************
                                    //saving data to local cashe
                            SaveData(
                                gcProjectAssignment,
                                "localprojectassignment"
                            );
                            SaveData(
                                GC_bankAssessment,
                                "localbankassessment"
                            );
                            SaveData(
                                GC_unitAssessment,
                                "localunitassessment"
                            );
                            ClearCollect(
                                GcSectionAssessmentCache,
                                Filter(
                                    GcSectionAssessment,
                                    SstatusUpdate = 0 || SstatusUpdate = 1
                                )
                            );
                                    //update other unit 0 and 1 status data to main cache collection for savedata
                            ForAll(
                                GcSectionAssessmentCache1 As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GcSectionAssessmentCache,
                                            'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                        )
                                    ),
                                    Patch(
                                        GcSectionAssessmentCache,
                                        Defaults(GcSectionAssessmentCache),
                                        {
                                            'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                            'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            sectionName: i.sectionName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            SstatusUpdate: i.SstatusUpdate,
                                            sectionSequence: i.sectionSequence,
                                            sectionComment: i.sectionComment
                                        }
                                    );
                                    ,
                                    Patch(
                                        GcSectionAssessmentCache,
                                        LookUp(
                                            GcSectionAssessmentCache,
                                            'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                        ),
                                        {
                                            'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                            'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            sectionName: i.sectionName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            SstatusUpdate: i.SstatusUpdate,
                                            sectionSequence: i.sectionSequence,
                                            sectionComment: i.sectionComment
                                        }
                                    );
                                );
                                        //if
                            );
                                    //forall
                            SaveData(
                                GcSectionAssessmentCache,
                                "localsectionassessment"
                            );
                            ClearCollect(
                                GcCheckpointAssessmentCache,
                                Filter(
                                    GcCheckpointAssessment,
                                    CstatusUpdate = 0 || CstatusUpdate = 1
                                )
                            );
                                      //update other unit 0 and 1 status data to main cache collection for savedata
                            ForAll(
                                GcCheckpointAssessmentCache1 As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GcCheckpointAssessmentCache,
                                            checkpointAssessment_id = i.checkpointAssessment_id
                                        )
                                    ),
                                    Patch(
                                        GcCheckpointAssessmentCache,
                                        Defaults(GcCheckpointAssessmentCache),
                                        {
                                            checkpointAssessment: i.checkpointAssessment,
                                            checkpointAssessment_id: i.checkpointAssessment_id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            checkpointId: i.checkpointId,
                                            checkpointName: i.checkpointName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            CstatusUpdate: i.CstatusUpdate,
                                            CheckpointSequence: i.CheckpointSequence,
                                            checkpointComment: i.checkpointComment
                                        }
                                    );
                                    ,
                                    Patch(
                                        GcCheckpointAssessmentCache,
                                        LookUp(
                                            GcCheckpointAssessmentCache,
                                            checkpointAssessment_id = i.checkpointAssessment_id
                                        ),
                                        {
                                            checkpointAssessment: i.checkpointAssessment,
                                            checkpointAssessment_id: i.checkpointAssessment_id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            sectionId: i.sectionId,
                                            checkpointId: i.checkpointId,
                                            checkpointName: i.checkpointName,
                                            AssessmentStatus: i.AssessmentStatus,
                                            CstatusUpdate: i.CstatusUpdate,
                                            CheckpointSequence: i.CheckpointSequence,
                                            checkpointComment: i.checkpointComment
                                        }
                                    );
                                );
                                        //if
                            );
                                    //forall
                            SaveData(
                                GcCheckpointAssessmentCache,
                                "localcheckpointassessment"
                            );
                            ClearCollect(
                                GC_checkpointItemAssessmentCache,
                                Filter(
                                    GC_checkpointItemAssessment,
                                    CIstatusUpdate = 0 || CIstatusUpdate = 1
                                )
                            );
                                     //update other unit 0 and 1 status data to main cache collection for savedata
                            ForAll(
                                GC_checkpointItemAssessmentCache1 As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GC_checkpointItemAssessmentCache,
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                        )
                                    ),
                                    Patch(
                                        GC_checkpointItemAssessmentCache,
                                        Defaults(GC_checkpointItemAssessmentCache),
                                        {
                                            'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                            checkpointAssessment_Id: i.checkpointAssessment_Id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            section_Id: i.section_Id,
                                            checkpointItem_annotation: i.checkpointItem_annotation,
                                            checkpointItemId: i.checkpointItemId,
                                            checkpointItemName: i.checkpointItemName,
                                            assessmentStatus: i.assessmentStatus,
                                            CIstatusUpdate: i.CIstatusUpdate,
                                            checkpointitemSequence: i.checkpointitemSequence,
                                            checkpointItemComment: i.checkpointItemComment
                                        }
                                    );
                                    ,
                                    Patch(
                                        GC_checkpointItemAssessmentCache,
                                        LookUp(
                                            GC_checkpointItemAssessmentCache,
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                        ),
                                        {
                                            'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                            'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                            checkpointAssessment_Id: i.checkpointAssessment_Id,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            product_id: i.product_id,
                                            section_Id: i.section_Id,
                                            checkpointItem_annotation: i.checkpointItem_annotation,
                                            checkpointItemId: i.checkpointItemId,
                                            checkpointItemName: i.checkpointItemName,
                                            assessmentStatus: i.assessmentStatus,
                                            CIstatusUpdate: i.CIstatusUpdate,
                                            checkpointitemSequence: i.checkpointitemSequence,
                                            checkpointItemComment: i.checkpointItemComment
                                        }
                                    );
                                );
                                        //if
                            );
                                    //forall
                            SaveData(
                                GC_checkpointItemAssessmentCache,
                                "localcheckpointitemassessment"
                            );
                            ClearCollect(
                                GC_checkpointItem_ActionItemCache,
                                Filter(
                                    GC_checkpointItem_ActionItem,
                                    CIAstatusUpdate = 0 || CIAstatusUpdate = 1
                                )
                            );
                                    //update other unit 0 and 1 status data to main cache collection for savedata
                            ForAll(
                                GC_checkpointItem_ActionItemCache1 As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GC_checkpointItem_ActionItemCache,
                                            checkpointItemActionItemsId = i.checkpointItemActionItemsId
                                        )
                                    ),
                                    Patch(
                                        GC_checkpointItem_ActionItemCache,
                                        Defaults(GC_checkpointItem_ActionItemCache),
                                        {
                                            checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                            checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                            ActionItem_Name: i.ActionItem_Name,
                                            assignmentId: i.assignmentId,
                                            bankId: i.bankId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            priority: i.priority,
                                            OwnerId: i.OwnerId,
                                            TimeEstimate: i.TimeEstimate,
                                            MaterialEstimate: i.MaterialEstimate,
                                            CIAstatusUpdate: i.CIAstatusUpdate,
                                            Action_status: i.Action_status
                                        }
                                    );
                                    ,
                                    Patch(
                                        GC_checkpointItem_ActionItemCache,
                                        LookUp(
                                            GC_checkpointItem_ActionItemCache,
                                            checkpointItemActionItemsId = i.checkpointItemActionItemsId
                                        ),
                                        {
                                            checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                            checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                            ActionItem_Name: i.ActionItem_Name,
                                            assignmentId: i.assignmentId,
                                            bankId: i.bankId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            priority: i.priority,
                                            OwnerId: i.OwnerId,
                                            TimeEstimate: i.TimeEstimate,
                                            MaterialEstimate: i.MaterialEstimate,
                                            CIAstatusUpdate: i.CIAstatusUpdate,
                                            Action_status: i.Action_status
                                        }
                                    );
                                );
                                        //if
                            );
                                    //forall
                            SaveData(
                                GC_checkpointItem_ActionItemCache,
                                "localcheckpointitemactionitem"
                            );
                            ClearCollect(
                                GC_checkpointItem_ImagesCache,
                                Filter(
                                    GC_checkpointItem_Images,
                                    CIIstatusUpdate = 0 || CIIstatusUpdate = 1
                                )
                            );
                                    //update other unit 0 and 1 status data to main cache collection for savedata
                            ForAll(
                                GC_checkpointItem_ImagesCache1 As i,
                                If(
                                    IsBlank(
                                        LookUp(
                                            GC_checkpointItem_ImagesCache,
                                            checkpointItemImagesId = i.checkpointItemImagesId
                                        )
                                    ),
                                    Patch(
                                        GC_checkpointItem_ImagesCache,
                                        Defaults(GC_checkpointItem_ImagesCache),
                                        {
                                            checkpointItem_Images: i.checkpointItem_Images,
                                            checkpointItemImagesId: i.checkpointItemImagesId,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            Image: i.Image,
                                            image_annotation: i.image_annotation,
                                            CIIstatusUpdate: i.CIIstatusUpdate
                                        }
                                    );
                                    ,
                                    Patch(
                                        GC_checkpointItem_ImagesCache,
                                        LookUp(
                                            GC_checkpointItem_ImagesCache,
                                            checkpointItemImagesId = i.checkpointItemImagesId
                                        ),
                                        {
                                            checkpointItem_Images: i.checkpointItem_Images,
                                            checkpointItemImagesId: i.checkpointItemImagesId,
                                            assignmentId: i.assignmentId,
                                            bankUnitId: i.bankUnitId,
                                            section_id: i.section_id,
                                            checkpoint_id: i.checkpoint_id,
                                            checkpointItem_Id: i.checkpointItem_Id,
                                            product_id: i.product_id,
                                            Image: i.Image,
                                            image_annotation: i.image_annotation,
                                            CIIstatusUpdate: i.CIIstatusUpdate
                                        }
                                    );
                                );
                                        //if
                            );
                                    //forall
                            SaveData(
                                GC_checkpointItem_ImagesCache,
                                "localcheckpointitemimage"
                            );
                            Set(
                                Varpatchlabel,
                                " "
                            );
                            Set(
                                popupsuccess,
                                true
                            );
                            Set(
                                varSpinner,
                                false
                            );
                        PaddingBottom: =2
                        PaddingTop: =2
                        PressedFill: =Self.Fill
                        Text: ="Submit"
                        Width: =335
                        X: =525
                        Y: =25
                        ZIndex: =2

                    Button2_1 As button:
                        AlignInContainer: =AlignInContainer.Center
                        Fill: =AllScreensCSS.RActiveColor
                        FocusedBorderThickness: =0
                        Height: =50
                        HoverFill: |-
                            =Self.Fill
                            //ColorFade(RGBA(56, 96, 178, 1), -20%)
                        OnSelect: |-
                            =
                            Set(VarPopUpExitApp,true);
                        PaddingBottom: =2
                        PaddingTop: =2
                        PressedColor: =Self.Color
                        PressedFill: =Self.Fill
                        Text: ="Exit App"
                        Visible: =false
                        Width: =190
                        ZIndex: =3

        ctnHeaderSS_1 As groupContainer.manualLayoutContainer:
            Fill: =Header.HeaderFill
            Height: =81
            PaddingRight: =10
            Width: =Parent.Width
            ZIndex: =3

            Rectangle1_7 As rectangle:
                BorderColor: =RGBA(230, 230, 230, 1)
                BorderThickness: =1
                Fill: =RGBA(230, 230, 230, 1)
                Height: =1
                Width: =Parent.Width
                Y: =80
                ZIndex: =10

            GroupHeaderBS_2 As group:
                Height: =5
                Width: =5
                X: =40
                Y: =40
                ZIndex: =10

                imgLogoSS_1 As image:
                    DisplayMode: =DisplayMode.View
                    Fill: =RGBA(255, 255, 255, 1)
                    Height: =ctnHeaderSS_1.Height
                    Image: ='schindler-logo'
                    PaddingBottom: =5
                    PaddingLeft: =2
                    PaddingRight: =1
                    PaddingTop: =5
                    Width: =ctnHeaderSS_1.Width/12
                    ZIndex: =1

                lblAssessmentBS_3 As label:
                    Align: =Align.Center
                    Color: =Header.HeaderColor
                    Font: =Header.HeaderFont
                    FontWeight: =FontWeight.Bold
                    Height: =ctnHeaderSS_1.Height
                    Size: =Header.HeaderFontSize
                    Text: =lblProjectName.Text
                    Width: =If(Parent.Width>821,Parent.Width/1.8,Parent.Width/2.2)
                    X: =imgLogoSS_1.Width
                    ZIndex: =2

                imgUserHeaderBS_3 As image:
                    Height: =50
                    Image: =userImg
                    ImagePosition: =ImagePosition.Fill
                    RadiusBottomLeft: =ctnHeaderSS_1.Height/0.10
                    RadiusBottomRight: =ctnHeaderSS_1.Height/0.10
                    RadiusTopLeft: =ctnHeaderSS_1.Height/0.10
                    RadiusTopRight: =ctnHeaderSS_1.Height/0.10
                    Width: =50
                    X: =Image2_38.Width+Image2_38.X+20
                    Y: =(ctnHeaderSS_1.Height-Self.Height)/2
                    ZIndex: =4

                lblUsernameHeaderBS_3 As label:
                    Font: =Header.HeaderFont
                    FontWeight: =FontWeight.Bold
                    Height: =ctnHeaderSS_1.Height
                    PaddingLeft: =20
                    Size: =Header.HeaderUserFontSize-2
                    Text: |
                        =username
                    Width: =ctnHeaderSS_1.Width/5.8
                    X: =imgUserHeaderBS_3.Width+imgUserHeaderBS_3.X
                    ZIndex: =5

                Component2_5 As Component2:
                    Visible: =false
                    X: =lblUsernameHeaderBS_3.Width+lblUsernameHeaderBS_3.X
                    Y: =(ctnHeaderDS.Height-Self.Height)/2
                    ZIndex: =9

            Image2_38 As image:
                Height: =40
                Image: =If(Connection.Connected,'internet green icon-1x','internet-1x')
                Width: =30
                X: =lblAssessmentBS_3.X+lblAssessmentBS_3.Width+20
                Y: =25
                ZIndex: =11

    Timer2_3 As timer:
        AutoStart: =//If(varSafety=true,true,false)
        Duration: =//1000
        OnTimerEnd: |-
            =/*If(
                UserLastNavigated < DateAdd(
                    Now(),
                    LogOutTimer,
                    Seconds
                ),
                Set(safetyPopup,true);
            )*/
        Repeat: =true
        Visible: =false
        ZIndex: =2

    Image13 As image:
        Fill: =RGBA(0, 0, 0, 0.29)
        Height: =Parent.Height
        Image: ='ajax-loader 2'
        ImagePosition: =ImagePosition.Center
        Visible: =varSpinner
        Width: =Parent.Width
        X: =(Parent.Width-Self.Width)/2
        Y: =(Parent.Height-Self.Height)/2
        ZIndex: =8

    grSafetyHeaderAS As group:
        Height: =5
        Width: =5
        X: =20
        Y: =8
        ZIndex: =8

        Rectangle1_11 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =safetyPopup = true
            Width: =Parent.Width
            ZIndex: =3

        Rectangle2_11 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =250
            Visible: =safetyPopup = true
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =4

        Image2_23 As image:
            Height: =64
            Image: =safety_pageImage
            Visible: =safetyPopup = true
            Width: =64
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_11.Y+20
            ZIndex: =5

        Label2_13 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            Height: =90
            PaddingLeft: =15
            PaddingRight: =15
            Size: =14
            Text: ="Since you are idle for more than 30 minutes you need to perform safety check again before resuming the assessment."
            Visible: =safetyPopup = true
            Width: =324
            X: =(Parent.Width-Self.Width)/2
            Y: |-
                =//Label1_22.Y+ Self.Height+5
                Image2_23.Y+Image2_23.Height-5
            ZIndex: =6

        btnSuccess_6 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |-
                =Set(safetyPopup ,false);
                Navigate(ProjectScreen);
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =safetyPopup = true
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =Label2_13.Y+ Label2_13.Height+20
            ZIndex: =7

    grCommentAS As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =16

        Rectangle1_2 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: |
                =varComment
            Width: =Parent.Width
            ZIndex: =9

        Rectangle5_1 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =405
            Visible: |
                =varComment
            Width: =700
            X: =(Parent.Width -Self.Width)/2
            Y: =(Parent.Height - Self.Height)/2
            ZIndex: =10

        Container38_1 As groupContainer.horizontalAutoLayoutContainer:
            Height: =50
            LayoutMode: =LayoutMode.Auto
            Visible: |
                =varComment
            Width: =Rectangle5_1.Width
            X: =Rectangle5_1.X
            Y: =Rectangle5_1.Y+10
            ZIndex: =11

            Label41_1 As label:
                Color: =AllScreensCSS.RActiveColor
                Font: =AllScreensCSS.RFont
                FontWeight: =FontWeight.Semibold
                PaddingLeft: =40
                Text: |-
                    =If(
                        varItemComment = true,
                        "Checkpoint item "
                    ) & " comment"
                Width: =Parent.Width-70
                ZIndex: =1

            Icon2_3 As icon.Cancel:
                Color: =RGBA(0, 0, 0, 1)
                Height: =35
                Icon: =Icon.Cancel
                OnSelect: =Set(varComment,false)
                Width: =30
                ZIndex: =2

        Rectangle6_1 As rectangle:
            BorderColor: =RGBA(179, 179, 179, 1)
            BorderThickness: =2
            Fill: =RGBA(255, 255, 255, 1)
            Height: =250
            Visible: |
                =varComment
            Width: =656
            X: =Rectangle5_1.X+20
            Y: =Container38_1.Y+Container38_1.Height +10
            ZIndex: =12

        Icon4_5 As icon.Add:
            Color: =RGBA(179, 179, 179, 1)
            Fill: =RGBA(179, 179, 179, 1)
            Height: =2
            Icon: =Icon.HorizontalLine
            Visible: |
                =varComment
            Width: =Rectangle6_1.Width
            X: =Rectangle6_1.X
            Y: =Rectangle6_1.Y +Rectangle6_1.Height+10
            ZIndex: =13

        Button11_2 As button:
            BorderThickness: =0
            Fill: =AllScreensCSS.RActiveColor
            FocusedBorderThickness: =
            Font: =AllScreensCSS.RFont
            HoverFill: =//ColorFade(RGBA(56, 96, 178, 1), -20%)
            OnSelect: |-
                =
                Concurrent(
                    Reset(TextInput2_2),
                    Set(
                        varComment,
                        false
                    ),
                    Set(
                        varItemComment,
                        false
                    )
                );
                Navigate(AssessmentScreen);
            PressedColor: =Self.Color
            PressedFill: =Self.Fill
            Size: =AllScreensCSS.RLabelFontSize
            Text: ="Close"
            Visible: |
                =varComment
            X: =(Parent.Width-Self.Width)/2
            Y: =Icon4_5.Y+20
            ZIndex: =14

        TextInput2_2 As text:
            BorderThickness: =0
            Default: |-
                =//here we check item comment is available or not . if available then show using lookup 
                If(
                    varItemComment = true,
                    LookUp(
                        GC_checkpointItemAssessment,
                        checkpointItemId.checkpointItemId = varCheckpointitemID && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId,
                        checkpointItemComment
                    )
                )
            DisplayMode: =DisplayMode.View
            FocusedBorderColor: =RGBA(179, 179, 179, 1)
            Font: =AllScreensCSS.RFont
            Height: =Rectangle6_1.Height
            HoverBorderColor: =RGBA(179, 179, 179, 1)
            HoverFill: =RGBA(0, 0, 0, 0)
            Mode: =TextMode.MultiLine
            PressedBorderColor: =RGBA(179, 179, 179, 1)
            Size: =AllScreensCSS.RfontsizeInput
            Visible: |
                =varComment
            Width: =Rectangle6_1.Width
            X: =Rectangle6_1.X
            Y: =Rectangle6_1.Y
            ZIndex: =15

    grPatchSuccessAS As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =22

        Rectangle1_15 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =popupsuccess =true
            Width: =Parent.Width
            ZIndex: =16

        Rectangle2_14 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =230
            Visible: =popupsuccess =true
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =17

        Image2_26 As image:
            Height: =52
            Image: |-
                =If(
                    VarSubmitError,
                    info,
                    Group
                )
            Visible: =popupsuccess =true
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_14.Y+20
            ZIndex: =18

        Label1_23 As label:
            Align: =Align.Center
            Color: =RGBA(14, 161, 26, 1)
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            PaddingBottom: =0
            Size: =18
            Text: |-
                =If(
                    VarSubmitError,
                    "Error",
                    "Success"
                )
            Visible: =popupsuccess =true
            Width: =324
            X: =(Parent.Width-Self.Width)/2
            Y: =Image2_26.Y+Self.Height+10
            ZIndex: =19

        Label2_16 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =50
            Size: =15
            Text: |
                =VarPopupText 
            Visible: =popupsuccess =true
            Width: =324
            X: =(Parent.Width-Self.Width)/2
            Y: =Label1_23.Y+Self.Height -5
            ZIndex: =20

        btnSuccess_9 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |-
                =
                 //for changing (tabs) depending on  assessment status upcomming to inprogress for first time
                 //varNav is true then assignment status is change then navigate to dashboard screen And close popoup otherwise only close popup
                
                If(
                        VarNav = true,
                        Navigate(DashboardScreen);
                        Set(
                            popupsuccess,
                            false
                        );, 
                         Set(
                            popupsuccess,
                            false
                        );
                    );
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =popupsuccess =true
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =Label2_16.Y+ Self.Height+15
            ZIndex: =21

    grPatchWaitCursor As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =27

        iconOuterRectangleBS_1 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =varSpinner
            Width: =Parent.Width
            ZIndex: =22

        iconInnerRectangleBS_1 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =270
            Visible: =varSpinner
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =23

        imgloaderBS_1 As image:
            Height: =52
            Image: ='ajax-loader 2'
            Visible: =varSpinner
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =iconInnerRectangleBS_1.Y+20
            ZIndex: =24

        lblSyncSuccessPatchBS_1 As label:
            Align: =Align.Center
            Color: =RGBA(14, 161, 26, 1)
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            PaddingBottom: =0
            Size: =18
            Text: ="Submitting..."
            Visible: =varSpinner
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =imgloaderBS_1.Y+imgloaderBS_1.Height+10
            ZIndex: =25

        lblsyncSuccessBS_1 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Semibold
            Height: =140
            Size: =15
            Text: =Varpatchlabel
            VerticalAlign: =VerticalAlign.Top
            Visible: =varSpinner
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =lblSyncSuccessPatchBS_1.Y+lblSyncSuccessPatchBS_1.Height+10
            ZIndex: =26

    grExitAppLoadder_1 As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =32

        iconOuterRectangleBS_3 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =varloader
            Width: =Parent.Width
            ZIndex: =27

        iconInnerRectangleBS_3 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =270
            Visible: =varloader
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =28

        imgloaderBS_3 As image:
            Height: =52
            Image: ='ajax-loader 2'
            Visible: =varloader
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =iconInnerRectangleBS_3.Y+20
            ZIndex: =29

        lblSyncSuccessPatchBS_3 As label:
            Align: =Align.Center
            Color: =RGBA(14, 161, 26, 1)
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            PaddingBottom: =0
            Size: =18
            Text: ="Saving..."
            Visible: =varloader
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =imgloaderBS_3.Y+imgloaderBS_3.Height+10
            ZIndex: =30

        lblsyncSuccessBS_3 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Semibold
            Height: =140
            Size: =15
            Text: ="Saving data to your device cache. Please do not kill the App."
            VerticalAlign: =VerticalAlign.Top
            Visible: =varloader
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =lblSyncSuccessPatchBS_3.Y+lblSyncSuccessPatchBS_3.Height+10
            ZIndex: =31

    Grp_exit_1 As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =38

        Rectangle1_19 As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =VarPopUpExitApp
            Width: =Parent.Width
            ZIndex: =32

        Rectangle2_16 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =280
            Visible: =VarPopUpExitApp
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =33

        Image2_27 As image:
            Height: =52
            Image: =info
            Visible: =VarPopUpExitApp
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =Rectangle2_16.Y+20
            ZIndex: =34

        Label2_18 As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =100
            Size: =15
            Text: ="Are you sure you want to exit ?"
            Visible: =VarPopUpExitApp
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =Image2_27.Y+ Image2_27.Height+2
            ZIndex: =35

        btnExitOk_1 As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |-
                =Set(
                    VarPopUpExitApp,
                    false
                );
                Set(
                    varloader,
                    true
                );
                SaveData(
                    gcProjectAssignment,
                    "localprojectassignment"
                );
                SaveData(
                    GC_bankAssessment,
                    "localbankassessment"
                );
                SaveData(
                    GC_unitAssessment,
                    "localunitassessment"
                );
                SaveData(
                    GcSectionAssessment,
                    "localsectionassessment"
                );
                SaveData(
                    GcCheckpointAssessment,
                    "localcheckpointassessment"
                );
                SaveData(
                    GC_checkpointItemAssessment,
                    "localcheckpointitemassessment"
                );
                SaveData(
                    GC_checkpointItem_ActionItem,
                    "localcheckpointitemactionitem"
                );
                SaveData(
                    GC_checkpointItem_Images,
                    "localcheckpointitemimage"
                );
                SaveData(
                    gcActionItemDelete,
                    "localgcActionItemDelete"
                );
                SaveData(
                    gcImageDelete,
                    "localgcImageDelete"
                );
                Notify("save");
                //Set( varloader, false);
                Exit()
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =VarPopUpExitApp
            Width: =120
            X: =(Parent.Width-Self.Width)/2.3
            Y: =Label2_18.Y+ Label2_18.Height+10
            ZIndex: =36

        btnSuccess_13 As button:
            BorderColor: =RGBA(75, 125, 6, 1)
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverBorderColor: =RGBA(75, 125, 6, 1)
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: =Set(VarPopUpExitApp,false);
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Cancel"
            Visible: =VarPopUpExitApp
            Width: =120
            X: =btnExitOk_1.X+btnExitOk_1.Width+20
            Y: =Label2_18.Y+ Label2_18.Height+10
            ZIndex: =37

